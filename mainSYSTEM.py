# importando dependencias do Tkinter
import locale
import subprocess
import tkinter
from docx import *
import pandas as pd
import docx
import babel.numbers
from IPython.core.display_functions import display
from tkcalendar import *
from datetime import *
from datetime import datetime, timedelta, timezone
from dateutil.relativedelta import relativedelta
from tkinter.ttk import *
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog as fd
import shutil
from openpyxl.workbook import Workbook
from IPython.display import clear_output

# importando pillow
from PIL import ImageTk, Image
from viewSYSTEM import *

#Definindo a variável global de data e ano atual
data = datetime.today()
ano_atual = data.year


#Definindo as variáveis globais das posições de botões de comando.
valor_y_b = 255 #Posição botões
valor_y_e = 248 #Posição dos divisores Pipe
valor_y_st = 285 #Posição da barra de status
valor_y_f = 235  #Posição do botão de adicionar fotos
#key = 1
lista_temp = []


#Função de criação do Sistema de Controle*******************************************************************************
def mainSYSTEM():
    # cores
    co0 = "#2e2d2b"  # Preta
    co1 = "#feffff"  # Branca
    co2 = "#e5e5e5"  # grey
    co3 = "#248eff"  # Verde
    co4 = "#403d3d"  # letra
    co5 = "#3152b7"  # azul
    co7 = "#d42e2b"  # vermelha
    co6 = "#378258"  # Verde novo
    co8 = "#263238"  # + verde
    co9 = "#e9edf5"  # + verde

    # Criando janela
    janela = Tk()
    janela.title("HIGHER")
    janela.iconbitmap('icone/sistema.ico')
    #janela.geometry('1360x780')
    janela.configure(background=co1)
    janela.rowconfigure([0, 1, 2, 3, 4, 5], weight=1)
    janela.columnconfigure([0], weight=1)
    #janela.resizable(width=FALSE, height=FALSE)

    style = Style(janela)
    style.theme_use("clam")

    # Criando Frames***********************************************************************************************************************************************************************
    frame_logo = Frame(janela, width=850, height=52, bg=co6)
    frame_logo.grid(row=0, column=0, pady=0, padx=0, columnspan=1, sticky=EW)

    ttk.Separator(janela, orient=HORIZONTAL).grid(row=1, columnspan=1, ipadx=680, sticky=EW)

    frame_dados = Frame(janela, width=850, height=65, bg=co1)
    frame_dados.grid(row=2, column=0, pady=0, padx=0, sticky=EW)

    ttk.Separator(janela, orient=HORIZONTAL).grid(row=3, columnspan=1, ipadx=680, sticky=EW)

    frame_detalhes = Frame(janela, width=1300, height=305, bg=co1)
    frame_detalhes.grid(row=4, column=0, pady=0, padx=10, sticky=EW)

    frame_tabela = Frame(janela, width=1300, height=185, bg=co1)
    frame_tabela.grid(row=5, column=0, pady=0, padx=10, sticky=EW)

    # Trabalhando no frame logo************************************************************************************************************************************************************
    app_lg = Image.open('icone/inventario.png')
    app_lg = app_lg.resize((50, 50))
    app_lg = ImageTk.PhotoImage(app_lg)
    app_logo = Label(frame_logo, image=app_lg, text=' SISTEMA DE CONTROLE', width=850, compound=LEFT, anchor=NW,
                     font=('Ivy 15 bold'), bg=co6, fg=co1)
    app_logo.grid(row=0, column=0, columnspan=1, sticky=NSEW)
    # *************************************************************************************************************************************************************************************

    #*******************************************************************************************************************
    #Criando uma váriavel para utilizar de ponte
    global captura_v
    captura_v = ""


    # Criando a função de desativar botões*************************************************************************************************************************************************
    def botao_off(i):
        i.config(state='disabled')


    # Criando a função de ativar botões****************************************************************************************************************************************************
    def botao_on(i):
        i.config(state='normal')

    # Criando a tela de inicio*************************************************************************************************************************************************************
    def dashboard():
        #Seção de relatórios********************************************************************************************************************************************************************
        # Criando a Função de Busca
        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição','Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=35)

                            global tree_caixa

                            tree_transacao = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                          show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_referente():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE referente LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=95)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE local LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=150)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute('SELECT * FROM caixa WHERE data BETWEEN ? AND ?',(data, data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone','Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=287, y=205)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()
            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------

        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=4, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_relatorio, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=117, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW, font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=4, y=70)
        caixa = ver_caixa()
        referente = []
        for i in caixa:
            referente.append(i[18])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=4, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_referente, anchor=CENTER,
                                          text='Procurar'.upper(), width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=117, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=4, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=4, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=117, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=4, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=4, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=147, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=287, y=205)

        # Fim da seção de relatórios********************************************************************************************************************************************************************

        #Criando os calculos para exibir no Dashboard***************************************************************************************************************************************************
        def receber():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'ALUGUEL'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente = '{valor_receber}' OR referente = '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Exibindo os resultados

                # Fechando a conexão com o banco de dados
                conn.close()
                if resultado[0][0] == None:
                    resultado = 0
                    return resultado
                else:
                    return resultado[0][0]
            except:
                return

        def pagar():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'ALUGUEL'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente != '{valor_receber}' AND referente != '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado1 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                if resultado1[0][0] == None:
                    resultado1 = 0
                    return resultado1
                else:
                    return resultado1[0][0]
            except:
                return

        def contrato():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = "SELECT count(local) FROM caixa"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                return resultado2[0][0]
            except:
                return

        #Criando botões do Dashboard********************************************************************************************************************************************************************
        global img_pagar, img_clientes, img_receber, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_pagar_ct, img_receber_ct, img_mostrar_ct
        #Mostrar o valor recebido dentro do Mês
        img_receber = Image.open('icone/Dinheiro.png')
        img_receber = img_receber.resize((62,81))
        img_receber = ImageTk.PhotoImage(img_receber)
        card_receber = Button(frame_detalhes, command=dashboard, image=img_receber, text='', width=62, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_receber.place(x=410, y=40)
        l_card_receber = Label(frame_detalhes, text="    - Receitas -     \nR$ {:.2f}".format(receber()),width=15, height=3, font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_receber.place(x=476, y=40)

        # Soma de despesas selecionadas
        def total_receita(event):
            valor_selecionado = e_receita.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_receber.configure(text=resultado)
                return resultado
            except:
                return

        receitas = ver_caixa()
        natureza = []
        for i in receitas:
            natureza.append(i[18])
        e_receita = ttk.Combobox(frame_detalhes, width=44, font=('Monolisa 8 bold'))
        e_receita['values'] = (natureza)
        e_receita.bind("<<ComboboxSelected>>", total_receita)
        e_receita.place(x=410, y=128)
    #***********************************************************************************************************************************************************************************************
        #Mostrar o valor do gasto por mês
        img_pagar = Image.open('icone/Banco.png')
        img_pagar = img_pagar.resize((62, 81))
        img_pagar = ImageTk.PhotoImage(img_pagar)
        card_pagar = Button(frame_detalhes, command=dashboard, image=img_pagar, text='', width=62, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_pagar.place(x=712, y=40)
        l_card_pagar = Label(frame_detalhes, text="    - Despesas -     \nR$ {:.2f}".format(pagar()),width=15, height=3, font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_pagar.place(x=778, y=40)

        # Soma de despesas selecionadas
        def total_despesa(event):
            valor_selecionado = e_despesa.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_pagar.configure(text=resultado)
                return resultado
            except:
                return

        despesas = ver_caixa()
        natureza = []
        for i in despesas:
            natureza.append(i[18])
        e_despesa= ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_despesa['values'] = (natureza)
        e_despesa.bind("<<ComboboxSelected>>", total_despesa)
        e_despesa.place(x=712, y=128)
    # ************************************************************************************************************************************************************************************

        #Mostrar quantos fornecedores existem
        img_clientes = Image.open('icone/Aluguel.png')
        img_clientes = img_clientes.resize((62, 81))
        img_clientes = ImageTk.PhotoImage(img_clientes)
        card_fornecedor = Button(frame_detalhes, command=dashboard, image=img_clientes, text='', width=62, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_fornecedor.place(x=1012, y=40)
        l_card_fornecedor = Label(frame_detalhes, text="- Operações -\n{}".format(contrato()), width=15, height=3, font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_fornecedor.place(x=1079, y=40)

        #Buscar os fornecedores que tiveram movimentação
        def contar_fornecedor(event):
            valor_selecionado = e_ativos.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT count(*) FROM caixa WHERE local='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_fornecedor.configure(text=resultado)
                return resultado
            except:
                return

        ativos = ver_caixa()
        ativo = []
        for i in ativos:
            ativo.append(i[3])
        e_ativos = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_ativos['values'] = (ativo)
        e_ativos.bind("<<ComboboxSelected>>",contar_fornecedor)
        e_ativos.place(x=1012, y=128)
    ##*******************************************************************************************************************************************************************************************
        # Criando os calculos para exibir no Dashboard***************************************************************************************************************************************************
        def receber_ct():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'LOCAÇÃO'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto = '{valor_receber}' OR objeto = '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Exibindo os resultados

                # Fechando a conexão com o banco de dados
                conn.close()
                if resultado[0][0] == None:
                    resultado = 0
                    return resultado
                else:
                    return resultado[0][0]
            except:
                return

        def pagar_ct():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'LOCAÇÃO'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto != '{valor_receber}' AND objeto != '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado1 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                if resultado1[0][0] == None:
                    resultado1 = 0
                    return resultado1
                else:
                    return resultado1[0][0]
            except:
                return

        def contrato_ct():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = "SELECT count(cliente_contrato) FROM contrato"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                return resultado2[0][0]
            except:
                return

        # Criando botões do Dashboard********************************************************************************************************************************************************************
        # Mostrar o valor recebido dentro do Mês
        img_receber_ct = Image.open('icone/pagar.png')
        img_receber_ct = img_receber_ct.resize((62, 81))
        img_receber_ct = ImageTk.PhotoImage(img_receber_ct)
        card_receber_ct = Button(frame_detalhes, command=dashboard, image=img_receber_ct, text='', width=62, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_receber_ct.place(x=410, y=178)
        l_card_receber_ct = Label(frame_detalhes, text="- Recebidos -\nR$ {:.2f}".format(receber_ct()), width=15, height=3,
                               font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_receber_ct.place(x=476, y=178)

        # Soma de despesas selecionadas
        def total_receita_ct(event):
            valor_selecionado = e_receita_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_receber_ct.configure(text=resultado)
                return resultado
            except:
                return

        receitas = ver_contratos()
        natureza = []
        for i in receitas:
            natureza.append(i[3])
        e_receita_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_receita_ct['values'] = (natureza)
        e_receita_ct.bind("<<ComboboxSelected>>", total_receita_ct)
        e_receita_ct.place(x=410, y=266)
        # ***********************************************************************************************************************************************************************************************
        # Mostrar o valor do gasto por mês
        img_pagar_ct = Image.open('icone/carteira.png')
        img_pagar_ct = img_pagar_ct.resize((62, 81))
        img_pagar_ct = ImageTk.PhotoImage(img_pagar_ct)
        card_pagar = Button(frame_detalhes, command=dashboard, image=img_pagar_ct, text='', width=62, compound=LEFT,
                            overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_pagar.place(x=712, y=178)
        l_card_pagar_ct = Label(frame_detalhes, text="- Pagamentos -\nR$ {:.2f}".format(pagar_ct()), width=15, height=3,
                             font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_pagar_ct.place(x=778, y=178)

        # Soma de despesas selecionadas
        def total_despesa_ct(event):
            valor_selecionado = e_despesa_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_pagar_ct.configure(text=resultado)
                return resultado
            except:
                return

        despesas = ver_contratos()
        natureza = []
        for i in despesas:
            natureza.append(i[3])
        e_despesa_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_despesa_ct['values'] = (natureza)
        e_despesa_ct.bind("<<ComboboxSelected>>", total_despesa_ct)
        e_despesa_ct.place(x=712, y=266)
        # ************************************************************************************************************************************************************************************

        # Mostrar quantos fornecedores existem
        img_mostrar_ct = Image.open('icone/mostrar.png')
        img_mostrar_ct = img_mostrar_ct.resize((62, 81))
        img_mostrar_ct = ImageTk.PhotoImage(img_mostrar_ct)
        card_fornecedor_ct = Button(frame_detalhes, command=dashboard, image=img_mostrar_ct, text='', width=62, compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_fornecedor_ct.place(x=1012, y=178)
        l_card_fornecedor_ct = Label(frame_detalhes, text="- Contratos -\n{}".format(contrato_ct()), width=15, height=3,
                                  font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_fornecedor_ct.place(x=1079, y=178)

        # Buscar os fornecedores que tiveram movimentação
        def contar_clientes_ct(event):
            valor_selecionado = e_ativos_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT count(*) FROM contrato WHERE cliente_contrato='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_fornecedor_ct.configure(text=resultado)
                return resultado
            except:
                return

        ativos = ver_contratos()
        ativo = []
        for i in ativos:
            ativo.append(i[5])
        e_ativos_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_ativos_ct['values'] = (ativo)
        e_ativos_ct.bind("<<ComboboxSelected>>", contar_clientes_ct)
        e_ativos_ct.place(x=1012, y=266)

        # Tabela Caixa
        def mostrar_caixa():
            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                             font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                           'Cidade', 'CEP',
                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                           'Tipo de Pagamento',
                           'Natureza', 'Descrição', 'Telefone', 'Status']

            df_list = ver_caixa()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_caixa

            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_caixa.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                  "nw", "center",
                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40]
            n = 0

            for col in list_header:
                tree_caixa.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_caixa.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_caixa.insert('', 'end', values=item)

        mostrar_caixa()
    #Fim dos calculos para exibir no Dashboard*********************************************************************************************************************************************

    # Função da tela de caixa----------------------------------------------------------------------
    def caixa():
        # Função novo caixa
        def novo_caixa():

            data = data_atual.get()
            hora = e_hora.get()
            local = e_local.get().upper()
            nome = e_nome_caixa.get().upper()
            cpf = e_cpf_cnpj.get()
            ie = e_ie_cliente.get()
            endereco = e_endereco_cliente.get().upper()
            bairro = e_bairro_cliente.get().upper()
            cidade = e_cidade_cliente.get().upper()
            cep = e_cep_cliente.get()
            estado = c_estado_cliente.get()
            produto = e_produto_caixa.get()
            quantidade = e_quantidade_caixa.get()
            valor = e_valor_caixa.get()
            desconto = e_valor_desconto.get()
            valor_real = e_valor_real.get()
            tipo_pagamento = e_tipo_pagamento.get().upper()
            referente = e_referente.get().upper()
            status = e_status.get().upper()
            telefone = e_telefone_cliente.get().upper()
            status_caixa = e_status_caixa.get().upper()

            lista = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto, quantidade, valor,
                     desconto, valor_real, tipo_pagamento, referente, status, telefone, status_caixa]

            # Verificando caso algum campo esteja vazio ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return

            # Inserindo os dados no banco de dados
            criar_caixa(lista)

            # Mostrando a mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso')

            # limpando os campos de entrada
            data_atual.delete(0, END)
            e_hora.delete(0, END)
            e_local.delete(0, END)
            e_nome_caixa.delete(0, END)
            e_cpf_cnpj.delete(0, END)
            e_ie_cliente.delete(0, END)
            e_endereco_cliente.delete(0, END)
            e_bairro_cliente.delete(0, END)
            e_cidade_cliente.delete(0, END)
            e_cep_cliente.delete(0, END)
            c_estado_cliente.delete(0, END)
            e_produto_caixa.delete(0, END)
            e_quantidade_caixa.delete(0, END)
            e_valor_caixa.delete(0, END)
            e_valor_desconto.delete(0, END)
            e_valor_real.delete(0, END)
            e_tipo_pagamento.delete(0, END)
            e_referente.delete(0, END)
            e_status.delete(0, END)
            e_telefone_cliente.delete(0, END)
            e_status_caixa.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_caixa()

        # Função atualizar caixa
        def update_caixa():
            try:
                botao_off(botao_novo_cx)
                botao_off(botao_atualizar_cx)
                tree_itens = tree_caixa.focus()
                tree_dicionario = tree_caixa.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                data_atual.delete(0, END)
                e_hora.delete(0, END)
                e_local.delete(0, END)
                e_nome_caixa.delete(0, END)
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_produto_caixa.delete(0, END)
                e_quantidade_caixa.delete(0, END)
                e_valor_caixa.delete(0, END)
                e_valor_desconto.delete(0, END)
                e_valor_real.delete(0, END)
                e_tipo_pagamento.delete(0, END)
                e_referente.delete(0, END)
                e_status.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_status_caixa.delete(0, END)

                # Inserindo os valores nos campos de entrada
                data_atual.insert(0, tree_lista[1])
                e_hora.insert(0, tree_lista[2])
                e_local.insert(0, tree_lista[3])
                e_nome_caixa.insert(0, tree_lista[4])
                e_cpf_cnpj.insert(0, tree_lista[5])
                e_ie_cliente.insert(0, tree_lista[6])
                e_endereco_cliente.insert(0, tree_lista[7])
                e_bairro_cliente.insert(0, tree_lista[8])
                e_cidade_cliente.insert(0, tree_lista[9])
                e_cep_cliente.insert(0, tree_lista[10])
                c_estado_cliente.insert(0, tree_lista[11])
                e_produto_caixa.insert(0, tree_lista[12])
                e_quantidade_caixa.insert(0, tree_lista[13])
                e_valor_caixa.insert(0, tree_lista[14])
                e_valor_desconto.insert(0, tree_lista[15])
                e_valor_real.insert(0, tree_lista[16])
                e_tipo_pagamento.insert(0, tree_lista[17])
                e_referente.insert(0, tree_lista[18])
                e_status.insert(0, tree_lista[19])
                e_telefone_cliente.insert(0, tree_lista[20])
                e_status_caixa.insert(0, tree_lista[21])

                def update():
                    data = data_atual.get()
                    hora = e_hora.get()
                    local = e_local.get().upper()
                    nome = e_nome_caixa.get().upper()
                    cpf = e_cpf_cnpj.get()
                    ie = e_ie_cliente.get()
                    endereco = e_endereco_cliente.get().upper()
                    bairro = e_bairro_cliente.get().upper()
                    cidade = e_cidade_cliente.get().upper()
                    cep = e_cep_cliente.get()
                    estado = c_estado_cliente.get()
                    produto = e_produto_caixa.get()
                    quantidade = e_quantidade_caixa.get()
                    valor = e_valor_caixa.get()
                    desconto = e_valor_desconto.get()
                    valor_real = e_valor_real.get()
                    tipo_pagamento = e_tipo_pagamento.get().upper()
                    referente = e_referente.get().upper()
                    status = e_status.get().upper()
                    telefone = e_telefone_cliente.get().upper()
                    status_caixa = e_status_caixa.get().upper()

                    lista = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto, quantidade,
                             valor,
                             desconto, valor_real, tipo_pagamento, referente, status, telefone, status_caixa, valor_id]

                    # Verificando caso algum campo esteja vazio ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return

                    # Atualizando os dados no banco de dados
                    atualizar_caixa(lista)

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram atualizados com sucesso')

                    # limpando os campos de entrada
                    data_atual.delete(0, END)
                    e_hora.delete(0, END)
                    e_local.delete(0, END)
                    e_nome_caixa.delete(0, END)
                    e_cpf_cnpj.delete(0, END)
                    e_ie_cliente.delete(0, END)
                    e_endereco_cliente.delete(0, END)
                    e_bairro_cliente.delete(0, END)
                    e_cidade_cliente.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    c_estado_cliente.delete(0, END)
                    e_produto_caixa.delete(0, END)
                    e_quantidade_caixa.delete(0, END)
                    e_valor_caixa.delete(0, END)
                    e_valor_desconto.delete(0, END)
                    e_valor_real.delete(0, END)
                    e_tipo_pagamento.delete(0, END)
                    e_referente.delete(0, END)
                    e_status.delete(0, END)
                    e_telefone_cliente.delete(0, END)
                    e_status_caixa.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_caixa()
                    # Destruindo o botão após salvar
                    botao_salvar.destroy()
                    botao_on(botao_novo_cx)
                    botao_on(botao_atualizar_cx)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função atualizar caixa
        def visualizar_caixa():
            botao_off(botao_novo_cx)
            botao_off(botao_atualizar_cx)
            botao_on(botao_duplicar)
            try:
                tree_itens = tree_caixa.focus()
                tree_dicionario = tree_caixa.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                data_atual.delete(0, END)
                e_hora.delete(0, END)
                e_local.delete(0, END)
                e_nome_caixa.delete(0, END)
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_produto_caixa.delete(0, END)
                e_quantidade_caixa.delete(0, END)
                e_valor_caixa.delete(0, END)
                e_valor_desconto.delete(0, END)
                e_valor_real.delete(0, END)
                e_tipo_pagamento.delete(0, END)
                e_referente.delete(0, END)
                e_status.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_status_caixa.delete(0, END)

                # Inserindo os valores nos campos de entrada
                data_atual.insert(0, tree_lista[1])
                e_hora.insert(0, tree_lista[2])
                e_local.insert(0, tree_lista[3])
                e_nome_caixa.insert(0, tree_lista[4])
                e_cpf_cnpj.insert(0, tree_lista[5])
                e_ie_cliente.insert(0, tree_lista[6])
                e_endereco_cliente.insert(0, tree_lista[7])
                e_bairro_cliente.insert(0, tree_lista[8])
                e_cidade_cliente.insert(0, tree_lista[9])
                e_cep_cliente.insert(0, tree_lista[10])
                c_estado_cliente.insert(0, tree_lista[11])
                e_produto_caixa.insert(0, tree_lista[12])
                e_quantidade_caixa.insert(0, tree_lista[13])
                e_valor_caixa.insert(0, tree_lista[14])
                e_valor_desconto.insert(0, tree_lista[15])
                e_valor_real.insert(0, tree_lista[16])
                e_tipo_pagamento.insert(0, tree_lista[17])
                e_referente.insert(0, tree_lista[18])
                e_status.insert(0, tree_lista[19])
                e_telefone_cliente.insert(0, tree_lista[20])
                e_status_caixa.insert(0, tree_lista[21])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar caixa
        def limpar_caixa():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função caixa
            caixa()

        # Função deletar caixa
        def delete_caixa():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_caixa.focus()
                    tree_dicionario = tree_caixa.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # Deletar os dados no bando de dados
                    deletar_caixa([valor_id])

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # Mostrando os valores na tabela
                    mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um item da tabela')

        # Criando a Função de Busca
        def buscar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=825, y=35)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_cx)
            botao_on(botao_atualizar_cx)
            botao_off(botao_duplicar)

        def exportar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM caixa"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                               'Cidade', 'CEP',
                               'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                               'Tipo de Pagamento',
                               'Natureza', 'Descrição', 'Telefone', 'Status']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_caixa.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        def importar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM caixa"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_caixa.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['id']
                    data = row['Data']
                    hora = row['hora']
                    local = row['Local']
                    nome = row['Nome']
                    cpf = row['CPF/CPNJ']
                    ie = row['IE']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    produto = row['Produto']
                    quantidade = row['Quantidade']
                    valor = row['Valor']
                    desconto = row['Desconto']
                    total = row['Valor Total']
                    tipo = row['Tipo de Pagamento']
                    natureza = row['Natureza']
                    descricao = row['Descrição']
                    telefone = row['Telefone']
                    status = row['Status']

                    tabela = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto, quantidade,
                              valor, desconto, total, tipo, natureza, descricao, telefone, status]

                    # Inserindo os dados no banco de dados
                    criar_caixa(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        data = datetime.today()
        ano_atual = data.year
        # Criando campos de entrada
        l_data_atual = Label(frame_detalhes, text="Data:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_atual.place(x=4, y=10)
        data_atual = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                               locale="pt_br")
        data_atual.place(x=57, y=10)

        l_hora = Label(frame_detalhes, text="Hora:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_hora.place(x=147, y=10)
        e_hora = Entry(frame_detalhes, width=10, justify='left', relief='solid')
        e_hora.place(x=187, y=10)

        fornecedores = ver_fornecedor()
        local = []
        for i in fornecedores:
            local.append(i[1])
        l_local = Label(frame_detalhes, text="Origem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                        fg=co4)
        l_local.place(x=257, y=10)
        e_local = ttk.Combobox(frame_detalhes, width=42, font=('Ivy 8 bold'))
        e_local['values'] = (local)
        e_local.place(x=311, y=10)

        def dados_cliente(event):
            try:
                valor_selecionado = e_nome_caixa.get()
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT * FROM cliente WHERE nome_cliente ='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Fechando a conexão com o banco de dados
                conn.close()

                # Exibindo os resultados
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_telefone_cliente.delete(0, END)

                e_cpf_cnpj.insert(0, resultado[0][8])
                e_ie_cliente.insert(0, resultado[0][9])
                e_endereco_cliente.insert(0, resultado[0][3])
                e_bairro_cliente.insert(0, resultado[0][4])
                e_cidade_cliente.insert(0, resultado[0][5])
                e_cep_cliente.insert(0, resultado[0][6])
                c_estado_cliente.insert(0, resultado[0][7])
                e_telefone_cliente.insert(0, resultado[0][12])


            except:
                return

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_nome_caixa = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nome_caixa.place(x=4, y=40)
        e_nome_caixa = ttk.Combobox(frame_detalhes, width=40, font=('Ivy 8 bold'))
        e_nome_caixa['values'] = (cliente)
        e_nome_caixa.bind("<<ComboboxSelected>>", dados_cliente)
        e_nome_caixa.place(x=57, y=40)

        cpfs = ver_fornecedor()
        cpf = []
        for i in cpfs:
            cpf.append(i[8])
        l_cpf_cnpj = Label(frame_detalhes, text="CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cpf_cnpj.place(x=330, y=40)
        e_cpf_cnpj = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cpf_cnpj['values'] = (cpf)
        e_cpf_cnpj.place(x=413, y=40)

        ies = ver_fornecedor()
        ie = []
        for i in ies:
            ie.append(i[9])
        l_ie_cliente = Label(frame_detalhes, text="IE:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_cliente.place(x=4, y=70)
        e_ie_cliente = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_ie_cliente['values'] = (ie)
        e_ie_cliente.place(x=57, y=70)

        enderecos = ver_fornecedor()
        endereco = []
        for i in enderecos:
            endereco.append(i[3])
        l_endereco_cliente = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_endereco_cliente.place(x=177, y=70)
        e_endereco_cliente = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_endereco_cliente['values'] = (endereco)
        e_endereco_cliente.place(x=252, y=70)

        l_bairro_cliente = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_bairro_cliente.place(x=410, y=70)
        e_bairro_cliente = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_bairro_cliente.place(x=456, y=70)

        l_cidade_cliente = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cidade_cliente.place(x=4, y=100)
        e_cidade_cliente = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_cidade_cliente.place(x=57, y=100)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=202, y=100)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=20, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=242, y=100)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        l_estado_cliente = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_estado_cliente.place(x=392, y=100)
        c_estado_cliente = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        c_estado_cliente['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ',
            'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_cliente.place(x=446, y=100)

        def formatar_telefone(event):
            telefone = e_telefone_cliente.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_cliente.delete(0, END)
            e_telefone_cliente.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_cliente = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_telefone_cliente.place(x=4, y=130)
        e_telefone_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=24, justify='left',
                                   relief='solid')
        e_telefone_cliente.place(x=64, y=130)

        e_telefone_cliente.bind('<KeyRelease>', formatar_telefone)

        l_quantidade_caixa = Label(frame_detalhes, text="Quantidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_quantidade_caixa.place(x=215, y=130)
        e_quantidade_caixa = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_quantidade_caixa.place(x=295, y=130)

        l_valor_caixa = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_caixa.place(x=450, y=130)
        e_valor_caixa = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_valor_caixa.place(x=492, y=130)

        l_valor_desconto = Label(frame_detalhes, text="Desconto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_desconto.place(x=4, y=160)
        e_valor_desconto = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_valor_desconto.place(x=69, y=160)

        l_valor_real = Label(frame_detalhes, text="Valor Total:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_real.place(x=187, y=160)
        e_valor_real = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_valor_real.place(x=263, y=160)

        l_tipo_pagamento = Label(frame_detalhes, text="Tipo de Pagto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_tipo_pagamento.place(x=400, y=160)
        e_tipo_pagamento = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_tipo_pagamento.place(x=492, y=160)

        l_referente = Label(frame_detalhes, text="Natureza:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_referente.place(x=4, y=190)
        e_referente = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_referente['values'] = (
            'Compra', 'Venda', 'Locação', 'Financeamento', 'Emprestimo', 'Consignação', 'Doação', 'Outros')
        e_referente.place(x=77, y=190)

        produtos = ver_produto()
        produto = []
        for i in produtos:
            produto.append(i[1])
        l_produto_caixa = Label(frame_detalhes, text="Produto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_caixa.place(x=240, y=190)
        e_produto_caixa = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_produto_caixa['values'] = (produto)
        e_produto_caixa.place(x=293, y=190)

        l_status_caixa = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status_caixa.place(x=383, y=220)
        e_status_caixa = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_status_caixa['values'] = ('ABERTO', 'PAGO')
        e_status_caixa.place(x=444, y=220)

        l_status = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=4, y=220)
        e_status = Entry(frame_detalhes, width=47, justify='left', relief='solid')
        e_status.place(x=76, y=220)



        # linha sepratoria--------------------------------------------------------
        l_linha = Label(frame_detalhes, relief=GROOVE, text='h', width=1, height=100, anchor=NW, font=('Ivy 1'), bg=co0,
                        fg=co0)
        l_linha.place(x=610, y=10)
        l_linha = Label(frame_detalhes, relief=GROOVE, text='h', width=1, height=100, anchor=NW, font=('Ivy 1'), bg=co1,
                        fg=co0)
        l_linha.place(x=609, y=10)

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=627, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=630, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_caixa, anchor=CENTER, text='Procurar'.upper(), width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=757, y=35)

        # Botões-----------------------------------------------------------------------------------------------
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_cx["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_cx = Button(frame_detalhes, command=novo_caixa, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_cx.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_cx["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_cx = Button(frame_detalhes, command=update_caixa, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_cx.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_caixa, image=img_deletar, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_caixa, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_caixa, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_caixa, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_caixa, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_cx.bind("<Enter>", button_houver)
        botao_novo_cx.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_cx.bind("<Enter>", button_houver_editar)
        botao_atualizar_cx.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Tabela Caixa
        def mostrar_caixa():
            app_nome = Label(frame_tabela, text="", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                             font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                           'Cidade', 'CEP',
                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                           'Tipo de Pagamento',
                           'Natureza', 'Descrição', 'Telefone', 'Status']

            df_list = ver_caixa()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_caixa

            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_caixa.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                  "nw", "center",
                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40]
            n = 0

            for col in list_header:
                tree_caixa.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_caixa.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_caixa.insert('', 'end', values=item)

        mostrar_caixa()

    def conta():
        from PIL import ImageTk, Image
        # cores
        co0 = "#2e2d2b"  # Preta
        co1 = "#feffff"  # Branca
        co2 = "#e5e5e5"  # grey
        co3 = "#248eff"  # Verde
        co4 = "#403d3d"  # letra
        co5 = "#3152b7"  # azul
        co7 = "#d42e2b"  # vermelha
        co6 = "#378258"  # Verde novo
        co8 = "#263238"  # + verde
        co9 = "#e9edf5"  # + verde

        # Criando janela
        janela_conta = Tk()
        janela_conta.title("HIGHER")
        janela_conta.iconbitmap('icone/sistema.ico')
        janela_conta.geometry('800x600')
        janela_conta.configure(background=co1)
        # janela_conta.rowconfigure([0, 1, 2, 3, 4, 5], weight=1)
        # janela_conta.columnconfigure([0], weight=1)
        janela_conta.resizable(width=FALSE, height=FALSE)

        style = Style(janela_conta)
        style.theme_use("clam")

        # Criando Frames***********************************************************************************************************************************************************************
        frame_detalhes = Frame(janela_conta, width=1300, height=305, bg=co1)
        frame_detalhes.grid(row=4, column=0, pady=0, padx=10, sticky=EW)

        frame_tabela = Frame(janela_conta, width=1300, height=185, bg=co1)
        frame_tabela.grid(row=5, column=0, pady=0, padx=10, sticky=EW)

        # *************************************************************************************************************************************************************************************

        # Criando a função de desativar botões*************************************************************************************************************************************************
        def botao_off(i):
            i.config(state='disabled')

        # Criando a função de ativar botões****************************************************************************************************************************************************
        def botao_on(i):
            i.config(state='normal')

        # Criando os detalhes da Janela*************************************************************************************
        # Função da tela de Contas ------------------------------------------------------------------
        def contas():
            # Criando frames para tabelas
            frame_tabela_contas = Frame(frame_tabela, width=450, height=180, bg=co1)
            frame_tabela_contas.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

            # Detalhes da Conta-----------------------------------------------------------
            # função nova Conta
            def nova_conta():
                # Teste para verificar se foi escolhido a imagem ou não
                favorecido = e_favorecido.get()
                banco = e_banco.get()
                tipo = e_tipo_conta.get()
                agencia = e_agencia.get()
                conta = e_conta.get()
                variacao = e_variacao.get()
                pix = c_pix.get()

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM conta WHERE conta = ?"
                cursor.execute(consulta, (conta,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = [favorecido, banco, tipo,
                         agencia, conta, variacao, pix]
                # Verificando se os valores estão dentro do solicitado
                for i in lista:
                    if banco == "" or agencia == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                    for resultado in resultados:
                        if banco in resultado:
                            messagebox.showerror('Erro', 'Registro já existente')
                            return

                # Inserindo os dados
                criar_conta(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_favorecido.delete(0, END)
                e_banco.delete(0, END)
                e_tipo_conta.delete(0, END)
                e_agencia.delete(0, END)
                e_conta.delete(0, END)
                e_variacao.delete(0, END)
                c_pix.delete(0, END)

                # Mostrando os valores na tabela
                mostrar_contas()

            # função atualizar conta
            def update_conta():
                try:
                    botao_off(cbotao_novo)
                    botao_off(cbotao_atualizar)
                    botao_off(cbotao_ver)
                    botao_off(cbotao_limpar)
                    botao_off(cbotao_duplicar)
                    tree_itens = tree_cliente.focus()
                    tree_dicionario = tree_cliente.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # inserindo os valores nas entry
                    e_favorecido.insert(0, tree_lista[1])
                    e_banco.insert(0, tree_lista[2])
                    e_tipo_conta.insert(0, tree_lista[3])
                    e_agencia.insert(0, tree_lista[4])
                    e_conta.insert(0, tree_lista[5])
                    e_variacao.insert(0, tree_lista[6])
                    c_pix.insert(0, tree_lista[7])

                    # função atualizar
                    def update():
                        favorecido = e_favorecido.get()
                        banco = e_banco.get()
                        tipo = e_tipo_conta.get()
                        agencia = e_agencia.get()
                        conta = e_conta.get()
                        variacao = e_variacao.get()
                        pix = c_pix.get()

                        lista = [favorecido, banco, tipo,
                                 agencia, conta, variacao, pix, valor_id]

                        # Verificando se os valores estão vazios ou não
                        for i in lista:
                            if conta == "" or agencia == "":
                                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                                return
                        # Inserindo os dados
                        atualizar_conta(lista)

                        # mostrando mensagem de sucesso
                        messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                        e_banco.delete(0, END)
                        e_tipo_conta.delete(0, END)
                        e_agencia.delete(0, END)
                        e_conta.delete(0, END)
                        e_variacao.delete(0, END)
                        c_pix.delete(0, END)
                        e_favorecido.delete(0, END)

                        # Mostrando os valores na tabela
                        mostrar_contas()

                        # destruindo o botão salvar apos salvar os dados
                        botao_salvar.destroy()
                        botao_on(cbotao_novo)
                        botao_on(cbotao_atualizar)
                        botao_on(cbotao_ver)
                        botao_on(cbotao_limpar)
                        botao_on(cbotao_duplicar)

                    global busca_nt, img_add, cimg_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                    cimg_salvar = Image.open('icone/salvar94.png')
                    cimg_salvar = cimg_salvar.resize((20, 20))
                    cimg_salvar = ImageTk.PhotoImage(cimg_salvar, master=janela_conta)
                    botao_salvar = Button(frame_detalhes, command=update, image=cimg_salvar, text='', width=30,
                                          compound=LEFT,
                                          overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                    botao_salvar.place(x=4, y=valor_y_b)
                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            # Função limpar contas
            def limpar_conta():
                e_banco.delete(0, END)
                e_tipo_conta.delete(0, END)
                e_agencia.delete(0, END)
                e_conta.delete(0, END)
                e_variacao.delete(0, END)
                c_pix.delete(0, END)
                e_favorecido.delete(0, END)
                botao_on(cbotao_novo)
                botao_on(cbotao_atualizar)

            # Função para visualizar contas
            def visualizar_conta():
                botao_on(cbotao_duplicar)
                botao_off(cbotao_novo)
                botao_off(cbotao_atualizar)
                try:
                    tree_itens = tree_cliente.focus()
                    tree_dicionario = tree_cliente.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # limpando os campos de entrada
                    e_banco.delete(0, END)
                    e_tipo_conta.delete(0, END)
                    e_agencia.delete(0, END)
                    e_conta.delete(0, END)
                    e_variacao.delete(0, END)
                    c_pix.delete(0, END)
                    e_favorecido.delete(0, END)

                    # Inserindo os valores nos campos de entrada
                    e_favorecido.insert(0, tree_lista[1])
                    e_banco.insert(0, tree_lista[2])
                    e_tipo_conta.insert(0, tree_lista[3])
                    e_agencia.insert(0, tree_lista[4])
                    e_conta.insert(0, tree_lista[5])
                    e_variacao.insert(0, tree_lista[6])
                    c_pix.insert(0, tree_lista[7])


                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            # Função para duplicar um registro
            def copiar_registro():
                botao_on(cbotao_novo)
                botao_on(cbotao_atualizar)
                botao_off(cbotao_duplicar)

            # Função deletar Conta
            def delete_conta():
                try:
                    resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                    if resultado:
                        tree_itens = tree_cliente.focus()
                        tree_dicionario = tree_cliente.item(tree_itens)
                        tree_lista = tree_dicionario['values']
                        valor_id = tree_lista[0]

                        # Deletar os dados no banco de dados
                        deletar_conta([valor_id])

                        # mostrando mensagem de sucesso
                        messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                        mostrar_contas()

                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            # Função para importar novas contas
            def importar_contas():
                try:
                    # Conectando ao banco de dados
                    conn = sqlite3.connect('bdsystem.db')
                    cursor = conn.cursor()

                    # Realizando a busca
                    consulta = "SELECT * FROM conta"
                    cursor.execute(consulta)

                    # Recuperando os resultados
                    resultados = cursor.fetchall()
                    # Exibindo os resultados
                    lista = []
                    for resultado in resultados:
                        lista.append(resultado)
                    # Fechando a conexão com o banco de dados
                    conn.close()
                    tabela_dados = pd.read_excel('arquivos/tabela_conta.xlsx')
                    for index, row in tabela_dados.iterrows():
                        id = row['ID']
                        banco = row['Banco']
                        tipo_conta = row['Tipo da Conta']
                        agencia = row['Agência']
                        conta = row['Conta']
                        variacao = row['Variação']
                        pix = row['PIX']
                        favorecido = row['Favorecido']

                        tabela = [favorecido, banco, tipo_conta, agencia, conta, variacao, pix]

                        # Inserindo os dados no banco de dados
                        criar_conta(tabela)

                    messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                    mostrar_contas()

                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            # Função para exportar o cadastro de contas
            def exportar_contas():
                try:
                    # Conectando ao banco de dados
                    conn = sqlite3.connect('bdsystem.db')
                    cursor = conn.cursor()

                    # Realizando a busca
                    consulta = "SELECT * FROM conta"
                    cursor.execute(consulta)

                    # Recuperando os resultados
                    resultados = cursor.fetchall()
                    # Exibindo os resultados
                    lista = []
                    for resultado in resultados:
                        lista.append(resultado)
                    # Fechando a conexão com o banco de dados
                    conn.close()
                    list_header = ['ID', 'Favorecido', 'Banco', 'Tipo da Conta',
                                   'Agência', 'Conta', 'Variação', 'PIX']
                    tabela_dados = pd.DataFrame(lista)
                    tabela_dados.columns = list_header
                    nome_arquivo = 'arquivos/tabela_conta.xlsx'
                    tabela_dados.to_excel(nome_arquivo, index=False)

                    messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                    # Código para abrir o arquivo xlsx


                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            def fkey():
                global key
                key = 2
            fkey()

            #Caputar uma conta e enviar para tabela de Clientes
            def capturar_contas():
                global captura_v, lista_temp, key
                try:
                    avaliar_conta = e_conta.get()
                    if avaliar_conta == "":
                        messagebox.showerror('Erro', 'Selecione um item da tabela!')
                        return
                    else:
                        captura_v = e_conta.get()
                        lista_temp.append(captura_v)
                        janela_conta.destroy()
                        control('clientes')

                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            #Caputar uma conta e enviar para tabela de Fornecedor
            def capturar_contas_f():
                global captura_v, lista_temp, key
                try:
                    avaliar_conta = e_conta.get()
                    if avaliar_conta == "":
                        messagebox.showerror('Erro', 'Selecione um item da tabela!')
                        return
                    else:
                        captura_v = e_conta.get()
                        lista_temp.append(captura_v)
                        janela_conta.destroy()
                        control('fornecedores')

                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

            # Tabela Contas--------------------------------------------------------------------------------------------------
            def mostrar_contas():
                app_nome = Label(frame_tabela_contas, text="", height=1, pady=0, padx=0, relief="flat",
                                 anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                # creating a treeview with dual scrollbars
                list_header = ['ID', 'Favorecido', 'Banco', 'Tipo de Conta',
                               'Agência', 'Conta', 'Variação', 'PIX']

                df_list = ver_conta()
                df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

                global tree_cliente

                tree_cliente = ttk.Treeview(frame_tabela_contas, selectmode="extended", columns=list_header,
                                            show="headings")

                # vertical scrollbar
                vsb = ttk.Scrollbar(frame_tabela_contas, orient="vertical", command=tree_cliente.yview)
                # horizontal scrollbar
                hsb = ttk.Scrollbar(frame_tabela_contas, orient="horizontal", command=tree_cliente.xview)

                tree_cliente.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                tree_cliente.grid(column=0, row=1, sticky='nsew')
                vsb.grid(column=1, row=1, sticky='ns')
                hsb.grid(column=0, row=2, sticky='ew')
                frame_tabela_contas.grid_rowconfigure(0, weight=12)

                hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
                h = [30, 150, 100, 100, 80, 80, 80, 120]
                n = 0

                for col in list_header:
                    tree_cliente.heading(col, text=col.title(), anchor=NW)
                    # adjust the column's width to the header string
                    tree_cliente.column(col, width=h[n], anchor=hd[n])

                    n += 1

                for item in df_list:
                    tree_cliente.insert('', 'end', values=item)

            mostrar_contas()

            # Criando Itens da Tela de Contas*********************************************************************************************************************************************
            l_favorecido = Label(frame_detalhes, text="Titular da Conta:", height=1, anchor=NW, font=('Ivy 10'),
                                 bg=co1,
                                 fg=co4)
            l_favorecido.place(x=4, y=10)
            e_favorecido = Entry(frame_detalhes, width=45, justify='left', relief='solid')
            e_favorecido.place(x=117, y=10)

            l_banco = Label(frame_detalhes, text="Banco:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_banco.place(x=444, y=10)
            e_banco = Entry(frame_detalhes, width=30, justify='left', relief='solid')
            e_banco.place(x=507, y=10)

            l_tipo_conta = Label(frame_detalhes, text="Tipo da Conta:", height=1, anchor=NW, font=('Ivy 10'),
                                 bg=co1,
                                 fg=co4)
            l_tipo_conta.place(x=4, y=40)
            e_tipo_conta = Entry(frame_detalhes, width=45, justify='left', relief='solid')
            e_tipo_conta.place(x=117, y=40)

            l_agencia = Label(frame_detalhes, text="Agência:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
            l_agencia.place(x=444, y=40)
            e_agencia = Entry(frame_detalhes, width=30, justify='left', relief='solid')
            e_agencia.place(x=507, y=40)

            l_conta = Label(frame_detalhes, text="Conta:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
            l_conta.place(x=4, y=70)
            e_conta = Entry(frame_detalhes, width=18, justify='left', relief='solid')
            e_conta.place(x=117, y=70)

            l_variacao = Label(frame_detalhes, text="Variação:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
            l_variacao.place(x=240, y=70)
            e_variacao = Entry(frame_detalhes, width=12, justify='left', relief='solid')
            e_variacao.place(x=316, y=70)

            l_pix = Label(frame_detalhes, text="Chave Pix:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                          fg=co4)
            l_pix.place(x=4, y=100)
            c_pix = Entry(frame_detalhes, width=45, justify='left', relief='solid')
            c_pix.place(x=117, y=100)

            # Criando os botões da tela**********************************************************************************************************************

            global cimg_capturar_f, cbusca_contas, cimg_capturar, cbusca_conta, cimg_pagar, cimg_clientes, cimg_receber, cbusca_nt, cimg_add, cimg_salvar, cimg_novo, cimg_localizar, cimg_editar, cimg_cancelar, cimg_duplicar, cimg_deletar, cimg_limpar, cimg_importar, cimg_exportar, cimg_pagar_ct, cimg_receber_ct, cimg_mostrar_ct, cimg_aberto, cimg_bloquear

            def button_houver(e):
                cbotao_novo["bg"] = "white"
                cstatus_label.config(text="     Novo Registro")

            def button_houver_leave(e):
                cbotao_novo["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cbusca_contas = Image.open('icone/cnovo.png')
            cbusca_contas = cbusca_contas.resize((20, 20))
            cbusca_contas = ImageTk.PhotoImage(cbusca_contas, master=janela_conta)
            cbotao_novo = Button(frame_detalhes, command=nova_conta, image=cbusca_contas, text='', width=30,
                                 compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_novo.place(x=4, y=valor_y_b)

            def button_houver_editar(e):
                cbotao_atualizar["bg"] = "white"
                cstatus_label.config(text="     Editar Registro")

            def button_houver_leave_editar(e):
                cbotao_atualizar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_editar = Image.open('icone/ceditar.png')
            cimg_editar = cimg_editar.resize((20, 20))
            cimg_editar = ImageTk.PhotoImage(cimg_editar, master=janela_conta)
            cbotao_atualizar = Button(frame_detalhes, command=update_conta, image=cimg_editar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_atualizar.place(x=54, y=valor_y_b)

            pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
            pipe.place(x=104, y=valor_y_e)

            def button_houver_deletar(e):
                cbotao_deletar["bg"] = "white"
                cstatus_label.config(text="     Deletar Registro")

            def button_houver_leave_deletar(e):
                cbotao_deletar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_deletar = Image.open('icone/cdeletar.png')
            cimg_deletar = cimg_deletar.resize((20, 20))
            cimg_deletar = ImageTk.PhotoImage(cimg_deletar, master=janela_conta)
            cbotao_deletar = Button(frame_detalhes, command=delete_conta, image=cimg_deletar, text='', width=30,
                                    compound=LEFT,
                                    overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_deletar.place(x=304, y=valor_y_b)

            def button_houver_duplicar(e):
                cbotao_duplicar["bg"] = "white"
                cstatus_label.config(text="     Duplicar Registro")

            def button_houver_leave_duplicar(e):
                cbotao_duplicar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_duplicar = Image.open('icone/cduplicar.png')
            cimg_duplicar = cimg_duplicar.resize((20, 20))
            cimg_duplicar = ImageTk.PhotoImage(cimg_duplicar, master=janela_conta)
            cbotao_duplicar = Button(frame_detalhes, command=copiar_registro, image=cimg_duplicar, text='',
                                     width=30,
                                     compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_duplicar.place(x=178, y=valor_y_b)

            def button_houver_limpar(e):
                cbotao_limpar["bg"] = "white"
                cstatus_label.config(text="     Limpar Tela")

            def button_houver_leave_limpar(e):
                cbotao_limpar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_limpar = Image.open('icone/climpar.png')
            cimg_limpar = cimg_limpar.resize((20, 20))
            cimg_limpar = ImageTk.PhotoImage(cimg_limpar, master=janela_conta)
            cbotao_limpar = Button(frame_detalhes, command=limpar_conta, image=cimg_limpar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_limpar.place(x=228, y=valor_y_b)

            pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
            pipe.place(x=280, y=valor_y_e)

            def button_houver_ver(e):
                cbotao_ver["bg"] = "white"
                cstatus_label.config(text="     Visualizar Registro")

            def button_houver_leave_ver(e):
                cbotao_ver["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_localizar = Image.open('icone/cvisualizar.png')
            cimg_localizar = cimg_localizar.resize((20, 20))
            cimg_localizar = ImageTk.PhotoImage(cimg_localizar, master=janela_conta)
            cbotao_ver = Button(frame_detalhes, command=visualizar_conta, image=cimg_localizar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_ver.place(x=128, y=valor_y_b)

            def button_houver_importar(e):
                cbotao_importar["bg"] = "white"
                cstatus_label.config(text="     Importar Registros")

            def button_houver_leave_importar(e):
                cbotao_importar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_importar = Image.open('icone/cimportar.png')
            cimg_importar = cimg_importar.resize((20, 20))
            cimg_importar = ImageTk.PhotoImage(cimg_importar, master=janela_conta)
            cbotao_importar = Button(frame_detalhes, command=importar_contas, image=cimg_importar, text='',
                                     width=30,
                                     compound=LEFT,
                                     overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_importar.place(x=354, y=valor_y_b)

            def button_houver_exportar(e):
                cbotao_exportar["bg"] = "white"
                cstatus_label.config(text="     Exportar Tabela")

            def button_houver_leave_exportar(e):
                cbotao_exportar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_exportar = Image.open('icone/cexportar.png')
            cimg_exportar = cimg_exportar.resize((20, 20))
            cimg_exportar = ImageTk.PhotoImage(cimg_exportar, master=janela_conta)
            cbotao_exportar = Button(frame_detalhes, command=exportar_contas, image=cimg_exportar, text='',
                                     width=30,
                                     compound=LEFT,
                                     overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_exportar.place(x=404, y=valor_y_b)

            pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
            pipe.place(x=454, y=valor_y_e)

            def button_houver_capturar(e):
                cbotao_capturar["bg"] = "white"
                cstatus_label.config(text="     Exportar para cliente")

            def button_houver_leave_capturar(e):
                cbotao_capturar["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_capturar = Image.open('icone/Clientes2.png')
            cimg_capturar = cimg_capturar.resize((20, 20))
            cimg_capturar = ImageTk.PhotoImage(cimg_capturar, master=janela_conta)
            cbotao_capturar = Button(frame_detalhes, command=capturar_contas, image=cimg_capturar, text='',
                                     width=30,
                                     compound=LEFT,
                                     overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_capturar.place(x=474, y=valor_y_b)


            def button_houver_capturar_f(e):
                cbotao_capturar_f["bg"] = "white"
                cstatus_label.config(text="     Exportar para fornecedor")

            def button_houver_leave_capturar_f(e):
                cbotao_capturar_f["bg"] = "SystemButtonFace"
                cstatus_label.config(text="")

            cimg_capturar_f = Image.open('icone/corporativo.png')
            cimg_capturar_f = cimg_capturar_f.resize((20, 20))
            cimg_capturar_f = ImageTk.PhotoImage(cimg_capturar_f, master=janela_conta)
            cbotao_capturar_f = Button(frame_detalhes, command=capturar_contas_f, image=cimg_capturar_f, text='',
                                     width=30,
                                     compound=LEFT,
                                     overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            cbotao_capturar_f.place(x=520, y=valor_y_b)

            cstatus_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
            cstatus_label.place(x=0, y=valor_y_st)

            cbotao_novo.bind("<Enter>", button_houver)
            cbotao_novo.bind("<Leave>", button_houver_leave)

            cbotao_deletar.bind("<Enter>", button_houver_deletar)
            cbotao_deletar.bind("<Leave>", button_houver_leave_deletar)

            cbotao_atualizar.bind("<Enter>", button_houver_editar)
            cbotao_atualizar.bind("<Leave>", button_houver_leave_editar)

            cbotao_duplicar.bind("<Enter>", button_houver_duplicar)
            cbotao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

            cbotao_limpar.bind("<Enter>", button_houver_limpar)
            cbotao_limpar.bind("<Leave>", button_houver_leave_limpar)

            cbotao_ver.bind("<Enter>", button_houver_ver)
            cbotao_ver.bind("<Leave>", button_houver_leave_ver)

            cbotao_importar.bind("<Enter>", button_houver_importar)
            cbotao_importar.bind("<Leave>", button_houver_leave_importar)

            cbotao_exportar.bind("<Enter>", button_houver_exportar)
            cbotao_exportar.bind("<Leave>", button_houver_leave_exportar)

            cbotao_capturar.bind("<Enter>", button_houver_capturar)
            cbotao_capturar.bind("<Leave>", button_houver_leave_capturar)

            cbotao_capturar_f.bind("<Enter>", button_houver_capturar_f)
            cbotao_capturar_f.bind("<Leave>", button_houver_leave_capturar_f)

        contas()
        janela_conta.mainloop()

    # Função da tela de clientes ------------------------------------------------------------------
    def clientes():
        key = 1
        lista_temp = []
        # Criando frames para tabelas
        frame_tabela_cliente = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_cliente.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Clientes-----------------------------------------------------------
        # função novo cliente
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto#, key
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def cliente_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((190, 190))
            imagem = ImageTk.PhotoImage(imagem, master=janela)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=657, y=30)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=467, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=cliente_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=467, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            cliente_imagem()

        def novo_cliente():
            # Teste para verificar se foi escolhido a imagem ou não
            global imagem, l_imagem, imagem_string, foto
            if foto != 1:
                imagem_string = ""
            nome = e_nome_cliente.get()
            imagem = imagem_string
            endereco = e_endereco_cliente.get()
            bairro = e_bairro_cliente.get()
            cidade = e_cidade_cliente.get()
            cep = e_cep_cliente.get()
            estado = c_estado_cliente.get()
            cpf = e_cpf_cliente.get()
            ie = e_ie_cliente.get()
            email = e_email_cliente.get()
            e_civil = c_e_civil.get()
            telefone = e_telefone_cliente.get()
            profissao = e_profissao.get()
            nacionalidade = e_nacionalidade.get()
            conta_banco = e_conta.get()
            nome_cliente = nome

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM cliente WHERE nome_cliente = ?"
            cursor.execute(consulta, (nome_cliente,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, profissao, nacionalidade, conta_banco]
            # Verificando se os valores estão dentro do solicitado
            for i in lista:
                if nome == "" or cpf == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if nome in resultado:
                        messagebox.showerror('Erro', 'Registro já existente')
                        return

            # Inserindo os dados
            criar_cliente(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_nome_cliente.delete(0, END)
            e_endereco_cliente.delete(0, END)
            e_bairro_cliente.delete(0, END)
            e_cidade_cliente.delete(0, END)
            e_cep_cliente.delete(0, END)
            c_estado_cliente.delete(0, END)
            e_cpf_cliente.delete(0, END)
            e_ie_cliente.delete(0, END)
            e_email_cliente.delete(0, END)
            c_e_civil.delete(0, END)
            e_telefone_cliente.delete(0, END)
            e_profissao.delete(0, END)
            e_nacionalidade.delete(0, END)
            e_conta.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_clientes()

        # função atualizar cliente
        def update_cliente():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo)
                botao_off(botao_atualizar)
                botao_off(botao_ver)
                botao_off(botao_limpar)
                botao_off(botao_duplicar)
                tree_itens = tree_cliente.focus()
                tree_dicionario = tree_cliente.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_nome_cliente.insert(0, tree_lista[1])

                e_endereco_cliente.insert(0, tree_lista[3])
                e_bairro_cliente.insert(0, tree_lista[4])
                e_cidade_cliente.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                c_estado_cliente.insert(0, tree_lista[7])
                e_cpf_cliente.insert(0, tree_lista[8])
                e_ie_cliente.insert(0, tree_lista[9])
                e_email_cliente.insert(0, tree_lista[10])
                c_e_civil.insert(0, tree_lista[11])
                e_telefone_cliente.insert(0, tree_lista[12])
                e_profissao.insert(0, tree_lista[13])
                e_nacionalidade.insert(0, tree_lista[14])
                e_conta.insert(0, tree_lista[15])

                imagem = tree_lista[2]
                if imagem == "":
                    imagem = tree_lista[2]
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                # Função para ativar o batão de busca de imagens
                def buscar_foto():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    botao_on(botao_carregar)
                    return foto

                # Função para escolher a imagem
                def cliente_imagem():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    imagem = fd.askopenfilename()
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                    botao_carregar['text'] = 'Trocar de foto'.upper()

                botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                                    width=20,
                                    compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_foto.place(x=467, y=valor_y_f)
                botao_carregar = Button(frame_detalhes, command=cliente_imagem, anchor=CENTER,
                                        text='Carregar Foto'.upper(),
                                        width=20,
                                        compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_carregar.place(x=467, y=valor_y_b)
                botao_off(botao_carregar)
                if foto != 1:
                    imagem_string = ""

                if foto == 1:
                    return

                # função atualizar
                def update():
                    # Teste para verificar se foi escolhido a imagem ou não
                    global imagem, l_imagem, imagem_string, foto
                    if foto != 1:
                        imagem_string = ""
                    nome = e_nome_cliente.get()
                    imagem = imagem_string
                    endereco = e_endereco_cliente.get()
                    bairro = e_bairro_cliente.get()
                    cidade = e_cidade_cliente.get()
                    cep = e_cep_cliente.get()
                    estado = c_estado_cliente.get()
                    cpf = e_cpf_cliente.get()
                    ie = e_ie_cliente.get()
                    email = e_email_cliente.get()
                    e_civil = c_e_civil.get()
                    telefone = e_telefone_cliente.get()
                    profissao = e_profissao.get()
                    nacionalidade = e_nacionalidade.get()
                    conta_banco = e_conta.get()

                    lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, profissao, nacionalidade, conta_banco, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if nome == "" or cpf == "":
                            messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                            return
                    # Inserindo os dados
                    atualizar_cliente(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_nome_cliente.delete(0, END)
                    e_endereco_cliente.delete(0, END)
                    e_bairro_cliente.delete(0, END)
                    e_cidade_cliente.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    c_estado_cliente.delete(0, END)
                    e_cpf_cliente.delete(0, END)
                    e_ie_cliente.delete(0, END)
                    e_email_cliente.delete(0, END)
                    c_e_civil.delete(0, END)
                    e_telefone_cliente.delete(0, END)
                    e_profissao.delete(0, END)
                    e_nacionalidade.delete(0, END)
                    e_conta.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_clientes()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo)
                    botao_on(botao_atualizar)
                    botao_on(botao_ver)
                    botao_on(botao_limpar)
                    botao_on(botao_duplicar)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar, master=janela)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar cliente
        def limpar_cliente():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            clientes()

        #Função para visualizar clientes

        def visualizar_cliente():
            botao_on(botao_duplicar)
            botao_off(botao_novo)
            botao_off(botao_atualizar)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_cliente.focus()
                tree_dicionario = tree_cliente.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_nome_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_cpf_cliente.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_email_cliente.delete(0, END)
                c_e_civil.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_profissao.delete(0, END)
                e_nacionalidade.delete(0, END)
                e_conta.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_nome_cliente.insert(0, tree_lista[1])

                e_endereco_cliente.insert(0, tree_lista[3])
                e_bairro_cliente.insert(0, tree_lista[4])
                e_cidade_cliente.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                c_estado_cliente.insert(0, tree_lista[7])
                e_cpf_cliente.insert(0, tree_lista[8])
                e_ie_cliente.insert(0, tree_lista[9])
                e_email_cliente.insert(0, tree_lista[10])
                c_e_civil.insert(0, tree_lista[11])
                e_telefone_cliente.insert(0, tree_lista[12])
                e_profissao.insert(0, tree_lista[13])
                e_nacionalidade.insert(0, tree_lista[14])
                e_conta.insert(0, tree_lista[15])

                imagem = tree_lista[2]
                if imagem == "":
                    return
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=657, y=30)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo)
            botao_on(botao_atualizar)
            botao_off(botao_duplicar)

        # Função deletar Cliente
        def delete_cliente():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_cliente.focus()
                    tree_dicionario = tree_cliente.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_cliente([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_clientes()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        #Função para importar novos clientes
        def importar_clientes():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM cliente"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_cliente.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    nome = row['Nome']
                    imagem = row['Imagem']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    cpf = row['CPF/CNPJ']
                    ie = row['IE']
                    email = row['E-mail']
                    e_civil = row['Estado Civil']
                    telefone = row['Telefone']
                    profissao = row['Profissão']
                    nacionalidade = row['Nacionalidade']
                    conta_banco = row['Conta Bancária']

                    tabela = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, profissao, nacionalidade, conta_banco]

                    # Inserindo os dados no banco de dados
                    criar_cliente(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_clientes()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        #Função para exportar o cadastro de clientes
        def exportar_clientes():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM cliente"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Nome', 'Imagem',
                           'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail', 'Estado Civil', 'Telefone', 'Profissão', 'Nacionalidade', 'Conta Bancária']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_cliente.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Tabela Clientes--------------------------------------------------------------------------------------------------
        def mostrar_clientes():
            app_nome = Label(frame_tabela_cliente, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Nome', 'Imagem',
                           'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail', 'Estado Civil', 'Telefone', 'Profissão', 'Nacionalidade', 'Conta/Banco']

            df_list = ver_clientes()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_cliente

            tree_cliente = ttk.Treeview(frame_tabela_cliente, selectmode="extended", columns=list_header,
                                        show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_cliente, orient="vertical", command=tree_cliente.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_cliente, orient="horizontal", command=tree_cliente.xview)

            tree_cliente.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_cliente.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_cliente.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [30, 150, 80, 150, 60, 80, 80, 60, 80, 80, 100, 80, 80, 80, 80, 80]
            n = 0

            for col in list_header:
                tree_cliente.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_cliente.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_cliente.insert('', 'end', values=item)

        mostrar_clientes()

        # Criando Itens da Tela de Clientes*********************************************************************************************************************************************
        l_nome = Label(frame_detalhes, text="Nome do cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_cliente = Entry(frame_detalhes, width=45, justify='left', relief='solid')
        e_nome_cliente.place(x=117, y=10)

        l_endereco_cliente = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_endereco_cliente.place(x=4, y=40)
        e_endereco_cliente = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_endereco_cliente.place(x=77, y=40)

        l_bairro_cliente = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_bairro_cliente.place(x=220, y=40)
        e_bairro_cliente = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_bairro_cliente.place(x=267, y=40)

        l_cidade_cliente = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cidade_cliente.place(x=4, y=70)
        e_cidade_cliente = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_cidade_cliente.place(x=77, y=70)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=220, y=70)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=20, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=267, y=70)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        def aplicar_mascara_cpf(event):
            cpf = e_cpf_cliente.get()
            cpf_formatado = ''

            # Remover caracteres diferentes de números do CPF
            cpf = ''.join(filter(str.isdigit, cpf))

            # Aplicar a máscara de CPF
            if len(cpf) <= 3:
                cpf_formatado = cpf
            elif len(cpf) <= 6:
                cpf_formatado = cpf[:3] + '.' + cpf[3:]
            elif len(cpf) <= 11:
                cpf_formatado = cpf[:3] + '.' + cpf[3:6] + '.' + cpf[6:9] + '-' + cpf[9:]
            elif len(cpf) > 11:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]
            else:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]

            # Atualizar o texto da entry com o CPF formatado
            e_cpf_cliente.delete(0, END)
            e_cpf_cliente.insert(0, cpf_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 18
            if len(P) <= 18:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_cpf_cliente = Label(frame_detalhes, text="CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cpf_cliente.place(x=4, y=100)
        e_cpf_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=23, justify='left',
                              relief='solid')
        e_cpf_cliente.place(x=77, y=100)

        e_cpf_cliente.bind("<KeyRelease>", aplicar_mascara_cpf)

        l_estado_cliente = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_estado_cliente.place(x=220, y=100)
        c_estado_cliente = ttk.Combobox(frame_detalhes, width=17, font=('Ivy 8 bold'))
        c_estado_cliente['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ',
            'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_cliente.place(x=268, y=100)

        l_ie_cliente = Label(frame_detalhes, text="I.E.:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_cliente.place(x=4, y=130)
        e_ie_cliente = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ie_cliente.place(x=77, y=130)

        l_email_cliente = Label(frame_detalhes, text="E-mail:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_email_cliente.place(x=177, y=130)
        e_email_cliente = Entry(frame_detalhes, width=27, justify='left', relief='solid')
        e_email_cliente.place(x=227, y=130)

        l_e_civil = Label(frame_detalhes, text="Estado Civil:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_e_civil.place(x=4, y=160)
        c_e_civil = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        c_e_civil['values'] = ('Casado(a)', 'Solteiro(a)', 'Outros')
        c_e_civil.place(x=87, y=160)

        def formatar_telefone(event):
            telefone = e_telefone_cliente.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_cliente.delete(0, END)
            e_telefone_cliente.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_cliente = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_telefone_cliente.place(x=187, y=160)
        e_telefone_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=24, justify='left',
                                   relief='solid')
        e_telefone_cliente.place(x=247, y=160)

        e_telefone_cliente.bind('<KeyRelease>', formatar_telefone)

        l_profissao = Label(frame_detalhes, text="Profissão:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_profissao.place(x=4, y=190)
        e_profissao = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_profissao.place(x=87, y=190)

        l_nacionalidade= Label(frame_detalhes, text="Nacionalidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nacionalidade.place(x=197, y=190)
        e_nacionalidade = Entry(frame_detalhes, width=16, justify='left', relief='solid')
        e_nacionalidade.place(x=295, y=190)

        l_conta= Label(frame_detalhes, text="Conta Bancária:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_conta.place(x=4, y=220)
        e_conta = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_conta.place(x=107, y=220)

        # Criando os botões da tela**********************************************************************************************************************

        global busca_conta, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        #Botão para acesso a Conta Bancária*****************************************************************************
        def abrir_contas():
            try:
                global lista_temp
                tree_itens = tree_cliente.focus()
                tree_dicionario = tree_cliente.item(tree_itens)
                tree_lista = tree_dicionario['values']

                id = tree_lista[0]
                nome = e_nome_cliente.get()
                imagem = imagem_string
                endereco = e_endereco_cliente.get()
                bairro = e_bairro_cliente.get()
                cidade = e_cidade_cliente.get()
                cep = e_cep_cliente.get()
                estado = c_estado_cliente.get()
                cpf = e_cpf_cliente.get()
                ie = e_ie_cliente.get()
                email = e_email_cliente.get()
                e_civil = c_e_civil.get()
                telefone = e_telefone_cliente.get()
                profissao = e_profissao.get()
                nacionalidade = e_nacionalidade.get()

                lista_get = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             profissao, nacionalidade, id]
                for i in lista_get:
                    lista_temp.append(i)
                conta()
            except:
                id = 0
                nome = e_nome_cliente.get()
                imagem = imagem_string
                endereco = e_endereco_cliente.get()
                bairro = e_bairro_cliente.get()
                cidade = e_cidade_cliente.get()
                cep = e_cep_cliente.get()
                estado = c_estado_cliente.get()
                cpf = e_cpf_cliente.get()
                ie = e_ie_cliente.get()
                email = e_email_cliente.get()
                e_civil = c_e_civil.get()
                telefone = e_telefone_cliente.get()
                profissao = e_profissao.get()
                nacionalidade = e_nacionalidade.get()

                lista_get = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             profissao, nacionalidade,id]
                for i in lista_get:
                    lista_temp.append(i)
                conta()


        def button_houver_conta(e):
            botao_conta["bg"] = "white"
            status_label.config(text="     Buscar Conta")

        def button_houver_leave_conta(e):
            botao_conta["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_conta = Image.open('icone/carteira.png')
        busca_conta = busca_conta.resize((15, 15))
        busca_conta = ImageTk.PhotoImage(busca_conta, master=janela)
        botao_conta = Button(frame_detalhes, command=abrir_contas, image=busca_conta, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_conta.place(x=237, y=218)
        #***************************************************************************************************************

        def button_houver(e):
            botao_novo["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt, master=janela)
        botao_novo = Button(frame_detalhes, command=novo_cliente, image=busca_nt, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar, master=janela)
        botao_atualizar = Button(frame_detalhes, command=update_cliente, image=img_editar, text='', width=30,
                                 compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar, master=janela)
        botao_deletar = Button(frame_detalhes, command=delete_cliente, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar, master=janela)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar, master=janela)
        botao_limpar = Button(frame_detalhes, command=limpar_cliente, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar, master=janela)
        botao_ver = Button(frame_detalhes, command=visualizar_cliente, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar, master=janela)
        botao_importar = Button(frame_detalhes, command=importar_clientes, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar, master=janela)
        botao_exportar = Button(frame_detalhes, command=exportar_clientes, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_conta.bind("<Enter>", button_houver_conta)
        botao_conta.bind("<Leave>", button_houver_leave_conta)

        botao_novo.bind("<Enter>", button_houver)
        botao_novo.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar.bind("<Enter>", button_houver_editar)
        botao_atualizar.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        #Função para preencher os campos com os valores já preenchidos + a conta selecionada
        def mostrar_clientes_contas():
            #global lista_temp, key
            botao_off(botao_ver)
            botao_off(botao_deletar)
            botao_on(botao_atualizar)
            botao_off(botao_importar)
            botao_off(botao_exportar)

            # limpando os campos de entrada
            e_nome_cliente.delete(0, END)
            e_endereco_cliente.delete(0, END)
            e_bairro_cliente.delete(0, END)
            e_cidade_cliente.delete(0, END)
            e_cep_cliente.delete(0, END)
            c_estado_cliente.delete(0, END)
            e_cpf_cliente.delete(0, END)
            e_ie_cliente.delete(0, END)
            e_email_cliente.delete(0, END)
            c_e_civil.delete(0, END)
            e_telefone_cliente.delete(0, END)
            e_profissao.delete(0, END)
            e_nacionalidade.delete(0, END)
            e_conta.delete(0, END)

            # Inserindo os valores nos campos de entrada
            e_nome_cliente.insert(0, lista_temp[0])
            e_endereco_cliente.insert(0, lista_temp[2])
            e_bairro_cliente.insert(0, lista_temp[3])
            e_cidade_cliente.insert(0, lista_temp[4])
            e_cep_cliente.insert(0, lista_temp[5])
            c_estado_cliente.insert(0, lista_temp[6])
            e_cpf_cliente.insert(0, lista_temp[7])
            e_ie_cliente.insert(0, lista_temp[8])
            e_email_cliente.insert(0, lista_temp[9])
            c_e_civil.insert(0, lista_temp[10])
            e_telefone_cliente.insert(0, lista_temp[11])
            e_profissao.insert(0, lista_temp[12])
            e_nacionalidade.insert(0, lista_temp[13])
            e_conta.insert(0, lista_temp[15])

            key = 1


        if key == 2:
            mostrar_clientes_contas()

            # função atualizar
            def update():
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto, lista_temp
                valor_id = lista_temp[14]
                if foto != 1:
                    imagem_string = ""
                nome = e_nome_cliente.get()
                imagem = imagem_string
                endereco = e_endereco_cliente.get()
                bairro = e_bairro_cliente.get()
                cidade = e_cidade_cliente.get()
                cep = e_cep_cliente.get()
                estado = c_estado_cliente.get()
                cpf = e_cpf_cliente.get()
                ie = e_ie_cliente.get()
                email = e_email_cliente.get()
                e_civil = c_e_civil.get()
                telefone = e_telefone_cliente.get()
                profissao = e_profissao.get()
                nacionalidade = e_nacionalidade.get()
                conta_banco = e_conta.get()

                lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                         profissao, nacionalidade, conta_banco, valor_id]


                # Verificando se os valores estão vazios ou não
                for i in lista:
                    if nome == "" or cpf == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                # Inserindo os dados
                atualizar_cliente(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_nome_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_cpf_cliente.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_email_cliente.delete(0, END)
                c_e_civil.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_profissao.delete(0, END)
                e_nacionalidade.delete(0, END)
                e_conta.delete(0, END)

                # Mostrando os valores na tabela
                mostrar_clientes()

                # destruindo o botão salvar apos salvar os dados
                botao_salvar.destroy()
                botao_on(botao_novo)
                botao_on(botao_atualizar)
                botao_on(botao_ver)
                botao_on(botao_limpar)
                botao_on(botao_duplicar)
                lista_temp = []
                key = 1

            global  img_salvar
            img_salvar = Image.open('icone/salvar.png')
            img_salvar = img_salvar.resize((20, 20))
            img_salvar = ImageTk.PhotoImage(img_salvar, master=janela)
            botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                  overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            botao_salvar.place(x=4, y=valor_y_b)

            if lista_temp[14] == 0:
                botao_salvar.destroy()


        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_nome_cliente.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_cidade_cliente.get()  # Cidade do Pagador
            estado = c_estado_cliente.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                        br_executar.place(x=810, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=810, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=810, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=444, y=40)
            e_texto = Entry(frame_detalhes, width=40, justify='left', relief='solid')
            e_texto.place(x=564, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=810, y=40)

        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=444, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=564, y=10)


    # Função da tela de fornecedores---------------------------------------------------------------
    def fornecedores():
        key = 1
        lista_temp = []
        # Criando frames para tabelas
        frame_tabela_fornecedor = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_fornecedor.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Fornecedor-----------------------------------------------------------
        # Função novo fornecedor
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def fornecedor_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=697, y=30)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=544, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=fornecedor_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=544, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            fornecedor_imagem()

        def novo_fornecedor():
            try:
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto
                if foto != 1:
                    imagem_string = ""
                nome = e_nome_fornecedor.get()
                imagem = imagem_string
                endereco = e_endereco_fornecedor.get()
                bairro = e_bairro_fornecedor.get()
                cidade = e_cidade_fornecedor.get()
                cep = e_cep_fornecedor.get()
                estado = c_estado_fornecedor.get()
                cpf = e_cpf_fornecedor.get()
                ie = e_ie_fornecedor.get()
                email = e_email_fornecedor.get()
                e_civil = c_e_civil_fornecedor.get()
                telefone = e_telefone_fornecedor.get()
                conta_banco = e_conta_fornecedor.get()

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                cursor.execute(consulta, (nome,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, conta_banco]

                # Verificando se os valores estão vazios ou não
                if nome == "" or cpf == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if nome in resultado:
                        messagebox.showerror('Erro', "Registro já existente")
                        return

                # Inserindo os dados
                criar_fornecedor(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_nome_fornecedor.delete(0, END)

                e_endereco_fornecedor.delete(0, END)
                e_bairro_fornecedor.delete(0, END)
                e_cidade_fornecedor.delete(0, END)
                e_cep_fornecedor.delete(0, END)
                c_estado_fornecedor.delete(0, END)
                e_cpf_fornecedor.delete(0, END)
                e_ie_fornecedor.delete(0, END)
                e_email_fornecedor.delete(0, END)
                c_e_civil_fornecedor.delete(0, END)
                e_telefone_fornecedor.delete(0, END)
                e_conta_fornecedor.delete(0, END)
                # Mostrando os valores na tabela
                mostrar_fornecedores()


            except IndexError:
                messagebox.showerror('Erro', 'Preencha todos os campo obrigatórios')

        # função atualizar fornecedor
        def update_fornecedor():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_f)
                botao_off(botao_atualizar_f)
                tree_itens = tree_fornecedor.focus()
                tree_dicionario = tree_fornecedor.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_nome_fornecedor.insert(0, tree_lista[1])

                e_endereco_fornecedor.insert(0, tree_lista[3])
                e_bairro_fornecedor.insert(0, tree_lista[4])
                e_cidade_fornecedor.insert(0, tree_lista[5])
                e_cep_fornecedor.insert(0, tree_lista[6])
                c_estado_fornecedor.insert(0, tree_lista[7])
                e_cpf_fornecedor.insert(0, tree_lista[8])
                e_ie_fornecedor.insert(0, tree_lista[9])
                e_email_fornecedor.insert(0, tree_lista[10])
                c_e_civil_fornecedor.insert(0, tree_lista[11])
                e_telefone_fornecedor.insert(0, tree_lista[12])
                e_conta_fornecedor.insert(0, tree_lista[13])

                imagem = tree_lista[2]

                # função atualizar
                def update():
                    nome = e_nome_fornecedor.get()
                    imagem = ""
                    endereco = e_endereco_fornecedor.get()
                    bairro = e_bairro_fornecedor.get()
                    cidade = e_cidade_fornecedor.get()
                    cep = e_cep_fornecedor.get()
                    estado = c_estado_fornecedor.get()
                    cpf = e_cpf_fornecedor.get()
                    ie = e_ie_fornecedor.get()
                    email = e_email_fornecedor.get()
                    e_civil = c_e_civil_fornecedor.get()
                    telefone = e_telefone_fornecedor.get()
                    conta_banco = e_conta_fornecedor.get()

                    lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, conta_banco, valor_id]

                    # Verificando se os valores estão vazios ou não
                    # for i in lista:
                    if nome == "" or cpf == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                    # Inserindo os dados
                    atualizar_fornecedor(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_nome_fornecedor.delete(0, END)
                    e_endereco_fornecedor.delete(0, END)
                    e_bairro_fornecedor.delete(0, END)
                    e_cidade_fornecedor.delete(0, END)
                    e_cep_fornecedor.delete(0, END)
                    c_estado_fornecedor.delete(0, END)
                    e_cpf_fornecedor.delete(0, END)
                    e_ie_fornecedor.delete(0, END)
                    e_email_fornecedor.delete(0, END)
                    c_e_civil_fornecedor.delete(0, END)
                    e_telefone_fornecedor.delete(0, END)
                    e_conta_fornecedor.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_fornecedores()

                    # destruindo o botão salvar após salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_f)
                    botao_on(botao_atualizar_f)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar fornecedor
        def limpar_fornecedor():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            fornecedores()

        # Função visualizar fornecedor
        def visualizar_fornecedor():
            botao_on(botao_duplicar)
            botao_off(botao_novo_f)
            botao_off(botao_atualizar_f)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_fornecedor.focus()
                tree_dicionario = tree_fornecedor.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_nome_fornecedor.delete(0, END)
                e_endereco_fornecedor.delete(0, END)
                e_bairro_fornecedor.delete(0, END)
                e_cidade_fornecedor.delete(0, END)
                e_cep_fornecedor.delete(0, END)
                c_estado_fornecedor.delete(0, END)
                e_cpf_fornecedor.delete(0, END)
                e_ie_fornecedor.delete(0, END)
                e_email_fornecedor.delete(0, END)
                c_e_civil_fornecedor.delete(0, END)
                e_telefone_fornecedor.delete(0, END)
                e_conta_fornecedor.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_nome_fornecedor.insert(0, tree_lista[1])

                e_endereco_fornecedor.insert(0, tree_lista[3])
                e_bairro_fornecedor.insert(0, tree_lista[4])
                e_cidade_fornecedor.insert(0, tree_lista[5])
                e_cep_fornecedor.insert(0, tree_lista[6])
                c_estado_fornecedor.insert(0, tree_lista[7])
                e_cpf_fornecedor.insert(0, tree_lista[8])
                e_ie_fornecedor.insert(0, tree_lista[9])
                e_email_fornecedor.insert(0, tree_lista[10])
                c_e_civil_fornecedor.insert(0, tree_lista[11])
                e_telefone_fornecedor.insert(0, tree_lista[12])
                e_conta_fornecedor.insert(0, tree_lista[13])

                imagem = tree_lista[2]
                if imagem == "":
                    return
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=757, y=30)


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo_f)
            botao_on(botao_atualizar_f)
            botao_off(botao_duplicar)

        # função deletar Fornecedores
        def delete_fornecedor():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_fornecedor.focus()
                    tree_dicionario = tree_fornecedor.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_fornecedor([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_fornecedores()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_nome_fornecedor.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_cidade_fornecedor.get()  # Cidade do Pagador
            estado = c_estado_fornecedor.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                        br_executar.place(x=860, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=860, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=860, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=494, y=40)
            e_texto = Entry(frame_detalhes, width=40, justify='left', relief='solid')
            e_texto.place(x=614, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=860, y=40)

        # Função para importar novos clientes
        def importar_fornecedores():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_fornecedor.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    nome = row['Nome']
                    imagem = row['Imagem']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    cpf = row['CPF/CNPJ']
                    ie = row['IE']
                    email = row['E-mail']
                    e_civil = row['Estado Civil']
                    telefone = row['Telefone']
                    conta_banco = row['Conta Bancária']

                    tabela = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone, conta_banco]

                    # Inserindo os dados no banco de dados
                    criar_fornecedor(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_fornecedores()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de clientes
        def exportar_fornecedores():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Nome', 'Imagem',
                               'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail',
                               'Estado Civil', 'Telefone', 'Conta Bancária']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_fornecedor.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=494, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=614, y=10)

        # Criando Itens da Tela de Fornecedores*********************************************************************************************************************************************
        l_nome_fornecedor = Label(frame_detalhes, text="*Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nome_fornecedor.place(x=4, y=10)
        e_nome_fornecedor = Entry(frame_detalhes, width=58, justify='left', relief='solid')
        e_nome_fornecedor.place(x=97, y=10)

        l_endereco_fornecedor = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_endereco_fornecedor.place(x=4, y=40)
        e_endereco_fornecedor = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_endereco_fornecedor.place(x=97, y=40)

        l_bairro_fornecedor = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_bairro_fornecedor.place(x=250, y=40)
        e_bairro_fornecedor = Entry(frame_detalhes, width=25, justify='left', relief='solid')
        e_bairro_fornecedor.place(x=297, y=40)

        l_cidade_fornecedor = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cidade_fornecedor.place(x=4, y=70)
        e_cidade_fornecedor = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_cidade_fornecedor.place(x=97, y=70)

        def formatar_cep(event):
            cep = e_cep_fornecedor.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_fornecedor.delete(0, END)
            e_cep_fornecedor.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_fornecedor = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_fornecedor.place(x=250, y=70)
        e_cep_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=25, justify='left',
                                 relief='solid')
        e_cep_fornecedor.place(x=297, y=70)

        e_cep_fornecedor.bind('<KeyRelease>', formatar_cep)

        def aplicar_mascara_cpf(event):
            cpf = e_cpf_fornecedor.get()
            cpf_formatado = ''

            # Remover caracteres diferentes de números do CPF
            cpf = ''.join(filter(str.isdigit, cpf))

            # Aplicar a máscara de CPF
            if len(cpf) <= 3:
                cpf_formatado = cpf
            elif len(cpf) <= 6:
                cpf_formatado = cpf[:3] + '.' + cpf[3:]
            elif len(cpf) <= 11:
                cpf_formatado = cpf[:3] + '.' + cpf[3:6] + '.' + cpf[6:9] + '-' + cpf[9:]
            elif len(cpf) > 11:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]
            else:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]

            # Atualizar o texto da entry com o CPF formatado
            e_cpf_fornecedor.delete(0, END)
            e_cpf_fornecedor.insert(0, cpf_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 18
            if len(P) <= 18:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_cpf_fornecedor = Label(frame_detalhes, text="*CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cpf_fornecedor.place(x=4, y=100)
        e_cpf_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=25, justify='left',
                                 relief='solid')
        e_cpf_fornecedor.place(x=87, y=100)

        e_cpf_fornecedor.bind("<KeyRelease>", aplicar_mascara_cpf)

        l_estado_fornecedor = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_estado_fornecedor.place(x=250, y=100)
        c_estado_fornecedor = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        c_estado_fornecedor['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_fornecedor.place(x=307, y=100)

        l_ie_fornecedor = Label(frame_detalhes, text="I.E.:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_fornecedor.place(x=4, y=130)
        e_ie_fornecedor = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ie_fornecedor.place(x=87, y=130)

        l_email_fornecedor = Label(frame_detalhes, text="E-mail:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_email_fornecedor.place(x=207, y=130)
        e_email_fornecedor = Entry(frame_detalhes, width=30, justify='left', relief='solid')
        e_email_fornecedor.place(x=267, y=130)

        l_e_civil_fornecedor = Label(frame_detalhes, text="Estado Civil:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_e_civil_fornecedor.place(x=4, y=160)
        c_e_civil_fornecedor = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        c_e_civil_fornecedor['values'] = ('Casado(a)', 'Solteiro(a)', 'Outros')
        c_e_civil_fornecedor.place(x=87, y=160)

        def formatar_telefone(event):
            telefone = e_telefone_fornecedor.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_fornecedor.delete(0, END)
            e_telefone_fornecedor.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_fornecedor = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_telefone_fornecedor.place(x=207, y=160)
        e_telefone_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=30, justify='left',
                                      relief='solid')
        e_telefone_fornecedor.place(x=267, y=160)

        e_telefone_fornecedor.bind('<KeyRelease>', formatar_telefone)

        l_conta_fornecedor = Label(frame_detalhes, text="Conta Bancária:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_conta_fornecedor.place(x=4, y=190)
        e_conta_fornecedor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_conta_fornecedor.place(x=107, y=190)

        # Botões de controle de fornecedor*****************************************************************************************************************************
        global busca_conta, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        #Botão para acesso a Conta Bancária ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
        def abrir_contas():
            try:
                global lista_temp
                tree_itens = tree_fornecedor.focus()
                tree_dicionario = tree_fornecedor.item(tree_itens)
                tree_lista = tree_dicionario['values']

                id = tree_lista[0]
                nome = e_nome_fornecedor.get()
                imagem = imagem_string
                endereco = e_endereco_fornecedor.get()
                bairro = e_bairro_fornecedor.get()
                cidade = e_cidade_fornecedor.get()
                cep = e_cep_fornecedor.get()
                estado = c_estado_fornecedor.get()
                cpf = e_cpf_fornecedor.get()
                ie = e_ie_fornecedor.get()
                email = e_email_fornecedor.get()
                e_civil = c_e_civil_fornecedor.get()
                telefone = e_telefone_fornecedor.get()


                lista_get = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             id]
                for i in lista_get:
                    lista_temp.append(i)
                conta()
            except:
                id = 0
                nome = e_nome_fornecedor.get()
                imagem = imagem_string
                endereco = e_endereco_fornecedor.get()
                bairro = e_bairro_fornecedor.get()
                cidade = e_cidade_fornecedor.get()
                cep = e_cep_fornecedor.get()
                estado = c_estado_fornecedor.get()
                cpf = e_cpf_fornecedor.get()
                ie = e_ie_fornecedor.get()
                email = e_email_fornecedor.get()
                e_civil = c_e_civil_fornecedor.get()
                telefone = e_telefone_fornecedor.get()

                lista_get = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             id]
                for i in lista_get:
                    lista_temp.append(i)
                conta()

        def button_houver_conta(e):
            botao_conta["bg"] = "white"
            status_label.config(text="     Buscar Conta")

        def button_houver_leave_conta(e):
            botao_conta["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_conta = Image.open('icone/carteira.png')
        busca_conta = busca_conta.resize((15, 15))
        busca_conta = ImageTk.PhotoImage(busca_conta, master=janela)
        botao_conta = Button(frame_detalhes, command=abrir_contas, image=busca_conta, text='', width=30, compound=LEFT,
                             overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_conta.place(x=237, y=189)

        # ***************************************************************************************************************

        def button_houver(e):
            botao_novo_f["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt, master=janela)
        botao_novo_f = Button(frame_detalhes, command=novo_fornecedor, image=busca_nt, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_f.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_f["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar, master=janela)
        botao_atualizar_f = Button(frame_detalhes, command=update_fornecedor, image=img_editar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_f.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=253)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar, master=janela)
        botao_deletar = Button(frame_detalhes, command=delete_fornecedor, image=img_deletar, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar, master=janela)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar, master=janela)
        botao_limpar = Button(frame_detalhes, command=limpar_fornecedor, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=248)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar, master=janela)
        botao_ver = Button(frame_detalhes, command=visualizar_fornecedor, image=img_localizar, text='', width=30, compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"]="white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar, master=janela)
        botao_importar = Button(frame_detalhes, command=importar_fornecedores, image=img_importar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"]="white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar, master=janela)
        botao_exportar = Button(frame_detalhes, command=exportar_fornecedores, image=img_exportar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_f.bind("<Enter>", button_houver)
        botao_novo_f.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_f.bind("<Enter>", button_houver_editar)
        botao_atualizar_f.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_conta.bind("<Enter>", button_houver_conta)
        botao_conta.bind("<Leave>", button_houver_leave_conta)

        # Função para preencher os campos com os valores já preenchidos + a conta selecionada
        def mostrar_fornecedor_contas():
            #global lista_temp, key
            botao_off(botao_ver)
            botao_off(botao_deletar)
            botao_on(botao_atualizar_f)
            botao_off(botao_importar)
            botao_off(botao_exportar)

            # limpando os campos de entrada
            e_nome_fornecedor.delete(0, END)
            e_endereco_fornecedor.delete(0, END)
            e_bairro_fornecedor.delete(0, END)
            e_cidade_fornecedor.delete(0, END)
            e_cep_fornecedor.delete(0, END)
            c_estado_fornecedor.delete(0, END)
            e_cpf_fornecedor.delete(0, END)
            e_ie_fornecedor.delete(0, END)
            e_email_fornecedor.delete(0, END)
            c_e_civil_fornecedor.delete(0, END)
            e_telefone_fornecedor.delete(0, END)
            e_conta_fornecedor.delete(0, END)

            # Inserindo os valores nos campos de entrada
            e_nome_fornecedor.insert(0, lista_temp[0])
            e_endereco_fornecedor.insert(0, lista_temp[2])
            e_bairro_fornecedor.insert(0, lista_temp[3])
            e_cidade_fornecedor.insert(0, lista_temp[4])
            e_cep_fornecedor.insert(0, lista_temp[5])
            c_estado_fornecedor.insert(0, lista_temp[6])
            e_cpf_fornecedor.insert(0, lista_temp[7])
            e_ie_fornecedor.insert(0, lista_temp[8])
            e_email_fornecedor.insert(0, lista_temp[9])
            c_e_civil_fornecedor.insert(0, lista_temp[10])
            e_telefone_fornecedor.insert(0, lista_temp[11])
            e_conta_fornecedor.insert(0, lista_temp[13])

            key = 1

        if key == 2:
            mostrar_fornecedor_contas()

            # função atualizar
            def update():
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto, lista_temp
                valor_id = lista_temp[12]
                if foto != 1:
                    imagem_string = ""
                nome = e_nome_fornecedor.get()
                imagem = imagem_string
                endereco = e_endereco_fornecedor.get()
                bairro = e_bairro_fornecedor.get()
                cidade = e_cidade_fornecedor.get()
                cep = e_cep_fornecedor.get()
                estado = c_estado_fornecedor.get()
                cpf = e_cpf_fornecedor.get()
                ie = e_ie_fornecedor.get()
                email = e_email_fornecedor.get()
                e_civil = c_e_civil_fornecedor.get()
                telefone = e_telefone_fornecedor.get()
                conta_banco = e_conta_fornecedor.get()

                lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                         conta_banco, valor_id]

                # Verificando se os valores estão vazios ou não
                for i in lista:
                    if nome == "" or cpf == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                # Inserindo os dados
                atualizar_fornecedor(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_nome_fornecedor.delete(0, END)
                e_endereco_fornecedor.delete(0, END)
                e_bairro_fornecedor.delete(0, END)
                e_cidade_fornecedor.delete(0, END)
                e_cep_fornecedor.delete(0, END)
                c_estado_fornecedor.delete(0, END)
                e_cpf_fornecedor.delete(0, END)
                e_ie_fornecedor.delete(0, END)
                e_email_fornecedor.delete(0, END)
                c_e_civil_fornecedor.delete(0, END)
                e_telefone_fornecedor.delete(0, END)
                e_conta_fornecedor.delete(0, END)

                # Mostrando os valores na tabela
                mostrar_fornecedores()

                # destruindo o botão salvar apos salvar os dados
                botao_salvar.destroy()
                botao_on(botao_novo_f)
                botao_on(botao_atualizar_f)
                botao_on(botao_ver)
                botao_on(botao_limpar)
                botao_on(botao_duplicar)
                lista_temp = []
                key = 1

            global img_salvar
            img_salvar = Image.open('icone/salvar.png')
            img_salvar = img_salvar.resize((20, 20))
            img_salvar = ImageTk.PhotoImage(img_salvar, master=janela)
            botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                  overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
            botao_salvar.place(x=4, y=valor_y_b)

            if lista_temp[12] == 0:
                botao_salvar.destroy()


        # Tabela Fornecedores--------------------------------------------------------------------------------------------------
        def mostrar_fornecedores():
            app_nome = Label(frame_tabela_fornecedor, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Nome', 'Imagem', 'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE',
                           'Email', 'Estado Civil', 'Telefone', 'Conta/Banco']

            df_list = ver_fornecedor()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_fornecedor

            tree_fornecedor = ttk.Treeview(frame_tabela_fornecedor, selectmode="extended", columns=list_header,
                                           show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_fornecedor, orient="vertical", command=tree_fornecedor.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_fornecedor, orient="horizontal", command=tree_fornecedor.xview)

            tree_fornecedor.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_fornecedor.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_fornecedor.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [30, 160, 60, 100, 80, 80, 65, 40, 80, 80, 100, 80, 100,80]
            n = 0

            for col in list_header:
                tree_fornecedor.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_fornecedor.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_fornecedor.insert('', 'end', values=item)

        mostrar_fornecedores()

    # Função da tela de Imóveis---------------------------------------------------------------
    def imoveis():
        # Criando frames para tabelas
        frame_tabela_imoveis = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_imoveis.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes de Imóvel-----------------------------------------------------------
        # Função novo Imóvel
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def imovel_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=707, y=20)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=744, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=imovel_imagem, anchor=CENTER,
                                text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=744, y=valor_y_b)
        botao_off(botao_carregar)

        if foto != 1:
            imagem_string = ""

        if foto == 1:
            imovel_imagem()

            imagem = imagem_string

        def novo_imovel():
            try:
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto
                if foto != 1:
                    imagem_string = ""
                etiqueta = e_identificar_imovel.get()
                tipo = e_tipo_imovel.get()
                endereco = e_endereco_imovel.get()
                descricao = e_descricao_imovel.get()
                area = e_area_imovel.get()
                quarto = e_quartos_imovel.get()
                sala = c_salas_imovel.get()
                cozinha = c_cozinha_imovel.get()
                banheiro = e_banheiros_imovel.get()
                adicional = e_adicionais_imovel.get()
                estacionamento = c_estacionamento_imovel.get()
                valor = e_valor_imovel.get()
                pagamento = e_pagamento_imovel.get()
                diponivel = e_diponivel_imovel.get()
                imagem = imagem_string
                proprietario = e_proprietario_imovel.get()
                status = e_status_imovel.get()
                historico = e_transacao_imovel.get()

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                cursor.execute(consulta, (etiqueta,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional,
                         estacionamento, valor,
                         tipo, diponivel, imagem, proprietario, status, historico]

                # Verificando se os valores estão vazios ou não
                if etiqueta == "" or quarto == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if etiqueta in resultado:
                        messagebox.showerror('Erro', "Registro já existente")
                        return

                # Inserindo os dados
                criar_imovel(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_identificar_imovel.delete(0, END)
                e_tipo_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_descricao_imovel.delete(0, END)
                e_area_imovel.delete(0, END)
                e_quartos_imovel.delete(0, END)
                c_salas_imovel.delete(0, END)
                c_cozinha_imovel.delete(0, END)
                e_banheiros_imovel.delete(0, END)
                e_adicionais_imovel.delete(0, END)
                c_estacionamento_imovel.delete(0, END)
                e_valor_imovel.delete(0, END)
                e_pagamento_imovel.delete(0, END)
                e_diponivel_imovel.delete(0, END)
                e_proprietario_imovel.delete(0, END)
                e_status_imovel.delete(0, END)
                e_transacao_imovel.delete(0, END)

                # Mostrando os valores na tabela
                mostrar_imoveis()


            except IndexError:
                messagebox.showerror('Erro', 'Preencha todos os campo obrigatórios')

        # função atualizar fornecedor
        def update_imovel():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_f)
                botao_off(botao_atualizar_f)
                tree_itens = tree_imovel.focus()
                tree_dicionario = tree_imovel.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_identificar_imovel.insert(0, tree_lista[1])
                e_tipo_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_descricao_imovel.insert(0, tree_lista[4])
                e_area_imovel.insert(0, tree_lista[5])
                e_quartos_imovel.insert(0, tree_lista[6])
                c_salas_imovel.insert(0, tree_lista[7])
                c_cozinha_imovel.insert(0, tree_lista[8])
                e_banheiros_imovel.insert(0, tree_lista[9])
                e_adicionais_imovel.insert(0, tree_lista[10])
                c_estacionamento_imovel.insert(0, tree_lista[11])
                e_valor_imovel.insert(0, tree_lista[12])
                e_pagamento_imovel.insert(0, tree_lista[13])
                e_diponivel_imovel.insert(0, tree_lista[14])
                e_proprietario_imovel.insert(0, tree_lista[16])
                e_status_imovel.insert(0, tree_lista[17])
                e_transacao_imovel.insert(0, tree_lista[18])

                imagem = tree_lista[15]

                # função atualizar
                def update():
                    imagem = ""
                    etiqueta = e_identificar_imovel.get()
                    tipo = e_tipo_imovel.get()
                    endereco = e_endereco_imovel.get()
                    descricao = e_descricao_imovel.get()
                    area = e_area_imovel.get()
                    quarto = e_quartos_imovel.get()
                    sala = c_salas_imovel.get()
                    cozinha = c_cozinha_imovel.get()
                    banheiro = e_banheiros_imovel.get()
                    adicional = e_adicionais_imovel.get()
                    estacionamento = c_estacionamento_imovel.get()
                    valor = e_valor_imovel.get()
                    pagamento = e_pagamento_imovel.get()
                    diponivel = e_diponivel_imovel.get()
                    proprietario = e_proprietario_imovel.get()
                    status = e_status_imovel.get()
                    historico = e_transacao_imovel.get()

                    lista = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional,
                             estacionamento, valor,
                             tipo, diponivel, imagem, proprietario, status, historico,
                             valor_id]

                    # Verificando se os valores estão vazios ou não
                    # for i in lista:
                    if etiqueta == "" or proprietario == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                    # Inserindo os dados
                    atualizar_imovel(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_identificar_imovel.delete(0, END)
                    e_tipo_imovel.delete(0, END)
                    e_endereco_imovel.delete(0, END)
                    e_descricao_imovel.delete(0, END)
                    e_area_imovel.delete(0, END)
                    e_quartos_imovel.delete(0, END)
                    c_salas_imovel.delete(0, END)
                    c_cozinha_imovel.delete(0, END)
                    e_banheiros_imovel.delete(0, END)
                    e_adicionais_imovel.delete(0, END)
                    c_estacionamento_imovel.delete(0, END)
                    e_valor_imovel.delete(0, END)
                    e_pagamento_imovel.delete(0, END)
                    e_diponivel_imovel.delete(0, END)
                    e_proprietario_imovel.delete(0, END)
                    e_status_imovel.delete(0, END)
                    e_transacao_imovel.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_imoveis()

                    # destruindo o botão salvar após salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_f)
                    botao_on(botao_atualizar_f)

                global busca_im, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar fornecedor
        def limpar_imovel():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            imoveis()

        # Função visualizar fornecedor
        def visualizar_imovel():
            botao_on(botao_duplicar)
            botao_off(botao_novo_f)
            botao_off(botao_atualizar_f)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_imovel.focus()
                tree_dicionario = tree_imovel.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_identificar_imovel.delete(0, END)
                e_tipo_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_descricao_imovel.delete(0, END)
                e_area_imovel.delete(0, END)
                e_quartos_imovel.delete(0, END)
                c_salas_imovel.delete(0, END)
                c_cozinha_imovel.delete(0, END)
                e_banheiros_imovel.delete(0, END)
                e_adicionais_imovel.delete(0, END)
                c_estacionamento_imovel.delete(0, END)
                e_valor_imovel.delete(0, END)
                e_pagamento_imovel.delete(0, END)
                e_diponivel_imovel.delete(0, END)
                e_proprietario_imovel.delete(0, END)
                e_status_imovel.delete(0, END)
                e_transacao_imovel.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_identificar_imovel.insert(0, tree_lista[1])
                e_tipo_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_descricao_imovel.insert(0, tree_lista[4])
                e_area_imovel.insert(0, tree_lista[5])
                e_quartos_imovel.insert(0, tree_lista[6])
                c_salas_imovel.insert(0, tree_lista[7])
                c_cozinha_imovel.insert(0, tree_lista[8])
                e_banheiros_imovel.insert(0, tree_lista[9])
                e_adicionais_imovel.insert(0, tree_lista[10])
                c_estacionamento_imovel.insert(0, tree_lista[11])
                e_valor_imovel.insert(0, tree_lista[12])
                e_pagamento_imovel.insert(0, tree_lista[13])
                e_diponivel_imovel.insert(0, tree_lista[14])
                e_proprietario_imovel.insert(0, tree_lista[16])
                e_status_imovel.insert(0, tree_lista[17])
                e_transacao_imovel.insert(0, tree_lista[18])

                imagem = tree_lista[15]


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo_f)
            botao_on(botao_atualizar_f)
            botao_off(botao_duplicar)

        # função deletar Fornecedores
        def delete_imovel():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_imovel.focus()
                    tree_dicionario = tree_imovel.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_imovel([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_imoveis()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Criando a Função de Busca
        def buscar_imovel():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_imovel = e_nome_procurar.get().upper()

                if nome_imovel == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM imovel WHERE proprietario LIKE '%{nome_imovel}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Imovel
                        def mostrar_imovel_r():
                            app_nome = Label(frame_tabela_imoveis, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos',
                                           'Salas',
                                           'Cozinhas',
                                           'Banheiros',
                                           'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível',
                                           'Fotos',
                                           'Proprietário', 'Status', 'Histórico']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(
                                                               ("Pasta de Trabalho do Excel", "*.xlsx"),
                                                               ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente,
                                                  anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=1125, y=110)

                            global tree_imovel

                            tree_imovel = ttk.Treeview(frame_tabela_imoveis, selectmode="extended", columns=list_header,
                                                       show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_imoveis, orient="vertical", command=tree_imovel.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_imoveis, orient="horizontal", command=tree_imovel.xview)

                            tree_imovel.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_imovel.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_imoveis.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                                    "nw", "nw"]
                            h = [30, 60, 60, 150, 80, 60, 60, 40, 60, 60, 80, 40, 60, 80, 80, 60, 140, 60, 80]
                            n = 0

                            for col in list_header:
                                tree_imovel.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_imovel.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_imovel.insert('', 'end', values=item)

                        mostrar_imovel_r()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=944, y=75)
        e_nome_procurar = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_nome_procurar.place(x=947, y=110)

        botao_procurar = Button(frame_detalhes, command=buscar_imovel, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=1057, y=110)

        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_identificar_imovel.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_area_imovel.get()  # Cidade do Pagador
            estado = c_cozinha_imovel.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1,
                                             fg=co0)
                        br_executar.place(x=1290, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=1290, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=1290, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=944, y=40)
            e_texto = Entry(frame_detalhes, width=35, justify='left', relief='solid')
            e_texto.place(x=1064, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=1290, y=40)

        # Criando função para criar um contrato*********************************************************************
        def relatorio_contrato():
            if e_proprietario_imovel.get() == "":
                messagebox.showerror('Erro', 'Selecione um item da tabela')
            else:
                etiqueta = e_proprietario_imovel.get()
                try:
                    # Conectando ao banco de dados
                    conn = sqlite3.connect('bdsystem.db')
                    cursor = conn.cursor()

                    # Realizando a busca
                    consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                    cursor.execute(consulta, (etiqueta,))

                    # Recuperando os resultados
                    resultados = cursor.fetchall()

                    # Fechando a conexão com o banco de dados
                    conn.close()

                    lista = []
                    for resultado in resultados:
                        lista.append(resultado)
                    # Fechando a conexão com o banco de dados
                    conn.close()

                    #Criando as Variáveis:
                    im001 = lista[0][1]
                    im002 = lista[0][1]
                    im003 = lista[0][1]
                    im004 = lista[0][1]
                    im005 = lista[0][1]
                    im006 = lista[0][1]
                    im007 = lista[0][1]
                    im008 = lista[0][1]
                    im009 = lista[0][1]
                    im010 = lista[0][1]
                    im011 = lista[0][1]
                    im012 = lista[0][1]
                    im013 = lista[0][1]
                    im014 = lista[0][1]
                    im015 = lista[0][1]
                    im016 = lista[0][1]
                    im017 = lista[0][1]
                    im018 = lista[0][1]
                    im019 = lista[0][1]
                    im020 = lista[0][1]
                    im021 = lista[0][1]
                    im022 = lista[0][1]
                    im023 = lista[0][1]
                    im024 = lista[0][1]
                    im025 = lista[0][1]
                    im026 = lista[0][1]
                    im027 = lista[0][1]
                    im028 = lista[0][1]
                    im029 = lista[0][1]
                    im030 = lista[0][1]
                    im031 = lista[0][1]
                    im032 = lista[0][1]
                    im033 = lista[0][1]
                    im034 = lista[0][1]
                    im035 = lista[0][1]
                    im036 = lista[0][1]
                    im037 = lista[0][1]
                    im038 = lista[0][1]
                    im039 = lista[0][1]
                    im040 = lista[0][1]
                    im041 = lista[0][1]
                    im042 = lista[0][1]
                    im043 = lista[0][1]
                    im044 = lista[0][1]
                    im045 = lista[0][1]
                    im046 = lista[0][1]
                    im047 = lista[0][1]
                    im048 = lista[0][1]
                    im049 = lista[0][1]
                    im050 = lista[0][1]
                    im051 = lista[0][1]
                    im052 = lista[0][1]
                    im053 = lista[0][1]
                    im054 = lista[0][1]
                    im055 = lista[0][1]

                    nome = lista[0][1]
                    nacionalidade = lista[0][5]
                    e_civil = lista[0][11]
                    identidade = lista[0][9]
                    cpf = lista[0][8]
                    endereco = lista[0][3]
                    cep = lista[0][6]

                    def abrir_arquivo():
                        caminho = 'arquivos/Contrato.docx'
                        subprocess.call(["start", "", caminho], shell=True)

                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Registro não encontrado')
                            break
                        else:
                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Contrato.docx')
                            for paragraph in doc.paragraphs:
                                if 'ca-001' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-001', nome)
                                if 'ca-002' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-002', nacionalidade)
                                if 'ca-003' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-003', e_civil)
                                if 'ca-004' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-004', identidade)
                                if 'ca-005' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-005', cpf)
                                if 'ca-006' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-006', endereco)
                                if 'ca-007' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('ca-007', cep)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Contrato.docx')

                            abrir_arquivo()



                except IndexError:
                    messagebox.showerror('Erro', 'Selecione um registro ')

        # Função para importar novos clientes
        def importar_imoveis():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM imovel"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_imovel.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    etiqueta = row['Etiqueta']
                    tipo = row['Tipo']
                    endereco = row['Endereço']
                    descricao = row['Descrição']
                    area = row['Área Total']
                    quarto = row['Quartos']
                    sala = row['Salas']
                    cozinha = row['Cozinhas']
                    banheiro = row['Banheiros']
                    adicional = row['Adicionais']
                    estacionamento = row['Estacionamento']
                    valor = row['Valor']
                    tipo_pgto = row['Tipo Pagamento']
                    disponivel = row['Disponível']
                    imagem = row['Fotos']
                    proprietario = row['Proprietário']
                    status = row['Status']
                    historico = row['Histórico']

                    tabela = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional, estacionamento, valor,
                            tipo_pgto, disponivel, imagem, proprietario, status, historico]

                    # Inserindo os dados no banco de dados
                    criar_imovel(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_imoveis()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de clientes
        def exportar_imoveis():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM imovel"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos', 'Salas',
                           'Cozinhas',
                           'Banheiros',
                           'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível', 'Fotos',
                           'Proprietário', 'Status', 'Histórico']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_imovel.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        #Botão para emitir um recibo************************************************************************************
        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=944, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=1064, y=10)

        #Botão para emitir um contrato**********************************************************************************
        l_recibo = Label(frame_detalhes, text="Imprimir Contrato: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=944, y=160)
        global app_img_contrato
        app_img_contrato = Image.open('icone/editar60.png')
        app_img_contrato = app_img_contrato.resize((15, 15))
        app_img_contrato = ImageTk.PhotoImage(app_img_contrato)
        app_recibo = Button(frame_detalhes, command=relatorio_contrato, image=app_img_contrato,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=1064, y=160)

        # Criando Itens da Tela de Fornecedores*********************************************************************************************************************************************
        l_identificar_imovel = Label(frame_detalhes, text="*Identificação:", height=1, anchor=NW, font=('Ivy 10'),
                                     bg=co1,
                                     fg=co4)
        l_identificar_imovel.place(x=4, y=10)
        e_identificar_imovel = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_identificar_imovel.place(x=97, y=10)

        l_tipo_imovel = Label(frame_detalhes, text="Tipo:", height=1, anchor=NW, font=('Ivy 9'),
                              bg=co1,
                              fg=co4)
        l_tipo_imovel.place(x=200, y=10)
        e_tipo_imovel = ttk.Combobox(frame_detalhes, width=19, font=('Ivy 8 bold'))
        e_tipo_imovel['values'] = ('CASA', 'APARTAMENTO', 'IMÓVEL COMERCIAL', 'TERRENO', 'RURAL')
        e_tipo_imovel.place(x=237, y=10)

        l_endereco_imovel = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 9'), bg=co1,
                                  fg=co4)
        l_endereco_imovel.place(x=4, y=40)
        e_endereco_imovel = Entry(frame_detalhes, width=40, justify='left', relief='solid')
        e_endereco_imovel.place(x=97, y=40)

        l_area_imovel = Label(frame_detalhes, text="Área Total:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_area_imovel.place(x=377, y=10)
        e_area_imovel = Entry(frame_detalhes, width=22, justify='left', relief='solid')
        e_area_imovel.place(x=447, y=10)

        l_descricao_imovel = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 9'), bg=co1, fg=co4)
        l_descricao_imovel.place(x=347, y=40)
        e_descricao_imovel = Entry(frame_detalhes, validate='key', width=26, justify='left',
                                   relief='solid')
        e_descricao_imovel.place(x=423, y=40)

        l_quartos_imovel = Label(frame_detalhes, text="Quartos:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_quartos_imovel.place(x=4, y=70)
        e_quartos_imovel = Entry(frame_detalhes, validate='key', width=15, justify='left',
                                 relief='solid')
        e_quartos_imovel.place(x=97, y=70)

        l_salas_imovel = Label(frame_detalhes, text="Salas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_salas_imovel.place(x=210, y=70)
        c_salas_imovel = Entry(frame_detalhes, validate='key', width=18, justify='left',
                               relief='solid')
        c_salas_imovel.place(x=258, y=70)

        l_cozinha_imovel = Label(frame_detalhes, text="Cozinhas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_cozinha_imovel.place(x=377, y=100)
        c_cozinha_imovel = Entry(frame_detalhes, validate='key', width=22, justify='left',
                                 relief='solid')
        c_cozinha_imovel.place(x=447, y=100)

        l_banheiros_imovel = Label(frame_detalhes, text="Banheiros:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_banheiros_imovel.place(x=377, y=70)
        e_banheiros_imovel = Entry(frame_detalhes, width=22, justify='left', relief='solid')
        e_banheiros_imovel.place(x=447, y=70)

        l_adicionais_imovel = Label(frame_detalhes, text="Adicionais:", height=1, anchor=NW, font=('Ivy 10'),
                                    bg=co1,
                                    fg=co4)
        l_adicionais_imovel.place(x=4, y=100)
        e_adicionais_imovel = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_adicionais_imovel.place(x=97, y=100)

        l_estacionamento_imovel = Label(frame_detalhes, text="Estacionamento:", height=1, anchor=NW,
                                        font=('Ivy 10'),
                                        bg=co1,
                                        fg=co4)
        l_estacionamento_imovel.place(x=215, y=100)
        c_estacionamento_imovel = ttk.Combobox(frame_detalhes, width=6, font=('Ivy 8 bold'))
        c_estacionamento_imovel['values'] = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
        c_estacionamento_imovel.place(x=318, y=100)


        l_pagamento_imovel = Label(frame_detalhes, text="T. Pagamento:", height=1, anchor=NW, font=('Ivy 10'),
                                   bg=co1,
                                   fg=co4)
        l_pagamento_imovel.place(x=4, y=130)
        e_pagamento_imovel = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_pagamento_imovel.place(x=97, y=130)

        l_disponivel_imovel = Label(frame_detalhes, text="Disponível:", height=1, anchor=NW, font=('Ivy 10'),
                                    bg=co1,
                                    fg=co4)
        l_disponivel_imovel.place(x=212, y=130)
        e_diponivel_imovel = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2,
                                       year=ano_atual,
                                       locale="pt_br")
        e_diponivel_imovel.place(x=282, y=130)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_proprietario_imovel = Label(frame_detalhes, text="Proprietário:", height=1, anchor=NW, font=('Ivy 10'),
                                      bg=co1,
                                      fg=co4)
        l_proprietario_imovel.place(x=377, y=130)
        e_proprietario_imovel = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 8 bold'))
        e_proprietario_imovel['values'] = (fornecedor)
        e_proprietario_imovel.place(x=457, y=130)

        l_status_imovel = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_status_imovel.place(x=4, y=160)
        e_status_imovel = ttk.Combobox(frame_detalhes, width=10, font=('Ivy 8 bold'))
        e_status_imovel['values'] = ('ATIVO', 'INATIVO')
        e_status_imovel.place(x=97, y=160)

        l_valor_imovel = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'),
                               bg=co1,
                               fg=co4)
        l_valor_imovel.place(x=212, y=160)
        e_valor_imovel = Entry(frame_detalhes, validate='key', width=15,
                               justify='left',
                               relief='solid')
        e_valor_imovel.place(x=252, y=160)

        transacoes = ver_transacao()
        transacao = []
        for i in transacoes:
            transacao.append(i[0])
        l_transacao_imovel = Label(frame_detalhes, text="Histórico:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_transacao_imovel.place(x=359, y=160)
        e_transacao_imovel = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_transacao_imovel['values'] = (transacao)
        e_transacao_imovel.place(x=424, y=160)

        # Botões de controle de fornecedor*****************************************************************************************************************************
        global busca_im, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_f["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_im = Image.open('icone/novo.png')
        busca_im = busca_im.resize((20, 20))
        busca_im = ImageTk.PhotoImage(busca_im)
        botao_novo_f = Button(frame_detalhes, command=novo_imovel, image=busca_im, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_f.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_f["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_f = Button(frame_detalhes, command=update_imovel, image=img_editar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_f.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=253)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_imovel, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_imovel, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=248)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_imovel, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_imoveis, image=img_importar, text='',
                                width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_imoveis, image=img_exportar, text='',
                                width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_f.bind("<Enter>", button_houver)
        botao_novo_f.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_f.bind("<Enter>", button_houver_editar)
        botao_atualizar_f.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Tabela Fornecedores--------------------------------------------------------------------------------------------------
        def mostrar_imoveis():
            app_nome = Label(frame_tabela_imoveis, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos', 'Salas',
                           'Cozinhas',
                           'Banheiros',
                           'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível', 'Fotos',
                           'Proprietário', 'Status', 'Histórico']

            df_list = ver_imovel()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_imovel

            tree_imovel = ttk.Treeview(frame_tabela_imoveis, selectmode="extended", columns=list_header,
                                       show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_imoveis, orient="vertical", command=tree_imovel.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_imoveis, orient="horizontal", command=tree_imovel.xview)

            tree_imovel.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_imovel.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_imoveis.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                  "nw", "nw"]
            h = [30, 60, 60, 150, 80, 60, 60, 40, 60, 60, 80, 40, 60, 80, 80, 60, 140, 60, 80]
            n = 0

            for col in list_header:
                tree_imovel.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_imovel.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_imovel.insert('', 'end', values=item)

        mostrar_imoveis()

    # Função da tela de Transações com Imóveis----------------------------------------------------------------------
    def transacoes():
        # Função nova transação
        def nova_transacao():
            id_imovel = e_id_imovel.get()
            imovel = e_imovel.get()
            endereco_imovel = e_endereco_imovel.get()
            id_proprietario = e_id_proprietario.get()
            proprietario = e_proprietario.get()
            conjuge_proprietario = e_conjuge_proprietario.get()
            data_inicio = d_data_inicio.get()
            data_fim = d_data_fim.get()
            valor_transacao = e_valor_transacao.get()
            tempo = e_tempo.get()
            avalista1 = e_avalista1.get()
            avalista2 = e_avalista2.get()
            seguro = e_seguro.get()
            cliente = e_cliente.get()
            conjuge_cliente = e_conjuge_cliente.get()
            parcelas = e_parcelas.get()
            valor_parcela = e_valor_parcela.get()
            extenso_parcela = e_extenso_parcela.get()
            data_parcela = d_data_parcela.get()
            valor_sinal = e_valor_sinal.get()
            extenso_sinal = e_extenso_sinal.get()
            data_sinal = d_data_sinal.get()
            valor_restante = e_valor_restante.get()
            extenso_restante = e_extenso_restante.get()
            data_restante = d_data_restante.get()
            status = e_status.get()



            lista = [id_imovel, imovel, endereco_imovel, id_proprietario, proprietario, conjuge_proprietario, data_inicio, data_fim, valor_transacao, tempo, avalista1, avalista2, seguro,
                     cliente, conjuge_cliente, parcelas, valor_parcela, extenso_parcela, data_parcela, valor_sinal, extenso_sinal, data_sinal, valor_restante, extenso_restante, data_restante, status]

            # Verificando caso algum campo esteja vazio ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return

            # Inserindo os dados no banco de dados
            criar_transacao(lista)

            # Mostrando a mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso')

            # limpando os campos de entrada
            e_id_imovel.delete(0, END)
            e_imovel.delete(0, END)
            e_endereco_imovel.delete(0, END)
            e_id_proprietario.delete(0, END)
            e_proprietario.delete(0, END)
            e_conjuge_proprietario.delete(0, END)
            d_data_inicio.delete(0, END)
            d_data_fim.delete(0, END)
            e_valor_transacao.delete(0, END)
            e_tempo.delete(0, END)
            e_avalista1.delete(0, END)
            e_avalista2.delete(0, END)
            e_seguro.delete(0, END)
            e_cliente.delete(0, END)
            e_conjuge_cliente.delete(0, END)
            e_parcelas.delete(0, END)
            e_valor_parcela.delete(0, END)
            e_extenso_parcela.delete(0, END)
            d_data_parcela.delete(0, END)
            e_valor_sinal.delete(0, END)
            e_extenso_sinal.delete(0, END)
            d_data_sinal.delete(0, END)
            e_valor_restante.delete(0, END)
            e_extenso_restante.delete(0, END)
            d_data_restante.delete(0, END)
            e_status.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_transacao()

        # Função atualizar transação
        def update_transacao():
            try:
                botao_off(botao_novo_cx)
                botao_off(botao_atualizar_cx)
                tree_itens = tree_transacao.focus()
                tree_dicionario = tree_transacao.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_id_imovel.delete(0, END)
                e_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_id_proprietario.delete(0, END)
                e_proprietario.delete(0, END)
                e_conjuge_proprietario.delete(0, END)
                d_data_inicio.delete(0, END)
                d_data_fim.delete(0, END)
                e_valor_transacao.delete(0, END)
                e_tempo.delete(0, END)
                e_avalista1.delete(0, END)
                e_avalista2.delete(0, END)
                e_seguro.delete(0, END)
                e_cliente.delete(0, END)
                e_conjuge_cliente.delete(0, END)
                e_parcelas.delete(0, END)
                e_valor_parcela.delete(0, END)
                e_extenso_parcela.delete(0, END)
                d_data_parcela.delete(0, END)
                e_valor_sinal.delete(0, END)
                e_extenso_sinal.delete(0, END)
                d_data_sinal.delete(0, END)
                e_valor_restante.delete(0, END)
                e_extenso_restante.delete(0, END)
                d_data_restante.delete(0, END)
                e_status.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_id_imovel.insert(0, tree_lista[1])
                e_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_id_proprietario.insert(0, tree_lista[4])
                e_proprietario.insert(0, tree_lista[5])
                e_conjuge_proprietario.insert(0, tree_lista[6])
                d_data_inicio.insert(0, tree_lista[7])
                d_data_fim.insert(0, tree_lista[8])
                e_valor_transacao.insert(0, tree_lista[9])
                e_tempo.insert(0, tree_lista[10])
                e_avalista1.insert(0, tree_lista[11])
                e_avalista2.insert(0, tree_lista[12])
                e_seguro.insert(0, tree_lista[13])
                e_cliente.insert(0, tree_lista[14])
                e_conjuge_cliente.insert(0, tree_lista[15])
                e_parcelas.insert(0, tree_lista[16])
                e_valor_parcela.insert(0, tree_lista[17])
                e_extenso_parcela.insert(0, tree_lista[18])
                d_data_parcela.insert(0, tree_lista[19])
                e_valor_sinal.insert(0, tree_lista[20])
                e_extenso_sinal.insert(0, tree_lista[21])
                d_data_sinal.insert(0, tree_lista[22])
                e_valor_restante.insert(0, tree_lista[23])
                e_extenso_restante.insert(0, tree_lista[24])
                d_data_restante.insert(0, tree_lista[25])
                e_status.insert(0, tree_lista[26])

                def update():
                    id_imovel = e_id_imovel.get()
                    imovel = e_imovel.get()
                    endereco_imovel = e_endereco_imovel.get()
                    id_proprietario = e_id_proprietario.get()
                    proprietario = e_proprietario.get()
                    conjuge_proprietario = e_conjuge_proprietario.get()
                    data_inicio = d_data_inicio.get()
                    data_fim = d_data_fim.get()
                    valor_transacao = e_valor_transacao.get()
                    tempo = e_tempo.get()
                    avalista1 = e_avalista1.get()
                    avalista2 = e_avalista2.get()
                    seguro = e_seguro.get()
                    cliente = e_cliente.get()
                    conjuge_cliente = e_conjuge_cliente.get()
                    parcelas = e_parcelas.get()
                    valor_parcela = e_valor_parcela.get()
                    extenso_parcela = e_extenso_parcela.get()
                    data_parcela = d_data_parcela.get()
                    valor_sinal = e_valor_sinal.get()
                    extenso_sinal = e_extenso_sinal.get()
                    data_sinal = d_data_sinal.get()
                    valor_restante = e_valor_restante.get()
                    extenso_restante = e_extenso_restante.get()
                    data_restante = d_data_restante.get()
                    status = e_status.get()

                    lista = [id_imovel, imovel, endereco_imovel, id_proprietario, proprietario, conjuge_proprietario, data_inicio, data_fim, valor_transacao, tempo, avalista1, avalista2, seguro,
                            cliente, conjuge_cliente, parcelas, valor_parcela, extenso_parcela, data_parcela, valor_sinal, extenso_sinal, data_sinal, valor_restante, extenso_restante, data_restante, status,
                            valor_id]

                    # Verificando caso algum campo esteja vazio ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return

                    # Atualizando os dados no banco de dados
                    atualizar_transacao(lista)

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram atualizados com sucesso')

                    # limpando os campos de entrada
                    e_id_imovel.delete(0, END)
                    e_imovel.delete(0, END)
                    e_endereco_imovel.delete(0, END)
                    e_id_proprietario.delete(0, END)
                    e_proprietario.delete(0, END)
                    e_conjuge_proprietario.delete(0, END)
                    d_data_inicio.delete(0, END)
                    d_data_fim.delete(0, END)
                    e_valor_transacao.delete(0, END)
                    e_tempo.delete(0, END)
                    e_avalista1.delete(0, END)
                    e_avalista2.delete(0, END)
                    e_seguro.delete(0, END)
                    e_cliente.delete(0, END)
                    e_conjuge_cliente.delete(0, END)
                    e_parcelas.delete(0, END)
                    e_valor_parcela.delete(0, END)
                    e_extenso_parcela.delete(0, END)
                    d_data_parcela.delete(0, END)
                    e_valor_sinal.delete(0, END)
                    e_extenso_sinal.delete(0, END)
                    d_data_sinal.delete(0, END)
                    e_valor_restante.delete(0, END)
                    e_extenso_restante.delete(0, END)
                    d_data_restante.delete(0, END)
                    e_status.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_transacao()
                    # Destruindo o botão após salvar
                    botao_salvar.destroy()
                    botao_on(botao_novo_cx)
                    botao_on(botao_atualizar_cx)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função atualizar transação
        def visualizar_transacao():
            botao_off(botao_novo_cx)
            botao_off(botao_atualizar_cx)
            botao_on(botao_duplicar)
            try:
                tree_itens = tree_transacao.focus()
                tree_dicionario = tree_transacao.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_id_imovel.delete(0, END)
                e_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_id_proprietario.delete(0, END)
                e_proprietario.delete(0, END)
                e_conjuge_proprietario.delete(0, END)
                d_data_inicio.delete(0, END)
                d_data_fim.delete(0, END)
                e_valor_transacao.delete(0, END)
                e_tempo.delete(0, END)
                e_avalista1.delete(0, END)
                e_avalista2.delete(0, END)
                e_seguro.delete(0, END)
                e_cliente.delete(0, END)
                e_conjuge_cliente.delete(0, END)
                e_parcelas.delete(0, END)
                e_valor_parcela.delete(0, END)
                e_extenso_parcela.delete(0, END)
                d_data_parcela.delete(0, END)
                e_valor_sinal.delete(0, END)
                e_extenso_sinal.delete(0, END)
                d_data_sinal.delete(0, END)
                e_valor_restante.delete(0, END)
                e_extenso_restante.delete(0, END)
                d_data_restante.delete(0, END)
                e_status.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_id_imovel.insert(0, tree_lista[1])
                e_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_id_proprietario.insert(0, tree_lista[4])
                e_proprietario.insert(0, tree_lista[5])
                e_conjuge_proprietario.insert(0, tree_lista[6])
                d_data_inicio.insert(0, tree_lista[7])
                d_data_fim.insert(0, tree_lista[8])
                e_valor_transacao.insert(0, tree_lista[9])
                e_tempo.insert(0, tree_lista[10])
                e_avalista1.insert(0, tree_lista[11])
                e_avalista2.insert(0, tree_lista[12])
                e_seguro.insert(0, tree_lista[13])
                e_cliente.insert(0, tree_lista[14])
                e_conjuge_cliente.insert(0, tree_lista[15])
                e_parcelas.insert(0, tree_lista[16])
                e_valor_parcela.insert(0, tree_lista[17])
                e_extenso_parcela.insert(0, tree_lista[18])
                d_data_parcela.insert(0, tree_lista[19])
                e_valor_sinal.insert(0, tree_lista[20])
                e_extenso_sinal.insert(0, tree_lista[21])
                d_data_sinal.insert(0, tree_lista[22])
                e_valor_restante.insert(0, tree_lista[23])
                e_extenso_restante.insert(0, tree_lista[24])
                d_data_restante.insert(0, tree_lista[25])
                e_status.insert(0, tree_lista[26])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar transação
        def limpar_transacao():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função caixa
            transacoes()

        # Função deletar transação
        def delete_transacao():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_transacao.focus()
                    tree_dicionario = tree_transacao.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # Deletar os dados no bando de dados
                    deletar_transacao([valor_id])

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # Mostrando os valores na tabela
                    mostrar_transacao()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um item da tabela')

        # Criando a Função de Busca
        def buscar_transacao():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM transacoes WHERE imovel LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela transações
                        def mostrar_transacao():
                            app_nome = Label(frame_tabela, text="", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'id_imovel', 'Imóvel', 'Endereco_imovel', 'id_proprietario', 'Proprietário',
                                           'Conjuge_proprietário', 'Data_inicio', 'Data_fim', 'Valor_transacao',
                                           'Tempo', 'Avalista1', 'Avalista2', 'Seguro',
                                           'Cliente', 'Conjuge_cliente', 'Parcelas', 'Valor_parcela', 'Extenso_parcela',
                                           'Data_parcela', 'Valor_sinal', 'Extenso_sinal', 'Data_sinal',
                                           'Valor_restante', 'Extenso_restante', 'Data_restante', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=20,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=825, y=35)

                            global tree_transacao

                            tree_transacao = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                          show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_transacao.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_transacao.xview)

                            tree_transacao.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_transacao.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                                  "nw", "nw",
                                  "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40, 40, 40, 40, 40, 40]
                            n = 0

                            for col in list_header:
                                tree_transacao.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_transacao.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_transacao.insert('', 'end', values=item)

                        mostrar_transacao()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório para duplicar transação
        def copiar_registro():
            botao_on(botao_novo_cx)
            botao_on(botao_atualizar_cx)
            botao_off(botao_duplicar)

        def exportar_transacao():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM transacoes"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['id', 'id_imóvel', 'Imóvel', 'Endereço_imóvel', 'id_proprietário', 'Proprietário', 'Conjuge_proprietário', 'Data_início', 'Data_fim', 'Valor_transação', 'Tempo', 'Avalista1', 'Avalista2', 'Seguro',
                            'Cliente', 'Conjuge_cliente', 'Parcelas', 'Valor_parcela', 'Extenso_parcela', 'Data_parcela', 'Valor_sinal', 'Extenso_sinal', 'Data_sinal', 'Valor_restante', 'Extenso_restante', 'Data_restante',
                            'Status']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_transacoes.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        def importar_transacao():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM transacoes"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_transacoes.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['id']
                    id_imovel = row['id_imóvel']
                    imovel = row['Imóvel']
                    endereco_imovel = row['Endereço_imóvel']
                    id_proprietario = row['id_proprietário']
                    proprietario = row['Proprietário']
                    conjuge_proprietario = row['Conjuge_proprietário']
                    data_inicio = row['Data_início']
                    data_fim = row['Data_fim']
                    valor_transacao = row['Valor_transação']
                    tempo = row['Tempo']
                    avalista1 = row['Avalista1']
                    avalista2 = row['Avalista2']
                    seguro = row['Seguro']
                    cliente = row['Cliente']
                    conjuge_cliente = row['Conjuge_cliente']
                    parcelas = row['Parcelas']
                    valor_parcela = row['Valor_parcela']
                    extenso_parcela = row['Extenso_parcela']
                    data_parcela = row['Data_parcela']
                    valor_sinal = row['Valor_sinal']
                    extenso_sinal = row['Extenso_sinal']
                    data_sinal = row['Data_sinal']
                    valor_restante = row['Valor_restante']
                    extenso_restante = row['Extenso_restante']
                    data_restante = row['Data_restante']
                    status = row['Status']

                    tabela = [id_imovel, imovel, endereco_imovel, id_proprietario, proprietario, conjuge_proprietario, data_inicio, data_fim, valor_transacao, tempo, avalista1, avalista2, seguro,
                            cliente, conjuge_cliente, parcelas, valor_parcela, extenso_parcela, data_parcela, valor_sinal, extenso_sinal, data_sinal, valor_restante, extenso_restante, data_restante, status]

                    # Inserindo os dados no banco de dados
                    criar_transacao(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_transacao()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        #Criando os campos para inserir dados***************************************************************************
        l_id_imovel = Label(frame_detalhes, text="ID/Imóvel:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_id_imovel.place(x=4, y=10)
        e_id_imovel = Entry(frame_detalhes, width=10, justify='left', relief='solid')
        e_id_imovel.place(x=77, y=10)

        imoveis_l = ver_imovel()
        local = []
        for i in imoveis_l:
            local.append(i[1])
        l_imovel = Label(frame_detalhes, text="Imóvel:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                        fg=co4)
        l_imovel.place(x=147, y=10)
        e_imovel = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_imovel['values'] = (local)
        e_imovel.place(x=202, y=10)

        l_endereco_imovel = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_endereco_imovel.place(x=379, y=10)
        e_endereco_imovel = Entry(frame_detalhes, width=57, justify='left', relief='solid')
        e_endereco_imovel.place(x=454, y=10)

        #****
        l_id_proprietario = Label(frame_detalhes, text="ID/Proprietário:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
        l_id_proprietario.place(x=4, y=40)
        e_id_proprietario = Entry(frame_detalhes, width=10, justify='left', relief='solid')
        e_id_proprietario.place(x=97, y=40)

        fornecedores_l = ver_fornecedor()
        local = []
        for i in fornecedores_l:
            local.append(i[1])
        l_proprietario = Label(frame_detalhes, text="Proprietário:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_proprietario.place(x=167, y=40)
        e_proprietario = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_proprietario['values'] = (local)
        e_proprietario.place(x=242, y=40)

        conjuge_l = ver_clientes()
        local = []
        for i in conjuge_l:
            local.append(i[1])
        l_conjuge_proprietario = Label(frame_detalhes, text="Conjuge/Proprietário:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_conjuge_proprietario.place(x=389, y=40)
        e_conjuge_proprietario = ttk.Combobox(frame_detalhes, width=43, font=('Ivy 8 bold'))
        e_conjuge_proprietario['values'] = (local)
        e_conjuge_proprietario.place(x=522, y=40)

        #***
        l_data_inicio = Label(frame_detalhes, text="Data Início:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_inicio.place(x=4, y=70)
        d_data_inicio = DateEntry(frame_detalhes, width=15, background='darkblue', borderwidth=2, year=ano_atual,
                               locale="pt_br")
        d_data_inicio.place(x=87, y=70)

        # ***
        l_data_fim = Label(frame_detalhes, text="Data Final:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_fim.place(x=217, y=70)
        d_data_fim = DateEntry(frame_detalhes, width=15, background='darkblue', borderwidth=2, year=ano_atual,
                                  locale="pt_br")
        d_data_fim.place(x=292, y=70)

        #***
        l_valor = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor.place(x=420, y=70)
        e_valor_transacao = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_valor_transacao.place(x=462, y=70)

        #***
        l_tempo = Label(frame_detalhes, text="Prazo:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_tempo.place(x=612, y=70)
        e_tempo = Entry(frame_detalhes, width=22, justify='left', relief='solid')
        e_tempo.place(x=664, y=70)

        #***
        avalistas1_l = ver_clientes()
        local = []
        for i in avalistas1_l:
            local.append(i[1])
        l_avalista1 = Label(frame_detalhes, text="Avalista 1:", height=1, anchor=NW,
                                       font=('Ivy 10'), bg=co1,
                                       fg=co4)
        l_avalista1.place(x=4, y=100)
        e_avalista1 = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_avalista1['values'] = (local)
        e_avalista1.place(x=77, y=100)

        # ***
        avalistas2_l = ver_clientes()
        local = []
        for i in avalistas2_l:
            local.append(i[1])
        l_avalista2 = Label(frame_detalhes, text="Avalista 2:", height=1, anchor=NW,
                            font=('Ivy 10'), bg=co1,
                            fg=co4)
        l_avalista2.place(x=252, y=100)
        e_avalista2 = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_avalista2['values'] = (local)
        e_avalista2.place(x=332, y=100)

        # ***
        l_seguro = Label(frame_detalhes, text="Seguro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_seguro.place(x=520, y=100)
        e_seguro = Entry(frame_detalhes, width=32, justify='left', relief='solid')
        e_seguro.place(x=605, y=100)

        #***
        clientes_l = ver_clientes()
        local = []
        for i in clientes_l:
            local.append(i[1])
        l_cliente= Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_cliente.place(x=4, y=130)
        e_cliente = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cliente['values'] = (local)
        e_cliente.place(x=77, y=130)

        conjuges_l = ver_clientes()
        local = []
        for i in conjuges_l:
            local.append(i[1])
        l_conjuge_cliente = Label(frame_detalhes, text="Conjuge/Cliente:", height=1, anchor=NW,
                                       font=('Ivy 10'), bg=co1,
                                       fg=co4)
        l_conjuge_cliente.place(x=255, y=130)
        e_conjuge_cliente= ttk.Combobox(frame_detalhes, width=30, font=('Ivy 8 bold'))
        e_conjuge_cliente['values'] = (local)
        e_conjuge_cliente.place(x=382, y=130)

        #***
        l_parcelas = Label(frame_detalhes, text="Parcelas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_parcelas.place(x=600, y=130)
        e_parcelas = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_parcelas.place(x=678, y=130)

        l_valor_parcela = Label(frame_detalhes, text="Valor/Parcela:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_parcela.place(x=4, y=160)
        e_valor_parcela= Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_valor_parcela.place(x=96, y=160)

        l_valor_extenso = Label(frame_detalhes, text="Valor/Extenso:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_extenso.place(x=200, y=160)
        e_extenso_parcela = Entry(frame_detalhes, width=47, justify='left', relief='solid')
        e_extenso_parcela.place(x=300, y=160)

        l_data_parcela = Label(frame_detalhes, text="Data/Parcela:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_parcela.place(x=602, y=160)
        d_data_parcela = DateEntry(frame_detalhes, width=15, background='darkblue', borderwidth=2, year=ano_atual,
                               locale="pt_br")
        d_data_parcela.place(x=692, y=160)

        #***
        l_valor_sinal = Label(frame_detalhes, text="Valor/Sinal:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_valor_sinal.place(x=4, y=190)
        e_valor_sinal = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_valor_sinal.place(x=96, y=190)

        l_sinal_extenso = Label(frame_detalhes, text="Sinal/Extenso:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_sinal_extenso.place(x=200, y=190)
        e_extenso_sinal = Entry(frame_detalhes, width=27, justify='left', relief='solid')
        e_extenso_sinal.place(x=300, y=190)

        l_data_sinal = Label(frame_detalhes, text="Data/Sinal:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_data_sinal.place(x=470, y=190)
        d_data_sinal = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                   locale="pt_br")
        d_data_sinal.place(x=540, y=190)

        l_status = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=622, y=190)
        e_status = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_status.place(x=690, y=190)

        # ***
        l_valor_restante = Label(frame_detalhes, text="Valor/Restante:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_valor_restante.place(x=4, y=220)
        e_valor_restante = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_valor_restante.place(x=106, y=220)

        l_restante_extenso = Label(frame_detalhes, text="Restante/Extenso:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_restante_extenso.place(x=212, y=220)
        e_extenso_restante = Entry(frame_detalhes, width=42, justify='left', relief='solid')
        e_extenso_restante.place(x=332, y=220)

        l_data_restante = Label(frame_detalhes, text="Data/Restante:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                             fg=co4)
        l_data_restante.place(x=612, y=220)
        d_data_restante = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                 locale="pt_br")
        d_data_restante.place(x=710, y=220)


        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=827, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=830, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_transacao, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=957, y=35)

        # Botões-----------------------------------------------------------------------------------------------
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_cx["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_cx = Button(frame_detalhes, command=nova_transacao, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_cx.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_cx["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_cx = Button(frame_detalhes, command=update_transacao, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_cx.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_transacao, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_transacao, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_transacao, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_transacao, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_transacao, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_cx.bind("<Enter>", button_houver)
        botao_novo_cx.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_cx.bind("<Enter>", button_houver_editar)
        botao_atualizar_cx.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Tabela Transações
        def mostrar_transacao():
            app_nome = Label(frame_tabela, text="", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                             font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['id_imovel', 'Imóvel', 'Endereco_imovel', 'id_proprietario', 'Proprietário', 'Conjuge_proprietário', 'Data_inicio', 'Data_fim', 'Valor_transacao', 'Tempo', 'Avalista1', 'Avalista2', 'Seguro',
                     'Cliente', 'Conjuge_cliente', 'Parcelas', 'Valor_parcela', 'Extenso_parcela', 'Data_parcela', 'Valor_sinal', 'Extenso_sinal', 'Data_sinal', 'Valor_restante', 'Extenso_restante', 'Data_restante', 'Status']

            df_list = ver_transacao()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_transacao

            tree_transacao = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_transacao.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_transacao.xview)

            tree_transacao.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_transacao.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                  "nw", "nw",
                  "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 40, 40, 40, 40]
            n = 0

            for col in list_header:
                tree_transacao.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_transacao.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_transacao.insert('', 'end', values=item)

        mostrar_transacao()

    # Função da tela de Contrato-------------------------------------------------------------------
    def contratos():
        # Criando frames para tabelas
        frame_tabela_contrato = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_contrato.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Contrato-----------------------------------------------------------
        # Trabalhando com Calculos de datas*********************************************************
        def calculos_data(valor):
            from datetime import datetime
            # Calcular diferença entre datas
            data_informada = valor

            # Converter a data informada para formato de datetime
            data_informada = datetime.strptime(data_informada, "%d/%m/%Y")

            # Obter a data atual
            data_atual = datetime.now()

            # Calcular a diferença entre as datas
            diferenca = data_atual - data_informada

            # Retorna a diferença entre data em dias
            return diferenca.days

        def ia_vencimento():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Decompondo a data atual
                data_atual = datetime.now()
                dia_atual = data_atual.day
                mes_atual = data_atual.month
                ano_atual = data_atual.year
                # **************************

                # Realizando a busca
                cursor.execute("SELECT * FROM contrato")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                lista = []
                for resultado in resultados:
                    data_vencimento = str(resultado[2]) + '/' + str(mes_atual) + '/' + str(ano_atual)
                    data_vencimento = datetime.strptime(data_vencimento, "%d/%m/%Y")
                    data_compra = resultado[9]
                    data_compra = datetime.strptime(data_compra, "%d/%m/%Y")
                    if data_compra <= data_vencimento:
                        lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e", "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100,40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # função novo Contrato
        def novo_Contrato():
            numero = e_numero_contrato.get()
            vencimento = d_vencimento.get()
            objeto = e_objeto_contrato.get()
            fornecedor = e_fornecedor_contrato.get()
            cliente = e_cliente_contrato.get()
            cep = e_cep_cliente.get()
            parcelas = e_parcelas_contrato.get()
            valor = e_valor_contrato.get()
            data_inicial = data_inicio.get()
            data_final = l_data_final.get()
            iptu = e_iptu.get()
            condominio = e_condominio.get()
            luz = e_luz.get()
            agua = e_agua.get()
            outros = e_outros.get()
            status = e_status.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM contrato WHERE numero = ?"
            cursor.execute(consulta, (numero,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial, data_final, iptu, condominio,
                     luz,
                     agua, outros, status]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if numero in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_contrato(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_numero_contrato.delete(0, END)
            d_vencimento.delete(0, END)
            e_objeto_contrato.delete(0, END)
            e_fornecedor_contrato.delete(0, END)
            e_cliente_contrato.delete(0, END)
            e_cep_cliente.delete(0, END)
            e_parcelas_contrato.delete(0, END)
            e_valor_contrato.delete(0, END)
            data_inicio.delete(0, END)
            l_data_final.delete(0, END)
            e_iptu.delete(0, END)
            e_condominio.delete(0, END)
            e_luz.delete(0, END)
            e_agua.delete(0, END)
            e_outros.delete(0, END)
            e_status.delete(0, END)


            # Mostrando os valores na tabela
            mostrar_contrato()

        # função atualizar cliente
        def update_contrato():
            try:
                botao_off(botao_novo_ct)
                botao_off(botao_atualizar_ct)
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                #limpando os campos
                e_numero_contrato.delete(0, END)
                d_vencimento.delete(0, END)
                e_objeto_contrato.delete(0, END)
                e_fornecedor_contrato.delete(0, END)
                e_cliente_contrato.delete(0, END)
                e_cep_cliente.delete(0, END)
                e_parcelas_contrato.delete(0, END)
                e_valor_contrato.delete(0, END)
                data_inicio.delete(0, END)
                l_data_final.delete(0, END)
                e_iptu.delete(0, END)
                e_condominio.delete(0, END)
                e_luz.delete(0, END)
                e_agua.delete(0, END)
                e_outros.delete(0, END)
                e_status.delete(0, END)

                # inserindo os valores nas entry
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])


                # função atualizar
                def update():
                    numero = e_numero_contrato.get()
                    vencimento = d_vencimento.get()
                    objeto = e_objeto_contrato.get()
                    fornecedor = e_fornecedor_contrato.get()
                    cliente = e_cliente_contrato.get()
                    cep = e_cep_cliente.get()
                    parcelas = e_parcelas_contrato.get()
                    valor = e_valor_contrato.get()
                    data_inicial = data_inicio.get()
                    data_final = l_data_final.get()
                    iptu = e_iptu.get()
                    condominio = e_condominio.get()
                    luz = e_luz.get()
                    agua = e_agua.get()
                    outros = e_outros.get()
                    status = e_status.get()

                    lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial, data_final, iptu,
                             condominio, luz, agua, outros, status, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_contrato(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_numero_contrato.delete(0, END)
                    d_vencimento.delete(0, END)
                    e_objeto_contrato.delete(0, END)
                    e_fornecedor_contrato.delete(0, END)
                    e_cliente_contrato.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    e_parcelas_contrato.delete(0, END)
                    e_valor_contrato.delete(0, END)
                    data_inicio.delete(0, END)
                    l_data_final.delete(0, END)
                    e_iptu.delete(0, END)
                    e_condominio.delete(0, END)
                    e_luz.delete(0, END)
                    e_agua.delete(0, END)
                    e_outros.delete(0, END)
                    e_status.delete(0, END)


                    # Mostrando os valores na tabela
                    mostrar_contrato()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_ct)
                    botao_on(botao_atualizar_ct)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função deletar Contrato
        def delete_contrato():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_contrato.focus()
                    tree_dicionario = tree_contrato.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_contrato([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função Limpar a tela
        def limpar_contrato():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            contratos()

        def visualizar_contrato():
            botao_on(botao_duplicar)
            botao_off(botao_novo_ct)
            botao_off(botao_atualizar_ct)
            try:
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_numero_contrato.delete(0, END)
                d_vencimento.delete(0, END)
                e_objeto_contrato.delete(0, END)
                e_fornecedor_contrato.delete(0, END)
                e_cliente_contrato.delete(0, END)
                e_cep_cliente.delete(0, END)
                e_parcelas_contrato.delete(0, END)
                e_valor_contrato.delete(0, END)
                data_inicio.delete(0, END)
                l_data_final.delete(0, END)
                e_iptu.delete(0, END)
                e_condominio.delete(0, END)
                e_luz.delete(0, END)
                e_agua.delete(0, END)
                e_outros.delete(0, END)
                e_status.delete(0, END)


                # Inserindo os valores nos campos de entrada
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_ct)
            botao_on(botao_atualizar_ct)
            botao_off(botao_duplicar)

        # Função para importar novos contratos

        # Função para importar o cadastro de contratos
        def importar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_contratos.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    numero = row['Número']
                    vencimento = row['Vencimento']
                    objeto = row['Objeto']
                    fornecedor = row['Fornecedor']
                    cliente = row['Cliente']
                    cep = row['CEP']
                    parcelas = row['Parcelas']
                    valor = row['Valor']
                    data_inicial = row['Dta Inicio']
                    data_final = row['Dta Final']
                    iptu = row['IPTU']
                    condominio = row['Condominio']
                    luz = row['Luz']
                    agua = row['Agua']
                    outros = row['Outros']
                    status = row['Status']

                    tabela = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial, data_final, iptu, condominio,
                     luz,agua, outros, status ]

                    # Inserindo os dados no banco de dados
                    criar_contrato(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de contratos
        def exportar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas', 'Valor',
                               'Dta Inicio',
                               'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']
                tabela_contratos = pd.DataFrame(lista)
                tabela_contratos.columns = list_header
                nome_arquivo = 'arquivos/tabela_contratos.xlsx'
                tabela_contratos.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando Itens da Tela de Contrato*********************************************************************************************************************************************
        global ano_atual

        l_numero_contrato = Label(frame_detalhes, text="Número do contrato:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_numero_contrato.place(x=4, y=10)
        e_numero_contrato = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_numero_contrato.place(x=127, y=10)

        l_vencimento = Label(frame_detalhes, text="Vencimento:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_vencimento.place(x=227, y=10)
        d_vencimento = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        d_vencimento['values'] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
        d_vencimento.place(x=307, y=10)

        l_objeto_contrato = Label(frame_detalhes, text="Objeto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_objeto_contrato.place(x=4, y=40)
        e_objeto_contrato = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_objeto_contrato['values'] = ['COMPRA', 'VENDA', 'LOCAÇÃO', 'DIVERSOS', 'SERVIÇOS']
        e_objeto_contrato.place(x=57, y=40)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_fornecedor_contrato = Label(frame_detalhes, text="Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_fornecedor_contrato.place(x=167, y=40)
        e_fornecedor_contrato = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_fornecedor_contrato['values'] = (fornecedor)
        e_fornecedor_contrato.place(x=243, y=40)

        def dados_cliente(event):
            valor_selecionado = e_cliente_contrato.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT * FROM cliente WHERE nome_cliente ='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Fechando a conexão com o banco de dados
                conn.close()

                # Exibindo os resultados
                e_cep_cliente.delete(0,END)
                e_cep_cliente.insert(0, resultado[0][6])
            except:
                return
        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_cliente_contrato = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cliente_contrato.place(x=4, y=70)
        e_cliente_contrato = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cliente_contrato['values'] = (cliente)
        e_cliente_contrato.bind("<<ComboboxSelected>>", dados_cliente)
        e_cliente_contrato.place(x=57, y=70)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=232, y=70)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=21, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=272, y=70)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        l_parcelas_contrato = Label(frame_detalhes, text="Parcelas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_parcelas_contrato.place(x=4, y=100)
        e_parcelas_contrato = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_parcelas_contrato.place(x=73, y=100)

        l_valor_contrato = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_contrato.place(x=222, y=100)
        e_valor_contrato = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_valor_contrato.place(x=272, y=100)


        # Função para preencher a data final
        def data_futura(event):
            valor_selecionado = int(e_parcelas_contrato.get())#Recebe a quantidade de parcelas em string e converte para inteiro e armazena na variavel valor_selecionado

            data_inicial = data_inicio.get() #pega a data inicial que foi selecionada

            data_inicial = data_inicial.replace("/","-") #Converte a data selecionada em formato em Português Brasil para formato US
            data_formatada = datetime.strptime(data_inicial, "%d-%m-%Y") #Converte a data em um objeto datetime

            resultado = data_formatada + relativedelta(months=valor_selecionado) #Soma a quantidade de parcelas aos meses da data incial
            resultado = datetime.strftime(resultado,"%d/%m/%Y") #Converte o resultado em uma data no formato Português Brasil

            # Exibindo os resultados
            l_data_final.delete(0,END) #Limpa o campo data_final
            l_data_final.insert(0, resultado) # Seta o valor ao campo data_final
            return

        l_data_inicio = Label(frame_detalhes, text="Data de inicio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_inicio.place(x=4, y=130)
        data_inicio = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                locale="pt_br")
        data_inicio.bind("<<DateEntrySelected>>", data_futura)
        data_inicio.place(x=98, y=130)

        l_data_final = Label(frame_detalhes, text="Data Final:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_final.place(x=220, y=130)
        l_data_final = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                 locale="pt_br")
        l_data_final.place(x=300, y=130)

        l_iptu = Label(frame_detalhes, text="IPTU:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_iptu.place(x=4, y=160)
        e_iptu = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_iptu.place(x=57, y=160)

        l_condominio = Label(frame_detalhes, text="Condominio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_condominio.place(x=187, y=160)
        e_condominio = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_condominio.place(x=272, y=160)

        l_luz = Label(frame_detalhes, text="LUZ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_luz.place(x=4, y=190)
        e_luz = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_luz.place(x=57, y=190)

        l_agua = Label(frame_detalhes, text="AGUA:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_agua.place(x=217, y=190)
        e_agua = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_agua.place(x=272, y=190)

        l_outros = Label(frame_detalhes, text="OUTROS:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_outros.place(x=4, y=220)
        e_outros = Entry(frame_detalhes, width=25, justify='left', relief='solid')
        e_outros.place(x=77, y=219)

        l_status = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=240, y=220)
        e_status = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_status['values'] = ['ABERTO', 'FECHADO']
        e_status.place(x=294, y=220)

        # Botões de controle de contrato*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_aberto

        def button_houver(e):
            botao_novo_ct["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_ct = Button(frame_detalhes, command=novo_Contrato, image=busca_nt,text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_ct.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_ct["bg"]="white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_ct["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_ct = Button(frame_detalhes, command=update_contrato, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_ct.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"]="white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_contrato, image=img_deletar, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"]="white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"]="white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_contrato, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"]="white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_contrato, image=img_localizar, text='', width=30, compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_contratos, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_contratos, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        def button_houver_aberto(e):
            botao_abertos["bg"] = "white"
            status_label.config(text="     Faturas em aberto")

        def button_houver_leave_aberto(e):
            botao_abertos["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_aberto = Image.open('icone/Receber.png')
        img_aberto = img_aberto.resize((20, 20))
        img_aberto = ImageTk.PhotoImage(img_aberto)
        botao_abertos = Button(frame_detalhes, command=ia_vencimento, image=img_aberto, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_abertos.place(x=454, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_ct.bind("<Enter>", button_houver)
        botao_novo_ct.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_ct.bind("<Enter>", button_houver_editar)
        botao_atualizar_ct.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_abertos.bind("<Enter>", button_houver_aberto)
        botao_abertos.bind("<Leave>", button_houver_leave_aberto)

        # Tabela contrato--------------------------------------------------------------------------------------------------
        def mostrar_contrato():
            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas', 'Valor', 'Dta Inicio',
                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

            df_list = ver_contratos()
            df_list = sorted(df_list,key=lambda x:x[0], reverse=True)

            global tree_contrato

            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_contrato.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [30, 80, 80,80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
            n = 0

            for col in list_header:
                tree_contrato.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_contrato.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_contrato.insert('', 'end', values=item)

        mostrar_contrato()

        # Criando seção de busca para contratos:*****************************************************************************************************
        # Criando os relatórios-----------------------------------------------------------
        def pagar(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_fornecedor()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=125)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def nome(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        buscar_relatorio()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=5)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def objeto(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE status = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_objeto()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=65)
                return

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def funcao_date(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE data_final BETWEEN '{data}' AND '{data_atual}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_data()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=185)
                return

            except:
                return

        # Criando a Função de Busca

        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=35)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_objeto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE status LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e", "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100,40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor

        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=150)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()


            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute("SELECT * FROM contrato WHERE data_final BETWEEN '{}' AND '{}';".format(data,
                                                                                                       data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número','Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas', 'Valor',
                                           'Dta Inicio', 'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros','Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=860, y=205)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e","e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100,40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except:
                return

        def funcao_nome():
            nome(i)
            buscar_relatorio()

        def funcao_data():
            funcao_date(i)
            relatorio_data()

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=494, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=494, y=35)

        botao_procurar = Button(frame_detalhes, command=funcao_nome, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=613, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW, font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=494, y=70)
        ver_contrato = ver_contratos()
        referente = []
        for i in ver_contrato:
            referente.append(i[16])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.bind("<<ComboboxSelected>>", objeto)
        e_referente_procurar.place(x=494, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_objeto, anchor=CENTER, text='Procurar'.upper(),
                                          width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=613, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=494, y=125)
        ver_contrato = ver_contratos()
        provedor = []
        for i in ver_contrato:
            provedor.append(i[4])
        e_fornecedor_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_fornecedor_procurar['values'] = (provedor)
        e_fornecedor_procurar.bind("<<ComboboxSelected>>", pagar)
        e_fornecedor_procurar.place(x=494, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=613, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=494, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=494, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=627, y=205)

        botao_procurar_data = Button(frame_detalhes, command=funcao_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=757, y=205)

    # Função da tela de Contrato Baixados-------------------------------------------------------------------
    def baixas():
        # Criando frames para tabelas
        frame_tabela_contrato = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_contrato.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Contrato-----------------------------------------------------------
        # Trabalhando com Calculos de datas*********************************************************
        def calculos_data(valor):
            from datetime import datetime
            # Calcular diferença entre datas
            data_informada = valor

            # Converter a data informada para formato de datetime
            data_informada = datetime.strptime(data_informada, "%d/%m/%Y")

            # Obter a data atual
            data_atual = datetime.now()

            # Calcular a diferença entre as datas
            diferenca = data_atual - data_informada

            # Retorna a diferença entre data em dias
            return diferenca.days

        def ia_vencimento():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Decompondo a data atual
                data_atual = datetime.now()
                dia_atual = data_atual.day
                mes_atual = data_atual.month
                ano_atual = data_atual.year
                # **************************

                # Realizando a busca
                cursor.execute("SELECT * FROM contrato")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                lista = []
                for resultado in resultados:
                    data_vencimento = str(resultado[2]) + '/' + str(mes_atual) + '/' + str(ano_atual)
                    data_vencimento = datetime.strptime(data_vencimento, "%d/%m/%Y")
                    data_compra = resultado[9]
                    data_compra = datetime.strptime(data_compra, "%d/%m/%Y")
                    if data_compra <= data_vencimento:
                        lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e",
                                  "e", "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # função novo Contrato
        def novo_Contrato():
            numero = e_numero_contrato.get()
            vencimento = d_vencimento.get()
            objeto = e_objeto_contrato.get()
            fornecedor = e_fornecedor_contrato.get()
            cliente = e_cliente_contrato.get()
            cep = e_cep_cliente.get()
            parcelas = e_parcelas_contrato.get()
            valor = e_valor_contrato.get()
            data_inicial = data_inicio.get()
            data_final = l_data_final.get()
            iptu = e_iptu.get()
            condominio = e_condominio.get()
            luz = e_luz.get()
            agua = e_agua.get()
            outros = e_outros.get()
            status = e_status.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM contrato WHERE numero = ?"
            cursor.execute(consulta, (numero,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial,
                     data_final, iptu, condominio,
                     luz,
                     agua, outros, status]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if numero in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_contrato(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_numero_contrato.delete(0, END)
            d_vencimento.delete(0, END)
            e_objeto_contrato.delete(0, END)
            e_fornecedor_contrato.delete(0, END)
            e_cliente_contrato.delete(0, END)
            e_cep_cliente.delete(0, END)
            e_parcelas_contrato.delete(0, END)
            e_valor_contrato.delete(0, END)
            data_inicio.delete(0, END)
            l_data_final.delete(0, END)
            e_iptu.delete(0, END)
            e_condominio.delete(0, END)
            e_luz.delete(0, END)
            e_agua.delete(0, END)
            e_outros.delete(0, END)
            e_status.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_contrato()

        # função atualizar cliente
        def update_contrato():
            try:
                botao_off(botao_novo_ct)
                botao_off(botao_atualizar_ct)
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                # limpando os campos
                e_numero_contrato.delete(0, END)
                d_vencimento.delete(0, END)
                e_objeto_contrato.delete(0, END)
                e_fornecedor_contrato.delete(0, END)
                e_cliente_contrato.delete(0, END)
                e_cep_cliente.delete(0, END)
                e_parcelas_contrato.delete(0, END)
                e_valor_contrato.delete(0, END)
                data_inicio.delete(0, END)
                l_data_final.delete(0, END)
                e_iptu.delete(0, END)
                e_condominio.delete(0, END)
                e_luz.delete(0, END)
                e_agua.delete(0, END)
                e_outros.delete(0, END)
                e_status.delete(0, END)

                # inserindo os valores nas entry
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])

                # função atualizar
                def update():
                    numero = e_numero_contrato.get()
                    vencimento = d_vencimento.get()
                    objeto = e_objeto_contrato.get()
                    fornecedor = e_fornecedor_contrato.get()
                    cliente = e_cliente_contrato.get()
                    cep = e_cep_cliente.get()
                    parcelas = e_parcelas_contrato.get()
                    valor = e_valor_contrato.get()
                    data_inicial = data_inicio.get()
                    data_final = l_data_final.get()
                    iptu = e_iptu.get()
                    condominio = e_condominio.get()
                    luz = e_luz.get()
                    agua = e_agua.get()
                    outros = e_outros.get()
                    status = e_status.get()

                    lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial,
                             data_final, iptu,
                             condominio, luz, agua, outros, status, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_contrato(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_numero_contrato.delete(0, END)
                    d_vencimento.delete(0, END)
                    e_objeto_contrato.delete(0, END)
                    e_fornecedor_contrato.delete(0, END)
                    e_cliente_contrato.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    e_parcelas_contrato.delete(0, END)
                    e_valor_contrato.delete(0, END)
                    data_inicio.delete(0, END)
                    l_data_final.delete(0, END)
                    e_iptu.delete(0, END)
                    e_condominio.delete(0, END)
                    e_luz.delete(0, END)
                    e_agua.delete(0, END)
                    e_outros.delete(0, END)
                    e_status.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_contrato()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_ct)
                    botao_on(botao_atualizar_ct)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função deletar Contrato
        def delete_contrato():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_contrato.focus()
                    tree_dicionario = tree_contrato.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_contrato([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função Limpar a tela
        def limpar_contrato():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            contratos()

        def visualizar_contrato():
            botao_on(botao_duplicar)
            botao_off(botao_novo_ct)
            botao_off(botao_atualizar_ct)
            try:
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_numero_contrato.delete(0, END)
                d_vencimento.delete(0, END)
                e_objeto_contrato.delete(0, END)
                e_fornecedor_contrato.delete(0, END)
                e_cliente_contrato.delete(0, END)
                e_cep_cliente.delete(0, END)
                e_parcelas_contrato.delete(0, END)
                e_valor_contrato.delete(0, END)
                data_inicio.delete(0, END)
                l_data_final.delete(0, END)
                e_iptu.delete(0, END)
                e_condominio.delete(0, END)
                e_luz.delete(0, END)
                e_agua.delete(0, END)
                e_outros.delete(0, END)
                e_status.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_ct)
            botao_on(botao_atualizar_ct)
            botao_off(botao_duplicar)

        # Função para importar novos contratos

        # Função para importar o cadastro de contratos
        def importar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_contratos.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    numero = row['Número']
                    vencimento = row['Vencimento']
                    objeto = row['Objeto']
                    fornecedor = row['Fornecedor']
                    cliente = row['Cliente']
                    cep = row['CEP']
                    parcelas = row['Parcelas']
                    valor = row['Valor']
                    data_inicial = row['Dta Inicio']
                    data_final = row['Dta Final']
                    iptu = row['IPTU']
                    condominio = row['Condominio']
                    luz = row['Luz']
                    agua = row['Agua']
                    outros = row['Outros']
                    status = row['Status']

                    tabela = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial,
                              data_final, iptu, condominio,
                              luz, agua, outros, status]

                    # Inserindo os dados no banco de dados
                    criar_contrato(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de contratos
        def exportar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas',
                               'Valor',
                               'Dta Inicio',
                               'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']
                tabela_contratos = pd.DataFrame(lista)
                tabela_contratos.columns = list_header
                nome_arquivo = 'arquivos/tabela_contratos.xlsx'
                tabela_contratos.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando Itens da Tela de Contrato*********************************************************************************************************************************************
        global ano_atual

        l_numero_contrato = Label(frame_detalhes, text="Número do contrato:", height=1, anchor=NW, font=('Ivy 10'),
                                  bg=co1,
                                  fg=co4)
        l_numero_contrato.place(x=4, y=10)
        e_numero_contrato = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_numero_contrato.place(x=127, y=10)

        l_vencimento = Label(frame_detalhes, text="Vencimento:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                             fg=co4)
        l_vencimento.place(x=227, y=10)
        d_vencimento = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        d_vencimento['values'] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                  24, 25, 26, 27, 28, 29, 30, 31]
        d_vencimento.place(x=307, y=10)

        l_objeto_contrato = Label(frame_detalhes, text="Objeto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_objeto_contrato.place(x=4, y=40)
        e_objeto_contrato = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_objeto_contrato['values'] = ['COMPRA', 'VENDA', 'LOCAÇÃO', 'DIVERSOS', 'SERVIÇOS']
        e_objeto_contrato.place(x=57, y=40)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_fornecedor_contrato = Label(frame_detalhes, text="Fornecedor:", height=1, anchor=NW, font=('Ivy 10'),
                                      bg=co1,
                                      fg=co4)
        l_fornecedor_contrato.place(x=167, y=40)
        e_fornecedor_contrato = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_fornecedor_contrato['values'] = (fornecedor)
        e_fornecedor_contrato.place(x=243, y=40)

        def dados_cliente(event):
            valor_selecionado = e_cliente_contrato.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT * FROM cliente WHERE nome_cliente ='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Fechando a conexão com o banco de dados
                conn.close()

                # Exibindo os resultados
                e_cep_cliente.delete(0, END)
                e_cep_cliente.insert(0, resultado[0][6])
            except:
                return

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_cliente_contrato = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_cliente_contrato.place(x=4, y=70)
        e_cliente_contrato = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cliente_contrato['values'] = (cliente)
        e_cliente_contrato.bind("<<ComboboxSelected>>", dados_cliente)
        e_cliente_contrato.place(x=57, y=70)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=232, y=70)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=21, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=272, y=70)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        l_parcelas_contrato = Label(frame_detalhes, text="Parcelas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_parcelas_contrato.place(x=4, y=100)
        e_parcelas_contrato = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_parcelas_contrato.place(x=73, y=100)

        l_valor_contrato = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_valor_contrato.place(x=222, y=100)
        e_valor_contrato = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_valor_contrato.place(x=272, y=100)

        # Função para preencher a data final
        def data_futura(event):
            valor_selecionado = int(
                e_parcelas_contrato.get())  # Recebe a quantidade de parcelas em string e converte para inteiro e armazena na variavel valor_selecionado

            data_inicial = data_inicio.get()  # pega a data inicial que foi selecionada

            data_inicial = data_inicial.replace("/",
                                                "-")  # Converte a data selecionada em formato em Português Brasil para formato US
            data_formatada = datetime.strptime(data_inicial, "%d-%m-%Y")  # Converte a data em um objeto datetime

            resultado = data_formatada + relativedelta(
                months=valor_selecionado)  # Soma a quantidade de parcelas aos meses da data incial
            resultado = datetime.strftime(resultado,
                                          "%d/%m/%Y")  # Converte o resultado em uma data no formato Português Brasil

            # Exibindo os resultados
            l_data_final.delete(0, END)  # Limpa o campo data_final
            l_data_final.insert(0, resultado)  # Seta o valor ao campo data_final
            return

        l_data_inicio = Label(frame_detalhes, text="Data de inicio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_data_inicio.place(x=4, y=130)
        data_inicio = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                locale="pt_br")
        data_inicio.bind("<<DateEntrySelected>>", data_futura)
        data_inicio.place(x=98, y=130)

        l_data_final = Label(frame_detalhes, text="Data Final:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                             fg=co4)
        l_data_final.place(x=220, y=130)
        l_data_final = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                 locale="pt_br")
        l_data_final.place(x=300, y=130)

        l_iptu = Label(frame_detalhes, text="IPTU:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_iptu.place(x=4, y=160)
        e_iptu = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_iptu.place(x=57, y=160)

        l_condominio = Label(frame_detalhes, text="Condominio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                             fg=co4)
        l_condominio.place(x=187, y=160)
        e_condominio = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_condominio.place(x=272, y=160)

        l_luz = Label(frame_detalhes, text="LUZ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_luz.place(x=4, y=190)
        e_luz = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_luz.place(x=57, y=190)

        l_agua = Label(frame_detalhes, text="AGUA:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_agua.place(x=217, y=190)
        e_agua = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_agua.place(x=272, y=190)

        l_outros = Label(frame_detalhes, text="OUTROS:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_outros.place(x=4, y=220)
        e_outros = Entry(frame_detalhes, width=25, justify='left', relief='solid')
        e_outros.place(x=77, y=219)

        l_status = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=240, y=220)
        e_status = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_status['values'] = ['ABERTO', 'FECHADO']
        e_status.place(x=294, y=220)

        # Botões de controle de contrato*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_aberto

        def button_houver(e):
            botao_novo_ct["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_ct = Button(frame_detalhes, command=novo_Contrato, image=busca_nt, text='', width=30,
                               compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_ct.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_ct["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_ct = Button(frame_detalhes, command=update_contrato, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_ct.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_contrato, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_contrato, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_contrato, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_contratos, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_contratos, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        def button_houver_aberto(e):
            botao_abertos["bg"] = "white"
            status_label.config(text="     Faturas em aberto")

        def button_houver_leave_aberto(e):
            botao_abertos["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_aberto = Image.open('icone/Receber.png')
        img_aberto = img_aberto.resize((20, 20))
        img_aberto = ImageTk.PhotoImage(img_aberto)
        botao_abertos = Button(frame_detalhes, command=ia_vencimento, image=img_aberto, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_abertos.place(x=454, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_ct.bind("<Enter>", button_houver)
        botao_novo_ct.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_ct.bind("<Enter>", button_houver_editar)
        botao_atualizar_ct.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_abertos.bind("<Enter>", button_houver_aberto)
        botao_abertos.bind("<Leave>", button_houver_leave_aberto)

        # Tabela contrato--------------------------------------------------------------------------------------------------
        def mostrar_contrato():
            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas',
                           'Valor', 'Dta Inicio',
                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

            df_list = ver_baixas()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_contrato

            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header,
                                         show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_contrato.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                  "nw"]
            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
            n = 0

            for col in list_header:
                tree_contrato.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_contrato.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_contrato.insert('', 'end', values=item)

        mostrar_contrato()

        # Criando seção de busca para contratos:*****************************************************************************************************
        # Criando os relatórios-----------------------------------------------------------
        def pagar(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_fornecedor()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=125)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def nome(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        buscar_relatorio()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=5)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def objeto(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE status = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_objeto()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=65)
                return

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def funcao_date(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE data_final BETWEEN '{data}' AND '{data_atual}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_data()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=185)
                return

            except:
                return

        # Criando a Função de Busca

        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=35)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e",
                                  "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_objeto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE status LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e",
                                  "e", "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor

        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=150)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e",
                                  "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()


            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute("SELECT * FROM contrato WHERE data_final BETWEEN '{}' AND '{}';".format(data,
                                                                                                       data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio', 'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros',
                                           'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=860, y=205)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except:
                return

        def funcao_nome():
            nome(i)
            buscar_relatorio()

        def funcao_data():
            funcao_date(i)
            relatorio_data()

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=494, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=494, y=35)

        botao_procurar = Button(frame_detalhes, command=funcao_nome, anchor=CENTER, text='Procurar'.upper(),
                                width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=613, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW,
                            font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=494, y=70)
        ver_contrato = ver_contratos()
        referente = []
        for i in ver_contrato:
            referente.append(i[16])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.bind("<<ComboboxSelected>>", objeto)
        e_referente_procurar.place(x=494, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_objeto, anchor=CENTER,
                                          text='Procurar'.upper(),
                                          width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=613, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=494, y=125)
        ver_contrato = ver_contratos()
        provedor = []
        for i in ver_contrato:
            provedor.append(i[4])
        e_fornecedor_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_fornecedor_procurar['values'] = (provedor)
        e_fornecedor_procurar.bind("<<ComboboxSelected>>", pagar)
        e_fornecedor_procurar.place(x=494, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=613, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=494, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=494, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2,
                                          year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=627, y=205)

        botao_procurar_data = Button(frame_detalhes, command=funcao_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=757, y=205)


    # Função da tela de Contrato e Produtos--------------------------------------------------------
    def produtos():
        # Criando frames para tabelas
        frame_tabela_contrato = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_contrato.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        frame_tabela_linha = Frame(frame_tabela, width=30, height=200, bg=co1)
        frame_tabela_linha.grid(row=0, column=1, pady=0, padx=10, sticky=NSEW)

        frame_tabela_produto = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_produto.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da produto-----------------------------------------------------------
        # Função novo produto
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def produto_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=447, y=20)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=467, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=produto_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=467, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            produto_imagem()

        def novo_produto():
            # Teste para verificar se foi escolhido a imagem ou não
            global imagem, l_imagem, imagem_string, foto
            if foto != 1:
                imagem_string = ""

            imagem = imagem_string
            codigo = e_produto_codigo.get()
            quantidade = e_produto_quantidade.get()
            descricao = e_produto_descricao.get()
            localizacao = e_produto_localizacao.get()
            referencia = e_produto_referencia.get()
            classe = e_produto_classe.get()
            valor = e_produto_valor.get()
            reserva = e_produto_seguro.get()
            pedido = e_produto_pedido.get()
            status = e_produto_status.get()
            unidade = e_produto_unidade.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM produto WHERE codigo = ?"
            cursor.execute(consulta, (codigo,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor, reserva, pedido, status]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if codigo == "" or descricao == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if codigo in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_produto(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_produto_codigo.delete(0, END)
            e_produto_quantidade.delete(0, END)
            e_produto_descricao.delete(0, END)
            e_produto_localizacao.delete(0, END)
            e_produto_referencia.delete(0, END)
            e_produto_classe.delete(0, END)
            e_produto_valor.delete(0, END)
            e_produto_seguro.delete(0, END)
            e_produto_pedido.delete(0, END)
            e_produto_status.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_produto()

        # função atualizar Turma
        def update_produto():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_p)
                botao_off(botao_atualizar_p)
                botao_off(botao_ver)
                botao_off(botao_limpar)
                botao_off(botao_duplicar)
                tree_itens = tree_produto.focus()
                tree_dicionario = tree_produto.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_produto_codigo.insert(0, tree_lista[1])
                e_produto_localizacao.insert(0, tree_lista[2])
                e_produto_descricao.insert(0, tree_lista[3])
                e_produto_quantidade.insert(0, tree_lista[4])
                e_produto_unidade.insert(0, tree_lista[5])
                e_produto_referencia.insert(0, tree_lista[6])
                e_produto_classe.insert(0, tree_lista[7])
                e_produto_valor.insert(0, tree_lista[9])
                e_produto_seguro.insert(0, tree_lista[10])
                e_produto_pedido.insert(0, tree_lista[11])
                e_produto_status.insert(0, tree_lista[12])

                imagem = tree_lista[8]
                if imagem == "":
                    imagem = tree_lista[8]
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                # Função para ativar o batão de busca de imagens
                def buscar_foto():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    botao_on(botao_carregar)
                    return foto

                # Função para escolher a imagem
                def produto_imagem():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    imagem = fd.askopenfilename()
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                    botao_carregar['text'] = 'Trocar de foto'.upper()

                botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                                    width=20,
                                    compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_foto.place(x=467, y=valor_y_f)
                botao_carregar = Button(frame_detalhes, command=produto_imagem, anchor=CENTER,
                                        text='Carregar Foto'.upper(),
                                        width=20,
                                        compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_carregar.place(x=467, y=valor_y_b)
                botao_off(botao_carregar)
                if foto != 1:
                    imagem_string = ""

                if foto == 1:
                    pass

                # função atualizar
                def update():
                    # Teste para verificar se foi escolhido a imagem ou não
                    global imagem, l_imagem, imagem_string, foto
                    if foto != 1:
                        imagem_string = ""
                    codigo = e_produto_codigo.get()
                    localizacao = e_produto_localizacao.get()
                    descricao = e_produto_descricao.get()
                    quantidade = e_produto_quantidade.get()
                    unidade = e_produto_unidade.get()
                    referencia = e_produto_referencia.get()
                    classe = e_produto_classe.get()
                    imagem = imagem_string
                    valor = e_produto_valor.get()
                    reserva = e_produto_seguro.get()
                    pedido = e_produto_pedido.get()
                    status = e_produto_status.get()

                    lista = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor, reserva, pedido, status, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if codigo == "" or descricao == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_produto(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_produto_codigo.delete(0, END)
                    e_produto_quantidade.delete(0, END)
                    e_produto_descricao.delete(0, END)
                    e_produto_localizacao.delete(0, END)
                    e_produto_referencia.delete(0, END)
                    e_produto_classe.delete(0, END)
                    e_produto_valor.delete(0, END)
                    e_produto_seguro.delete(0, END)
                    e_produto_pedido.delete(0, END)
                    e_produto_status.delete(0, END)
                    e_produto_unidade.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_produto()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_p)
                    botao_on(botao_atualizar_p)
                    botao_on(botao_ver)
                    botao_on(botao_limpar)
                    botao_on(botao_duplicar)


                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30, compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função atualizar aluno
        def visualizar_produto():
            botao_on(botao_duplicar)
            botao_off(botao_novo_p)
            botao_off(botao_atualizar_p)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_produto.focus()
                tree_dicionario = tree_produto.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_produto_codigo.delete(0, END)
                e_produto_localizacao.delete(0, END)
                e_produto_descricao.delete(0, END)
                e_produto_quantidade.delete(0, END)
                e_produto_unidade.delete(0, END)
                e_produto_referencia.delete(0, END)
                e_produto_classe.delete(0, END)
                e_produto_valor.delete(0, END)
                e_produto_seguro.delete(0, END)
                e_produto_pedido.delete(0, END)
                e_produto_status.delete(0, END)


                # Inserindo os valores nos campos de entrada
                e_produto_codigo.insert(0, tree_lista[1])
                e_produto_localizacao.insert(0, tree_lista[2])
                e_produto_descricao.insert(0, tree_lista[3])
                e_produto_quantidade.insert(0, tree_lista[4])
                e_produto_unidade.insert(0, tree_lista[5])
                e_produto_referencia.insert(0, tree_lista[6])
                e_produto_classe.insert(0, tree_lista[7])
                e_produto_valor.insert(0, tree_lista[9])
                e_produto_seguro.insert(0, tree_lista[10])
                e_produto_pedido.insert(0, tree_lista[11])
                e_produto_status.insert(0, tree_lista[12])


                imagem = tree_lista[8]
                if imagem == "":
                    return
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um item da tabela')

        # função deletar Fornecedores
        def delete_produto():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_produto.focus()
                    tree_dicionario = tree_produto.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_produto([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Função Limpar a tela
        def limpar_produto():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            produtos()

        # Criando função para duplicar registro
        def copiar_registro():
            botao_on(botao_novo_p)
            botao_on(botao_atualizar_p)
            botao_off(botao_duplicar)

        # Função para importar o cadastro de produtos
        def importar_produtos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM produto"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_produtos.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    codigo = row['Código']
                    localizacao = row['Localização']
                    descricao = row['Descrição']
                    quantidade = row['Quantidade']
                    unidade = row['Unidade']
                    referencia = row['Referencia']
                    classe = row['Classe']
                    imagem = row['Imagem']
                    valor = row['Valor']
                    reserva = row['Reserva']
                    pedido = row['Pedido']
                    status = row['Status']

                    tabela = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor, reserva, pedido, status]

                    # Inserindo os dados no banco de dados
                    criar_produto(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de produtos
        def exportar_produtos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM produto"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade', 'Referencia',
                               'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_produtos.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando a Função de Busca de produto
        def buscar_produto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM produto WHERE descricao LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def exibir_produto():
                            app_nome = Label(frame_tabela_produto, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade',  'Referencia',
                                           'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

                            df_list = lista
                            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(
                                                                   ("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                   ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente,
                                                  anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=925, y=35)

                            global tree_produto

                            tree_produto = ttk.Treeview(frame_tabela_produto, selectmode="extended",
                                                        columns=list_header, show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_produto, orient="vertical", command=tree_produto.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_produto, orient="horizontal", command=tree_produto.xview)

                            tree_produto.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_produto.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_produto.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
                            h = [40, 80, 80, 250, 150, 150, 80, 80, 80, 80, 80, 80, 80 ]
                            n = 0

                            for col in list_header:
                                tree_produto.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_produto.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_produto.insert('', 'end', values=item)
                        exibir_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando a Função de Busca de código
        def buscar_codigo():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_codigo_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM produto WHERE codigo LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_codigo_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def exibir_produto():
                            app_nome = Label(frame_tabela_produto, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade',
                                           'Referencia',
                                           'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

                            df_list = lista
                            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(
                                                                   ("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                   ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente,
                                                  anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=925, y=95)

                            global tree_produto

                            tree_produto = ttk.Treeview(frame_tabela_produto, selectmode="extended",
                                                        columns=list_header, show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_produto, orient="vertical",
                                                command=tree_produto.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_produto, orient="horizontal",
                                                command=tree_produto.xview)

                            tree_produto.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_produto.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_produto.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
                            h = [40, 80, 80, 250, 150, 150, 80, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_produto.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_produto.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_produto.insert('', 'end', values=item)

                        exibir_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando a Função para bloquear a tela e voltar para tela de autenticação
        def bloqueio_tela():
            janela.destroy()
            password()

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW,
                       font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=727, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=730, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_produto, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=857, y=35)

        # Procurar código------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com código ]", height=1, anchor=NW,
                       font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=727, y=70)


        def aplicar_masc_cod(event):
            cod = e_codigo_procurar.get()
            cod_formatado = ''

            # Remover caracteres diferentes de números do Código
            cod = ''.join(filter(str.isdigit, cod))

            # Aplicar a máscara de CPF
            if len(cod) <= 3:
                cod_formatado = cod
            elif len(cod) <= 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            elif len(cod) > 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            else:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]

            # Atualizar o texto da entry com o CPF formatado
            e_codigo_procurar.delete(0, END)
            e_codigo_procurar.insert(0, cod_formatado)

        def validar_digito(P):
            # Verifica se o número de dígitos é menor ou igual a 10
            if len(P) <= 10:
                return True
            return False

        vcmd = (janela.register(validar_digito), '%P')

        e_codigo_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_codigo_procurar.place(x=730, y=95)
        e_codigo_procurar.bind("<KeyRelease>", aplicar_masc_cod)

        botao_codigo = Button(frame_detalhes, command=buscar_codigo, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_codigo.place(x=857, y=95)

        # Criando Itens da Tela de Produto*********************************************************************************************************************************************
        def aplicar_mascara_cod(event):
            cod = e_produto_codigo.get()
            cod_formatado = ''

            # Remover caracteres diferentes de números do Código
            cod = ''.join(filter(str.isdigit, cod))

            # Aplicar a máscara de CPF
            if len(cod) <= 3:
                cod_formatado = cod
            elif len(cod) <= 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            elif len(cod) > 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            else:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]

            # Atualizar o texto da entry com o CPF formatado
            e_produto_codigo.delete(0, END)
            e_produto_codigo.insert(0, cod_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 10
            if len(P) <= 10:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_produto_codigo = Label(frame_detalhes, text="Código:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_produto_codigo.place(x=4, y=10)
        e_produto_codigo = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=20, justify='left',
                                 relief='solid')
        e_produto_codigo.place(x=87, y=10)

        e_produto_codigo.bind("<KeyRelease>", aplicar_mascara_cod)

        l_produto_localizacao = Label(frame_detalhes, text="Localização:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_produto_localizacao.place(x=227, y=10)
        e_produto_localizacao = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_produto_localizacao.place(x=307, y=10)

        l_produto_descricao = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_descricao.place(x=4, y=40)
        e_produto_descricao = Entry(frame_detalhes, width=52, justify='left', relief='solid')
        e_produto_descricao.place(x=87, y=40)

        l_produto_quantidade = Label(frame_detalhes, text="Quantidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_produto_quantidade.place(x=4, y=70)
        e_produto_quantidade = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_quantidade.place(x=87, y=70)

        l_produto_unidade = Label(frame_detalhes, text="Unidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_produto_unidade.place(x=217, y=70)
        e_produto_unidade = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_unidade.place(x=277, y=70)

        l_produto_referencia = Label(frame_detalhes, text="Referência:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_produto_referencia.place(x=4, y=100)
        e_produto_referencia = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_referencia.place(x=87, y=100)

        l_produto_classe = Label(frame_detalhes, text="Classe:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_classe.place(x=217, y=100)
        e_produto_classe = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_classe.place(x=277, y=100)

        l_produto_valor = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_produto_valor.place(x=4, y=130)
        e_produto_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_valor.place(x=87, y=130)

        l_produto_seguro = Label(frame_detalhes, text="Reserva:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_seguro.place(x=217, y=130)
        e_produto_seguro = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_seguro.place(x=277, y=130)

        l_produto_pedido = Label(frame_detalhes, text="Pedido:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_produto_pedido.place(x=4, y=160)
        e_produto_pedido = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_pedido.place(x=87, y=160)

        l_produto_status = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_status.place(x=217, y=160)
        e_produto_status = ttk.Combobox(frame_detalhes, width=17, font=('Ivy 8'))
        e_produto_status['values'] = ('ATIVO', 'INATIVO')
        e_produto_status.place(x=277, y=160)

        # Botões de controle de produtos*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_bloquear

        def button_houver(e):
            botao_novo_p["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_p["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_p = Button(frame_detalhes, command=novo_produto, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_p.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_p["bg"]="white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_p["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_p = Button(frame_detalhes, command=update_produto, image=img_editar, text='', width=30, compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_p.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_produto, image=img_deletar, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_produto, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_produto, image=img_localizar, text='', width=30, compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"]="white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_produtos, image=img_importar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"]="white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_produtos, image=img_exportar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        def button_houver_bloqueio(e):
            botao_bloqueio["bg"] = "white"
            status_label.config(text="     Bloquear Tela")

        def button_houver_leave_bloqueio(e):
            botao_bloqueio["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_bloquear = Image.open('icone/trancado.png')
        img_bloquear = img_bloquear.resize((20, 20))
        img_bloquear = ImageTk.PhotoImage(img_bloquear)
        botao_bloqueio = Button(frame_detalhes, command=bloqueio_tela, image=img_bloquear, text='Bloquear Tela', width=150,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_bloqueio.place(x=1150, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_p.bind("<Enter>", button_houver)
        botao_novo_p.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_p.bind("<Enter>", button_houver_editar)
        botao_atualizar_p.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_bloqueio.bind("<Enter>", button_houver_bloqueio)
        botao_bloqueio.bind("<Leave>", button_houver_leave_bloqueio)

        # Tabela Produto--------------------------------------------------------------------------------------------------
        def mostrar_produto():
            app_nome = Label(frame_tabela_produto, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade', 'Referencia', 'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

            df_list = ver_produto()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_produto

            tree_produto = ttk.Treeview(frame_tabela_produto, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_produto, orient="vertical", command=tree_produto.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_produto, orient="horizontal", command=tree_produto.xview)

            tree_produto.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_produto.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_produto.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [40, 80, 80, 250, 150, 130, 120, 80, 80, 80, 80, 80,80]
            n = 0

            for col in list_header:
                tree_produto.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_produto.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_produto.insert('', 'end', values=item)

        mostrar_produto()


    # Criando a seção de relatórios**********************************************************************************************************************************************
    def relatorios():
        # Criando a Função de Busca
        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=35)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_referente():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE referente LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=95)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE local LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=150)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute('SELECT * FROM caixa WHERE data BETWEEN ? AND ?', (data,
                                                                                  data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=397, y=205)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()
            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=4, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_relatorio, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=117, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW, font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=4, y=70)
        caixa = ver_caixa()
        referente = []
        for i in caixa:
            referente.append(i[18])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=4, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_referente, anchor=CENTER,
                                          text='Procurar'.upper(), width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=117, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=4, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=4, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=117, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=4, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=4, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=147, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=287, y=205)


    def notas():
        # Criando frames para tabelas
        frame_tabela_notas = Frame(frame_tabela, width=295, height=200, bg=co1)
        frame_tabela_notas.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes de Notas-----------------------------------------------------------
        # função nova nota
        def nova_nota():
            banco = e_banco.get()
            data_emissao = e_data_emissao.get()
            fatura_numero = e_fatura_numero.get()
            fatura_valor = e_fatura_valor.get()
            ordem = e_ordem.get()
            ordem_valor = e_ordem_valor.get()
            data_vencimento = l_data_vencimento.get()
            data_aceite = l_data_aceite.get()
            fornecedor_notas = e_fornecedor_notas.get()
            cliente_notas = e_cliente_notas.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM notas WHERE banco = ?"
            cursor.execute(consulta, (banco,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento, data_aceite,
                     fornecedor_notas, cliente_notas]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if fatura_numero in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_notas(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_banco.delete(0, END)
            e_data_emissao.delete(0, END)
            e_fatura_numero.delete(0, END)
            e_fatura_valor.delete(0, END)
            e_ordem.delete(0, END)
            e_ordem_valor.delete(0, END)
            l_data_vencimento.delete(0, END)
            l_data_aceite.delete(0, END)
            e_fornecedor_notas.delete(0, END)
            e_cliente_notas.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_notas()

        # função atualizar notas
        def update_nota():
            try:
                botao_off(botao_novo_nt)
                botao_off(botao_atualizar_ct)
                tree_itens = tree_notas.focus()
                tree_dicionario = tree_notas.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                #Limpando os campos
                e_banco.delete(0, END)
                e_data_emissao.delete(0, END)
                e_fatura_numero.delete(0, END)
                e_fatura_valor.delete(0, END)
                e_ordem.delete(0, END)
                e_ordem_valor.delete(0, END)
                l_data_vencimento.delete(0, END)
                l_data_aceite.delete(0, END)
                e_fornecedor_notas.delete(0, END)
                e_cliente_notas.delete(0, END)

                # inserindo os valores nas entry
                e_banco.insert(0, tree_lista[1])
                e_data_emissao.insert(0, tree_lista[2])
                e_fatura_numero.insert(0, tree_lista[3])
                e_fatura_valor.insert(0, tree_lista[4])
                e_ordem.insert(0, tree_lista[5])
                e_ordem_valor.insert(0, tree_lista[6])
                l_data_vencimento.insert(0, tree_lista[7])
                l_data_aceite.insert(0, tree_lista[8])
                e_fornecedor_notas.insert(0, tree_lista[9])
                e_cliente_notas.insert(0, tree_lista[10])

                # função atualizar
                def update():
                    banco = e_banco.get()
                    data_emissao = e_data_emissao.get()
                    fatura_numero = e_fatura_numero.get()
                    fatura_valor = e_fatura_valor.get()
                    ordem = e_ordem.get()
                    ordem_valor = e_ordem_valor.get()
                    data_vencimento = l_data_vencimento.get()
                    data_aceite = l_data_aceite.get()
                    fornecedor_notas = e_fornecedor_notas.get()
                    cliente_notas = e_cliente_notas.get()

                    lista = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento,
                             data_aceite, fornecedor_notas, cliente_notas, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_notas(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_banco.delete(0, END)
                    e_data_emissao.delete(0, END)
                    e_fatura_numero.delete(0, END)
                    e_fatura_valor.delete(0, END)
                    e_ordem.delete(0, END)
                    e_ordem_valor.delete(0, END)
                    l_data_vencimento.delete(0, END)
                    l_data_aceite.delete(0, END)
                    e_fornecedor_notas.delete(0, END)
                    e_cliente_notas.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_notas()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_nt)
                    botao_on(botao_atualizar_ct)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar,text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função deletar notas
        def delete_notas():
            try:
                resultado = messagebox.askokcancel('Atenção!','Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_notas.focus()
                    tree_dicionario = tree_notas.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_notas([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_notas()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função Limpar a tela
        def limpar_notas():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            notas()

        def visualizar_notas():
            botao_on(botao_duplicar)
            botao_off(botao_novo_nt)
            botao_off(botao_atualizar_ct)
            try:
                tree_itens = tree_notas.focus()
                tree_dicionario = tree_notas.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_banco.delete(0, END)
                e_data_emissao.delete(0, END)
                e_fatura_numero.delete(0, END)
                e_fatura_valor.delete(0, END)
                e_ordem.delete(0, END)
                e_ordem_valor.delete(0, END)
                l_data_vencimento.delete(0, END)
                l_data_aceite.delete(0, END)
                e_fornecedor_notas.delete(0, END)
                e_cliente_notas.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_banco.insert(0, tree_lista[1])
                e_data_emissao.insert(0, tree_lista[2])
                e_fatura_numero.insert(0, tree_lista[3])
                e_fatura_valor.insert(0, tree_lista[4])
                e_ordem.insert(0, tree_lista[5])
                e_ordem_valor.insert(0, tree_lista[6])
                l_data_vencimento.insert(0, tree_lista[7])
                l_data_aceite.insert(0, tree_lista[8])
                e_fornecedor_notas.insert(0, tree_lista[9])
                e_cliente_notas.insert(0, tree_lista[10])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_nt)
            botao_on(botao_atualizar_ct)
            botao_off(botao_duplicar)

        # Função para importar o cadastro de notas
        def importar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM notas"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_notas.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    banco = row['BANCO']
                    data_emissao = row['EMISSÃO']
                    fatura_numero = row['FATURA']
                    fatura_valor = row['VALOR']
                    ordem = row['ORDEM']
                    ordem_valor = row['VALOR DA ORDEM']
                    data_vencimento = row['VENCIMENTO']
                    data_aceite = row['ACEITE']
                    fornecedor_notas = row['FORNECEDOR']
                    cliente_notas = row['CLIENTE']

                    tabela = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento, data_aceite,
                     fornecedor_notas, cliente_notas]

                    # Inserindo os dados no banco de dados
                    criar_notas(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_notas()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de notas
        def exportar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM notas"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM', 'VENCIMENTO', 'ACEITE',
                           'FORNECEDOR', 'CLIENTE']

                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_notas.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando Itens da Tela de Contrato*********************************************************************************************************************************************
        l_banco = Label(frame_detalhes, text="Banco:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_banco.place(x=4, y=10)
        e_banco = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_banco.place(x=57, y=10)

        l_fatura_numero = Label(frame_detalhes, text="Nº Fatura:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_fatura_numero.place(x=198, y=10)
        e_fatura_numero = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_fatura_numero.place(x=263, y=10)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_fornecedor_notas = Label(frame_detalhes, text="Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_fornecedor_notas.place(x=4, y=40)
        e_fornecedor_notas = ttk.Combobox(frame_detalhes, width=48, font=('Ivy 8 bold'))
        e_fornecedor_notas['values'] = (fornecedor)
        e_fornecedor_notas.place(x=86, y=40)

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_cliente_notas = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cliente_notas.place(x=4, y=70)
        e_cliente_notas = ttk.Combobox(frame_detalhes, width=53, font=('Ivy 8 bold'))
        e_cliente_notas['values'] = (cliente)
        e_cliente_notas.place(x=57, y=70)

        l_ordem = Label(frame_detalhes, text="Ordem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ordem.place(x=4, y=100)
        e_ordem = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ordem.place(x=57, y=100)

        l_ordem_valor = Label(frame_detalhes, text="Valor da Ordem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ordem_valor.place(x=162, y=100)
        e_ordem_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_ordem_valor.place(x=272, y=100)

        data = datetime.today()
        ano_atual = data.year
        # Criando campos de entrada
        l_data_emissao = Label(frame_detalhes, text="Data de emissão:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_data_emissao.place(x=4, y=130)
        e_data_emissao = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                   locale="pt_br")
        e_data_emissao.place(x=112, y=130)

        l_data_vencimento = Label(frame_detalhes, text="Vencimento:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_vencimento.place(x=217, y=130)
        l_data_vencimento = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                      locale="pt_br")
        l_data_vencimento.place(x=302, y=130)

        l_data_aceite = Label(frame_detalhes, text="Data aceite:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_aceite.place(x=4, y=160)
        l_data_aceite = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                                  locale="pt_br")
        l_data_aceite.place(x=87, y=160)

        l_fatura_valor = Label(frame_detalhes, text="Valor Fatura:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_fatura_valor.place(x=187, y=160)
        e_fatura_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_fatura_valor.place(x=272, y=160)

        # Botões de controle de contrato*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
        def button_houver(e):
            botao_novo_nt["bg"]="white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_nt["bg"]="SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_nt = Button(frame_detalhes, command=nova_nota,image=busca_nt,text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_nt.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_ct["bg"]="white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_ct["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_ct = Button(frame_detalhes, command=update_nota, image=img_editar, text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_ct.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"]="white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_notas, image=img_deletar, text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"]="white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"]="white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_notas, image=img_limpar, text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"]="white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_notas, image=img_localizar, text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"]="white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_notas, image=img_importar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"]="white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"]="SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_notas, image=img_exportar, text='', width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_nt.bind("<Enter>", button_houver)
        botao_novo_nt.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_ct.bind("<Enter>", button_houver_editar)
        botao_atualizar_ct.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)



        # Tabela contrato--------------------------------------------------------------------------------------------------
        def mostrar_notas():
            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM', 'VENCIMENTO', 'ACEITE',
                           'FORNECEDOR', 'CLIENTE']

            df_list = ver_notas()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_notas

            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_notas.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_notas.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 150, 150]
            n = 0

            for col in list_header:
                tree_notas.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_notas.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_notas.insert('', 'end', values=item)

        mostrar_notas()

        # Criando seção de busca para Notas:*****************************************************************************************************

        # Criando a Função de Busca
        def buscar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE fatura_numero LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=35)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_objeto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE ordem LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE fornecedor_notas LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=150)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute("SELECT * FROM notas WHERE data_vencimento BETWEEN '{}' AND '{}';".format(data,
                                                                                                       data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=860, y=205)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=494, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=494, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_notas, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=613, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW, font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=494, y=70)
        ver_contrato = ver_contratos()
        referente = []
        for i in ver_contrato:
            referente.append(i[2])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=494, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_objeto, anchor=CENTER, text='Procurar'.upper(),
                                          width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=613, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=494, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=494, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=613, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=494, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=494, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=627, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=757, y=205)


    def manutencao():
        import qrcode
        from qrcode.image.styledpil import StyledPilImage
        global criar_QR

        #Gerar QRCode
        # QR Code com imagem
        def criar_qrcode():
            global imagem_QR
            link = e_qrcode.get()
            qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)  # para poder adicionar uma imagem
            qr.add_data(link)

            imagem = qr.make_image(
                image_factory=StyledPilImage,
                embeded_image_path="logo.png",
            )

            imagem.save("img/qrcode_logo.png")

            #Exibir imagem na tela:
            imagem_QR = Image.open('img/qrcode_logo.png')
            imagem_QR = imagem_QR.resize((150, 150))
            imagem_QR = ImageTk.PhotoImage(imagem_QR)
            l_imagem.config(image=imagem_QR)

            caminho_imagem = 'img/qrcode_logo.png'
            visualizar_imagem = Image.open(caminho_imagem)
            visualizar_imagem.show()

        #Campo para digitar a URL que vai ser adicionada ao código QR
        l_qrcode = Label(frame_detalhes, text="Crie um QRcode adicionando o endereço do site que desejar:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_qrcode.place(x=4, y=10)
        l_qrcode = Label(frame_detalhes, text="Digite uma URL:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_qrcode.place(x=4, y=30)
        e_qrcode = Entry(frame_detalhes, width=40, justify='left', relief='solid')
        e_qrcode.place(x=107, y=30)

        #Botão para criar o código QR
        criar_QR = Image.open('icone/qrcode.png')
        criar_QR = criar_QR.resize((20, 20))
        criar_QR = ImageTk.PhotoImage(criar_QR)
        criar_codigo = Button(frame_detalhes, command=criar_qrcode, image=criar_QR, text='Gerar QRcode', width=150,
                               compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        criar_codigo.place(x=107, y=60)

        l_imagem = Label(frame_detalhes, bg=co1,
                         fg=co4)
        l_imagem.place(x=107, y=90)

        #Criando backup do banco de dados do sistema
        def fazer_backup():
            nome_banco = 'bdsystem.db'
            file = fd.askdirectory()
            pasta_destino = file
            # Cria o caminho completo para o backup com o nome do banco de dados
            caminho_backup = f"{pasta_destino}/{nome_banco}.backup"

            try:
                # Copia o arquivo do banco de dados para a pasta de destino
                shutil.copy(nome_banco, caminho_backup)
                messagebox.showinfo('Backup', 'Backup criado com sucesso!')
            except FileNotFoundError:
                messagebox.showerror('Erro', 'Arquivo do banco de dados não encontrado.')
            except Exception as ex:
                messagebox.showerror('Erro', 'Erro ao criar o backup:', ex)

        l_backup = Label(frame_detalhes, text="Selecione uma pasta para gerar o backup do Banco de Dados:", height=1,
                         anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_backup.place(x=4, y=250)
        b_backup = Button(frame_detalhes, command=fazer_backup, anchor=CENTER,
                          text="Backup do Banco de Dados".upper(), width=25,
                          overrelief=RIDGE,
                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        b_backup.place(x=4, y=270)

        #Criando a função Help onde estão as informações da versão e de quem criou o sistema
        def informacao():
            messagebox.showinfo('Help', 'JAC - Devolopment\n\n Versão: 2.1.0')

        l_help = Button(frame_tabela, command=informacao, anchor=CENTER,
                        text="  help!  ".upper(), width=9,
                        overrelief=RIDGE,
                        font=('Ivy 7 bold'), bg=co1, fg=co0)
        l_help.place(x=4, y=150)

        #https://youtube.com/@jacdesenvolvimentos?si=ddDvqh47r4dqxtEo


    # *****************************************************************************************************************************************************************************
    # Função de controle--------------------------------------------------------
    def control(i):
        # Criando a tela de Transações
        if i == 'transacao':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função Transações
            transacoes()
        # Criando o Dashboard
        if i == 'dashboard':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função Dashboard
            dashboard()
        # cadastro de caixa
        if i == 'caixa':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função caixa
            caixa()
        # criando a função para adicionar pessoas
        if i == 'clientes':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função clientes
            clientes()
        if i == 'fornecedores':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função fornecedores
            fornecedores()

        if i == 'baixas':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função baixas de contratos
            baixas()

        if i == 'contratos':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função contratos
            contratos()

        if i == 'produtos':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função produtos
            produtos()

        if i == 'imoveis':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função produtos
            imoveis()

        if i == 'notas':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função notas
            notas()

        if i == 'manutencao':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função manutenção
            manutencao()

        if i == 'relatorios':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função relatorios
            relatorios()

    def menu_direita():

        # reativar os botões
        app_add_imoveis = Button(frame_dados, command=lambda: control('imoveis'), image=app_img_add_imoveis,
                                 text=' Imóveis', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                                 fg=co0)
        app_add_imoveis.place(x=366, y=10)

        app_baixas = Button(frame_dados, command=lambda: control('baixas'), image=app_img_baixas, text=' Baixas',
                            width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_baixas.place(x=40, y=10)

        app_transacao = Button(frame_dados, command=lambda: control('transacao'), image=app_img_transacao,
                               text='Transação',
                               width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_transacao.place(x=203, y=10)

        app_adicionar.destroy()
        app_contrato.destroy()
        app_dashboard.destroy()
        app_cadastro.destroy()
        app_add_clientes.destroy()
        app_add_pessoas.destroy()
        app_salvar.destroy()
        app_help.destroy()

    def menu_esquerda():

        # reativar os botões
        app_adicionar = Button(frame_dados, command=lambda: control('produtos'), image=app_img_adicionar,
                               text=' Produtos',
                               width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_adicionar.place(x=855, y=10)

        app_contrato = Button(frame_dados, command=lambda: control('contratos'), image=app_img_contrato,
                              text=' Contratos',
                              width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_contrato.place(x=692, y=10)

        app_dashboard = Button(frame_dados, command=lambda: control('dashboard'), image=app_img_dashboard,
                               text='Dashboard',
                               width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_dashboard.place(x=40, y=10)

        app_cadastro = Button(frame_dados, command=lambda: control('caixa'), image=app_img_cadastro,
                              text='Movimentações',
                              width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_cadastro.place(x=203, y=10)

        app_add_clientes = Button(frame_dados, command=lambda: control('clientes'), image=app_img_add_clientes,
                                  text=' Clientes', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                                  fg=co0)
        app_add_clientes.place(x=366, y=10)

        app_add_pessoas = Button(frame_dados, command=lambda: control('fornecedores'), image=app_img_add_pessoas,
                                 text=' Fornecedores', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'),
                                 bg=co1,
                                 fg=co0)
        app_add_pessoas.place(x=529, y=10)

        app_salvar = Button(frame_dados, command=lambda: control('notas'), image=app_img_salvar, text=' Entradas',
                            width=150,
                            compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_salvar.place(x=1018, y=10)

        app_help = Button(frame_dados, command=lambda: control('manutencao'), image=app_img_help, text=' Manutenção',
                          width=150,
                          compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_help.place(x=1181, y=10)


    #Finalizando a função de controle
    # ************************************************************************************************************************************************************************************************
    # Criando botões do menu
    # 10
    app_img_esquerda = Image.open('icone/direita.png')
    app_img_esquerda = app_img_esquerda.resize((40, 40))
    app_img_esquerda = app_img_esquerda.transpose(Image.FLIP_LEFT_RIGHT)
    app_img_esquerda = ImageTk.PhotoImage(app_img_esquerda)
    app_esquerda = Button(frame_dados, command=lambda: menu_esquerda(), image=app_img_esquerda, text='|',
                         width=20,
                         compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_esquerda.place(x=8, y=10)

    # 6
    app_img_baixas = Image.open('icone/editar64.png')
    app_img_baixas = app_img_baixas.resize((40, 40))
    app_img_baixas = ImageTk.PhotoImage(app_img_baixas)
    app_baixas = Button(frame_dados, command=lambda: control('baixas'), image=app_img_baixas, text=' Baixas',
                        width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_baixas.place(x=40, y=10)

    #1
    app_img_dashboard = Image.open('icone/dashboard.png')
    app_img_dashboard = app_img_dashboard.resize((40, 40))
    app_img_dashboard = ImageTk.PhotoImage(app_img_dashboard)
    app_dashboard = Button(frame_dados, command=lambda: control('dashboard'), image=app_img_dashboard, text='Dashboard',
                           width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_dashboard.place(x=40, y=10)

    # 1
    app_img_transacao = Image.open('icone/cartoes.png')
    app_img_transacao = app_img_transacao.resize((40, 40))
    app_img_transacao = ImageTk.PhotoImage(app_img_transacao)
    app_transacao = Button(frame_dados, command=lambda: control('transacao'), image=app_img_transacao, text='Transação',
                           width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_transacao.place(x=203, y=10)

    #2
    app_img_cadastro = Image.open('icone/grande-parcela.png')
    app_img_cadastro = app_img_cadastro.resize((40, 40))
    app_img_cadastro = ImageTk.PhotoImage(app_img_cadastro)
    app_cadastro = Button(frame_dados, command=lambda: control('caixa'), image=app_img_cadastro, text='Movimentações',
                          width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_cadastro.place(x=203, y=10)

    # 5
    app_img_add_imoveis = Image.open('icone/casa.png')
    app_img_add_imoveis = app_img_add_imoveis.resize((40, 40))
    app_img_add_imoveis = ImageTk.PhotoImage(app_img_add_imoveis)
    app_add_imoveis = Button(frame_dados, command=lambda: control('imoveis'), image=app_img_add_imoveis,
                             text=' Imóveis', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                             fg=co0)
    app_add_imoveis.place(x=366, y=10)

    #3
    app_img_add_clientes = Image.open('icone/clientes.png')
    app_img_add_clientes = app_img_add_clientes.resize((40, 40))
    app_img_add_clientes = ImageTk.PhotoImage(app_img_add_clientes)
    app_add_clientes = Button(frame_dados, command=lambda: control('clientes'), image=app_img_add_clientes,
                              text=' Clientes', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_add_clientes.place(x=366, y=10)

    #4
    app_img_add_pessoas = Image.open('icone/corporativo.png')
    app_img_add_pessoas = app_img_add_pessoas.resize((40, 40))
    app_img_add_pessoas = ImageTk.PhotoImage(app_img_add_pessoas)
    app_add_pessoas = Button(frame_dados, command=lambda: control('fornecedores'), image=app_img_add_pessoas,
                             text=' Fornecedores', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                             fg=co0)
    app_add_pessoas.place(x=529, y=10)

    # 6
    app_img_contrato = Image.open('icone/editar64.png')
    app_img_contrato = app_img_contrato.resize((40, 40))
    app_img_contrato = ImageTk.PhotoImage(app_img_contrato)
    app_contrato = Button(frame_dados, command=lambda: control('contratos'), image=app_img_contrato, text=' Contratos',
                          width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_contrato.place(x=692, y=10)

    #7
    app_img_adicionar = Image.open('icone/produtos.png')
    app_img_adicionar = app_img_adicionar.resize((40, 40))
    app_img_adicionar = ImageTk.PhotoImage(app_img_adicionar)
    app_adicionar = Button(frame_dados, command=lambda: control('produtos'), image=app_img_adicionar, text=' Produtos',
                           width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_adicionar.place(x=855, y=10)

    #8
    app_img_salvar = Image.open('icone/salvar94.png')
    app_img_salvar = app_img_salvar.resize((40, 40))
    app_img_salvar = ImageTk.PhotoImage(app_img_salvar)
    app_salvar = Button(frame_dados, command=lambda: control('notas'), image=app_img_salvar, text=' Entradas', width=150,
                        compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_salvar.place(x=1018, y=10)

    #9
    app_img_help = Image.open('icone/manutencao.png')
    app_img_help = app_img_help.resize((40, 40))
    app_img_help = ImageTk.PhotoImage(app_img_help)
    app_help = Button(frame_dados, command=lambda: control('manutencao'), image=app_img_help, text=' Manutenção', width=150,
                      compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_help.place(x=1181, y=10)

    #10
    app_img_direita = Image.open('icone/direita.png')
    app_img_direita = app_img_direita.resize((40, 40))
    app_img_direita = ImageTk.PhotoImage(app_img_direita)
    app_direita = Button(frame_dados, command=lambda: menu_direita(), image=app_img_direita, text='|',
                      width=20,
                      compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_direita.place(x=1344, y=10)

    app_baixas.destroy()
    app_add_imoveis.destroy()
    app_transacao.destroy()

    # Criando o botão de busca geral *************************************************************************************
    buscador = ""
    busca_geral = Entry(frame_logo, width=30, justify='left', relief='solid', font=('Ivy 15'), bg=co1, fg=co6)
    busca_geral.place(x=560, y=14)

    def buscar_texto():
        buscador = busca_geral.get()
        busca_geral.delete(0, END)
        return buscador

    busca_lg = Image.open('icone/inventario.png')
    busca_lg = busca_lg.resize((20, 20))
    busca_lg = ImageTk.PhotoImage(busca_lg)

    busca_logo = Button(frame_logo, command=lambda: control(buscar_texto()), image=busca_lg,
                              text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
    busca_logo.place(x=895, y=15)
    # Finalizando botão de busca geral ***********************************************************************************

    # Criando as imagens dos botões **************************************************************************************
    global busca_contas, busca_conta, img_pagar, img_clientes, img_receber, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_pagar_ct, img_receber_ct, img_mostrar_ct,img_aberto, img_bloquear
    busca_contas = Image.open('icone/pdf96.png')
    busca_nt = Image.open('icone/novo.png')
    img_add = Image.open('icone/adicionar.png')
    img_salvar = Image.open('icone/salvar.png')
    img_novo = Image.open('icone/novo96.png')
    img_localizar = Image.open('icone/visualizar.png')
    img_editar = Image.open('icone/editar.png')
    img_cancelar = Image.open('icone/cancelar.png')
    img_duplicar = Image.open('icone/duplicar.png')
    img_deletar = Image.open('icone/deletar.png')
    img_limpar = Image.open('icone/limpar.png')
    img_importar = Image.open('icone/importar.png')
    img_exportar = Image.open('icone/exportar.png')
    img_receber = Image.open('icone/Receber.png')
    img_clientes = Image.open('icone/Aluguel.png')
    img_pagar = Image.open('icone/Banco.png')
    img_pagar_ct = Image.open('icone/carteira.png')
    img_receber_ct = Image.open('icone/pagar.png')
    img_mostrar_ct = Image.open('icone/mostrar.png')
    img_aberto = Image.open('icone/exportar.png')
    img_bloquear = Image.open('icone/trancado.png')
    busca_conta = Image.open('icone/carteira.png')

    global cbusca_contas,cimg_capturar, cbusca_conta, cimg_pagar, cimg_clientes, cimg_receber, cbusca_nt, cimg_add, cimg_salvar, cimg_novo, cimg_localizar, cimg_editar, cimg_cancelar, cimg_duplicar, cimg_deletar, cimg_limpar, cimg_importar, cimg_exportar, cimg_pagar_ct, cimg_receber_ct, cimg_mostrar_ct, cimg_aberto, cimg_bloquear
    cbusca_contas = Image.open('icone/pdf96.png')
    cbusca_nt = Image.open('icone/cnovo.png')
    cimg_add = Image.open('icone/adicionar.png')
    cimg_salvar = Image.open('icone/salvar94.png')
    cimg_novo = Image.open('icone/novo96.png')
    cimg_localizar = Image.open('icone/cvisualizar.png')
    cimg_editar = Image.open('icone/editar.png')
    cimg_cancelar = Image.open('icone/cancelar.png')
    cimg_duplicar = Image.open('icone/cduplicar.png')
    cimg_deletar = Image.open('icone/deletar.png')
    cimg_limpar = Image.open('icone/climpar.png')
    cimg_importar = Image.open('icone/cimportar.png')
    cimg_exportar = Image.open('icone/cexportar.png')
    cimg_receber = Image.open('icone/Receber.png')
    cimg_clientes = Image.open('icone/Aluguel.png')
    cimg_pagar = Image.open('icone/Banco.png')
    cimg_pagar_ct = Image.open('icone/carteira.png')
    cimg_receber_ct = Image.open('icone/pagar.png')
    cimg_mostrar_ct = Image.open('icone/mostrar.png')
    cimg_aberto = Image.open('icone/exportar.png')
    cimg_bloquear = Image.open('icone/trancado.png')
    cbusca_conta = Image.open('icone/carteira.png')
    cimg_capturar = Image.open('icone/capturar.png')
    cimg_capturar_f = Image.open('icone/capturar.png')
    criar_QR = Image.open('icone/qrcode.png')
    imagem_QR = Image.open('qrcode_logo.png')
    # Finalizando as imagens dos botões **************************************************************************************

    # Executando a janela-----------------------------------------------------
    janela.mainloop()


#Função de criação do Sistema de Controle*******************************************************************************
def userSYSTEM():
    # cores
    co0 = "#2e2d2b"  # Preta
    co1 = "#feffff"  # Branca
    co2 = "#e5e5e5"  # grey
    co3 = "#248eff"  # Verde
    co4 = "#403d3d"  # letra
    co5 = "#3152b7"  # azul
    co7 = "#d42e2b"  # vermelha
    co6 = "#378258"  # Verde novo
    co8 = "#263238"  # + verde
    co9 = "#e9edf5"  # + verde

    # Criando janela
    janela = Tk()
    janela.title("HIGHER")
    janela.iconbitmap('icone/sistema.ico')
    # janela.geometry('1360x780')
    janela.configure(background=co1)
    janela.rowconfigure([0, 1, 2, 3, 4, 5], weight=1)
    janela.columnconfigure([0], weight=1)
    # janela.resizable(width=FALSE, height=FALSE)

    style = Style(janela)
    style.theme_use("clam")

    # Criando Frames***********************************************************************************************************************************************************************
    frame_logo = Frame(janela, width=850, height=52, bg=co6)
    frame_logo.grid(row=0, column=0, pady=0, padx=0, columnspan=1, sticky=EW)

    ttk.Separator(janela, orient=HORIZONTAL).grid(row=1, columnspan=1, ipadx=680, sticky=EW)

    frame_dados = Frame(janela, width=850, height=65, bg=co1)
    frame_dados.grid(row=2, column=0, pady=0, padx=0, sticky=EW)

    ttk.Separator(janela, orient=HORIZONTAL).grid(row=3, columnspan=1, ipadx=680, sticky=EW)

    frame_detalhes = Frame(janela, width=1300, height=305, bg=co1)
    frame_detalhes.grid(row=4, column=0, pady=0, padx=10, sticky=EW)

    frame_tabela = Frame(janela, width=1300, height=185, bg=co1)
    frame_tabela.grid(row=5, column=0, pady=0, padx=10, sticky=EW)

    # Trabalhando no frame logo************************************************************************************************************************************************************
    app_lg = Image.open('icone/inventario.png')
    app_lg = app_lg.resize((50, 50))
    app_lg = ImageTk.PhotoImage(app_lg)
    app_logo = Label(frame_logo, image=app_lg, text=' SISTEMA DE CONTROLE', width=850, compound=LEFT, anchor=NW,
                     font=('Ivy 15 bold'), bg=co6, fg=co1)
    app_logo.grid(row=0, column=0, columnspan=1, sticky=NSEW)

    # *************************************************************************************************************************************************************************************

    # Criando a função de desativar botões*************************************************************************************************************************************************
    def botao_off(i):
        i.config(state='disabled')

    # Criando a função de ativar botões****************************************************************************************************************************************************
    def botao_on(i):
        i.config(state='normal')

    # Criando a tela de inicio*************************************************************************************************************************************************************
    def dashboard():
        # Seção de relatórios********************************************************************************************************************************************************************
        # Criando a Função de Busca
        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=35)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center",
                                  "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_referente():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE referente LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=95)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center",
                                  "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE local LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=150)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center",
                                  "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute('SELECT * FROM caixa WHERE data BETWEEN ? AND ?', (data,
                                                                                  data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=287, y=205)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center",
                                  "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()
            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------

        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=4, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_relatorio, anchor=CENTER, text='Procurar'.upper(),
                                width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=117, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW,
                            font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=4, y=70)
        caixa = ver_caixa()
        referente = []
        for i in caixa:
            referente.append(i[18])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=4, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_referente, anchor=CENTER,
                                          text='Procurar'.upper(), width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=117, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=4, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=4, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=117, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=4, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=4, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2,
                                          year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=147, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=287, y=205)

        # Fim da seção de relatórios********************************************************************************************************************************************************************

        # Criando os calculos para exibir no Dashboard***************************************************************************************************************************************************
        def receber():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'ALUGUEL'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente = '{valor_receber}' OR referente = '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Exibindo os resultados

                # Fechando a conexão com o banco de dados
                conn.close()
                if resultado[0][0] == None:
                    resultado = 0
                    return resultado
                else:
                    return resultado[0][0]
            except:
                return

        def pagar():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'ALUGUEL'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente != '{valor_receber}' AND referente != '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado1 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                if resultado1[0][0] == None:
                    resultado1 = 0
                    return resultado1
                else:
                    return resultado1[0][0]
            except:
                return

        def contrato():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = "SELECT count(local) FROM caixa"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                return resultado2[0][0]
            except:
                return

        # Criando botões do Dashboard********************************************************************************************************************************************************************
        global img_pagar, img_clientes, img_receber, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_pagar_ct, img_receber_ct, img_mostrar_ct
        # Mostrar o valor recebido dentro do Mês
        img_receber = Image.open('icone/Dinheiro.png')
        img_receber = img_receber.resize((62, 81))
        img_receber = ImageTk.PhotoImage(img_receber)
        card_receber = Button(frame_detalhes, command=dashboard, image=img_receber, text='', width=62, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_receber.place(x=410, y=40)
        l_card_receber = Label(frame_detalhes, text="    - Receitas -     \nR$ {:.2f}".format(receber()), width=15,
                               height=3, font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_receber.place(x=476, y=40)

        # Soma de despesas selecionadas
        def total_receita(event):
            valor_selecionado = e_receita.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_receber.configure(text=resultado)
                return resultado
            except:
                return

        receitas = ver_caixa()
        natureza = []
        for i in receitas:
            natureza.append(i[18])
        e_receita = ttk.Combobox(frame_detalhes, width=44, font=('Monolisa 8 bold'))
        e_receita['values'] = (natureza)
        e_receita.bind("<<ComboboxSelected>>", total_receita)
        e_receita.place(x=410, y=128)
        # ***********************************************************************************************************************************************************************************************
        # Mostrar o valor do gasto por mês
        img_pagar = Image.open('icone/Banco.png')
        img_pagar = img_pagar.resize((62, 81))
        img_pagar = ImageTk.PhotoImage(img_pagar)
        card_pagar = Button(frame_detalhes, command=dashboard, image=img_pagar, text='', width=62, compound=LEFT,
                            overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_pagar.place(x=712, y=40)
        l_card_pagar = Label(frame_detalhes, text="    - Despesas -     \nR$ {:.2f}".format(pagar()), width=15,
                             height=3, font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_pagar.place(x=778, y=40)

        # Soma de despesas selecionadas
        def total_despesa(event):
            valor_selecionado = e_despesa.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor_total,',', '.')) FROM caixa WHERE referente='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_pagar.configure(text=resultado)
                return resultado
            except:
                return

        despesas = ver_caixa()
        natureza = []
        for i in despesas:
            natureza.append(i[18])
        e_despesa = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_despesa['values'] = (natureza)
        e_despesa.bind("<<ComboboxSelected>>", total_despesa)
        e_despesa.place(x=712, y=128)
        # ************************************************************************************************************************************************************************************

        # Mostrar quantos fornecedores existem
        img_clientes = Image.open('icone/Aluguel.png')
        img_clientes = img_clientes.resize((62, 81))
        img_clientes = ImageTk.PhotoImage(img_clientes)
        card_fornecedor = Button(frame_detalhes, command=dashboard, image=img_clientes, text='', width=62,
                                 compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_fornecedor.place(x=1012, y=40)
        l_card_fornecedor = Label(frame_detalhes, text="- Operações -\n{}".format(contrato()), width=15, height=3,
                                  font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_fornecedor.place(x=1079, y=40)

        # Buscar os fornecedores que tiveram movimentação
        def contar_fornecedor(event):
            valor_selecionado = e_ativos.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT count(*) FROM caixa WHERE local='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_fornecedor.configure(text=resultado)
                return resultado
            except:
                return

        ativos = ver_caixa()
        ativo = []
        for i in ativos:
            ativo.append(i[3])
        e_ativos = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_ativos['values'] = (ativo)
        e_ativos.bind("<<ComboboxSelected>>", contar_fornecedor)
        e_ativos.place(x=1012, y=128)

        ##*******************************************************************************************************************************************************************************************
        # Criando os calculos para exibir no Dashboard***************************************************************************************************************************************************
        def receber_ct():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'LOCAÇÃO'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto = '{valor_receber}' OR objeto = '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Exibindo os resultados

                # Fechando a conexão com o banco de dados
                conn.close()
                if resultado[0][0] == None:
                    resultado = 0
                    return resultado
                else:
                    return resultado[0][0]
            except:
                return

        def pagar_ct():
            try:
                valor_receber = 'VENDA'
                valor_locacao = 'LOCAÇÃO'
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto != '{valor_receber}' AND objeto != '{valor_locacao}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado1 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                if resultado1[0][0] == None:
                    resultado1 = 0
                    return resultado1
                else:
                    return resultado1[0][0]
            except:
                return

        def contrato_ct():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = "SELECT count(cliente_contrato) FROM contrato"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                return resultado2[0][0]
            except:
                return

        # Criando botões do Dashboard********************************************************************************************************************************************************************
        # Mostrar o valor recebido dentro do Mês
        img_receber_ct = Image.open('icone/pagar.png')
        img_receber_ct = img_receber_ct.resize((62, 81))
        img_receber_ct = ImageTk.PhotoImage(img_receber_ct)
        card_receber_ct = Button(frame_detalhes, command=dashboard, image=img_receber_ct, text='', width=62,
                                 compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_receber_ct.place(x=410, y=178)
        l_card_receber_ct = Label(frame_detalhes, text="- Recebidos -\nR$ {:.2f}".format(receber_ct()), width=15,
                                  height=3,
                                  font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_receber_ct.place(x=476, y=178)

        # Soma de despesas selecionadas
        def total_receita_ct(event):
            valor_selecionado = e_receita_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_receber_ct.configure(text=resultado)
                return resultado
            except:
                return

        receitas = ver_contratos()
        natureza = []
        for i in receitas:
            natureza.append(i[3])
        e_receita_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_receita_ct['values'] = (natureza)
        e_receita_ct.bind("<<ComboboxSelected>>", total_receita_ct)
        e_receita_ct.place(x=410, y=266)
        # ***********************************************************************************************************************************************************************************************
        # Mostrar o valor do gasto por mês
        img_pagar_ct = Image.open('icone/carteira.png')
        img_pagar_ct = img_pagar_ct.resize((62, 81))
        img_pagar_ct = ImageTk.PhotoImage(img_pagar_ct)
        card_pagar = Button(frame_detalhes, command=dashboard, image=img_pagar_ct, text='', width=62, compound=LEFT,
                            overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_pagar.place(x=712, y=178)
        l_card_pagar_ct = Label(frame_detalhes, text="- Pagamentos -\nR$ {:.2f}".format(pagar_ct()), width=15, height=3,
                                font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_pagar_ct.place(x=778, y=178)

        # Soma de despesas selecionadas
        def total_despesa_ct(event):
            valor_selecionado = e_despesa_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE objeto='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_pagar_ct.configure(text=resultado)
                return resultado
            except:
                return

        despesas = ver_contratos()
        natureza = []
        for i in despesas:
            natureza.append(i[3])
        e_despesa_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_despesa_ct['values'] = (natureza)
        e_despesa_ct.bind("<<ComboboxSelected>>", total_despesa_ct)
        e_despesa_ct.place(x=712, y=266)
        # ************************************************************************************************************************************************************************************

        # Mostrar quantos fornecedores existem
        img_mostrar_ct = Image.open('icone/mostrar.png')
        img_mostrar_ct = img_mostrar_ct.resize((62, 81))
        img_mostrar_ct = ImageTk.PhotoImage(img_mostrar_ct)
        card_fornecedor_ct = Button(frame_detalhes, command=dashboard, image=img_mostrar_ct, text='', width=62,
                                    compound=LEFT,
                                    overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        card_fornecedor_ct.place(x=1012, y=178)
        l_card_fornecedor_ct = Label(frame_detalhes, text="- Contratos -\n{}".format(contrato_ct()), width=15, height=3,
                                     font=('Ivy 17 bold'), bg=co6, fg=co1)
        l_card_fornecedor_ct.place(x=1079, y=178)

        # Buscar os fornecedores que tiveram movimentação
        def contar_clientes_ct(event):
            valor_selecionado = e_ativos_ct.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT count(*) FROM contrato WHERE cliente_contrato='{valor_selecionado}'"

                cursor.execute(query)
                # Recuperando os resultados
                resultado2 = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()
                # Exibindo os resultados
                resultado = resultado2[0][0]
                l_card_fornecedor_ct.configure(text=resultado)
                return resultado
            except:
                return

        ativos = ver_contratos()
        ativo = []
        for i in ativos:
            ativo.append(i[5])
        e_ativos_ct = ttk.Combobox(frame_detalhes, width=44, font=('Ivy 8 bold'))
        e_ativos_ct['values'] = (ativo)
        e_ativos_ct.bind("<<ComboboxSelected>>", contar_clientes_ct)
        e_ativos_ct.place(x=1012, y=266)

        # Tabela Caixa
        def mostrar_caixa():
            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                             font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                           'Cidade', 'CEP',
                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                           'Tipo de Pagamento',
                           'Natureza', 'Descrição', 'Telefone', 'Status']

            df_list = ver_caixa()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_caixa

            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_caixa.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                  "nw", "center",
                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40]
            n = 0

            for col in list_header:
                tree_caixa.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_caixa.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_caixa.insert('', 'end', values=item)

        mostrar_caixa()

    # Fim dos calculos para exibir no Dashboard*********************************************************************************************************************************************

    # Função da tela de caixa----------------------------------------------------------------------
    def caixa():
        # Função novo caixa
        def novo_caixa():

            data = data_atual.get()
            hora = e_hora.get()
            local = e_local.get().upper()
            nome = e_nome_caixa.get().upper()
            cpf = e_cpf_cnpj.get()
            ie = e_ie_cliente.get()
            endereco = e_endereco_cliente.get().upper()
            bairro = e_bairro_cliente.get().upper()
            cidade = e_cidade_cliente.get().upper()
            cep = e_cep_cliente.get()
            estado = c_estado_cliente.get()
            produto = e_produto_caixa.get()
            quantidade = e_quantidade_caixa.get()
            valor = e_valor_caixa.get()
            desconto = e_valor_desconto.get()
            valor_real = e_valor_real.get()
            tipo_pagamento = e_tipo_pagamento.get().upper()
            referente = e_referente.get().upper()
            status = e_status.get().upper()
            telefone = e_telefone_cliente.get().upper()
            status_caixa = e_status_caixa.get().upper()

            lista = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto, quantidade,
                     valor,
                     desconto, valor_real, tipo_pagamento, referente, status, telefone, status_caixa]

            # Verificando caso algum campo esteja vazio ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return

            # Inserindo os dados no banco de dados
            criar_caixa(lista)

            # Mostrando a mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso')

            # limpando os campos de entrada
            data_atual.delete(0, END)
            e_hora.delete(0, END)
            e_local.delete(0, END)
            e_nome_caixa.delete(0, END)
            e_cpf_cnpj.delete(0, END)
            e_ie_cliente.delete(0, END)
            e_endereco_cliente.delete(0, END)
            e_bairro_cliente.delete(0, END)
            e_cidade_cliente.delete(0, END)
            e_cep_cliente.delete(0, END)
            c_estado_cliente.delete(0, END)
            e_produto_caixa.delete(0, END)
            e_quantidade_caixa.delete(0, END)
            e_valor_caixa.delete(0, END)
            e_valor_desconto.delete(0, END)
            e_valor_real.delete(0, END)
            e_tipo_pagamento.delete(0, END)
            e_referente.delete(0, END)
            e_status.delete(0, END)
            e_telefone_cliente.delete(0, END)
            e_status_caixa.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_caixa()

        # Função atualizar caixa
        def update_caixa():
            try:
                botao_off(botao_novo_cx)
                botao_off(botao_atualizar_cx)
                tree_itens = tree_caixa.focus()
                tree_dicionario = tree_caixa.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                data_atual.delete(0, END)
                e_hora.delete(0, END)
                e_local.delete(0, END)
                e_nome_caixa.delete(0, END)
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_produto_caixa.delete(0, END)
                e_quantidade_caixa.delete(0, END)
                e_valor_caixa.delete(0, END)
                e_valor_desconto.delete(0, END)
                e_valor_real.delete(0, END)
                e_tipo_pagamento.delete(0, END)
                e_referente.delete(0, END)
                e_status.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_status_caixa.delete(0, END)

                # Inserindo os valores nos campos de entrada
                data_atual.insert(0, tree_lista[1])
                e_hora.insert(0, tree_lista[2])
                e_local.insert(0, tree_lista[3])
                e_nome_caixa.insert(0, tree_lista[4])
                e_cpf_cnpj.insert(0, tree_lista[5])
                e_ie_cliente.insert(0, tree_lista[6])
                e_endereco_cliente.insert(0, tree_lista[7])
                e_bairro_cliente.insert(0, tree_lista[8])
                e_cidade_cliente.insert(0, tree_lista[9])
                e_cep_cliente.insert(0, tree_lista[10])
                c_estado_cliente.insert(0, tree_lista[11])
                e_produto_caixa.insert(0, tree_lista[12])
                e_quantidade_caixa.insert(0, tree_lista[13])
                e_valor_caixa.insert(0, tree_lista[14])
                e_valor_desconto.insert(0, tree_lista[15])
                e_valor_real.insert(0, tree_lista[16])
                e_tipo_pagamento.insert(0, tree_lista[17])
                e_referente.insert(0, tree_lista[18])
                e_status.insert(0, tree_lista[19])
                e_telefone_cliente.insert(0, tree_lista[20])
                e_status_caixa.insert(0, tree_lista[21])

                def update():
                    data = data_atual.get()
                    hora = e_hora.get()
                    local = e_local.get().upper()
                    nome = e_nome_caixa.get().upper()
                    cpf = e_cpf_cnpj.get()
                    ie = e_ie_cliente.get()
                    endereco = e_endereco_cliente.get().upper()
                    bairro = e_bairro_cliente.get().upper()
                    cidade = e_cidade_cliente.get().upper()
                    cep = e_cep_cliente.get()
                    estado = c_estado_cliente.get()
                    produto = e_produto_caixa.get()
                    quantidade = e_quantidade_caixa.get()
                    valor = e_valor_caixa.get()
                    desconto = e_valor_desconto.get()
                    valor_real = e_valor_real.get()
                    tipo_pagamento = e_tipo_pagamento.get().upper()
                    referente = e_referente.get().upper()
                    status = e_status.get().upper()
                    telefone = e_telefone_cliente.get().upper()
                    status_caixa = e_status_caixa.get().upper()

                    lista = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto,
                             quantidade,
                             valor,
                             desconto, valor_real, tipo_pagamento, referente, status, telefone, status_caixa, valor_id]

                    # Verificando caso algum campo esteja vazio ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return

                    # Atualizando os dados no banco de dados
                    atualizar_caixa(lista)

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram atualizados com sucesso')

                    # limpando os campos de entrada
                    data_atual.delete(0, END)
                    e_hora.delete(0, END)
                    e_local.delete(0, END)
                    e_nome_caixa.delete(0, END)
                    e_cpf_cnpj.delete(0, END)
                    e_ie_cliente.delete(0, END)
                    e_endereco_cliente.delete(0, END)
                    e_bairro_cliente.delete(0, END)
                    e_cidade_cliente.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    c_estado_cliente.delete(0, END)
                    e_produto_caixa.delete(0, END)
                    e_quantidade_caixa.delete(0, END)
                    e_valor_caixa.delete(0, END)
                    e_valor_desconto.delete(0, END)
                    e_valor_real.delete(0, END)
                    e_tipo_pagamento.delete(0, END)
                    e_referente.delete(0, END)
                    e_status.delete(0, END)
                    e_telefone_cliente.delete(0, END)
                    e_status_caixa.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_caixa()
                    # Destruindo o botão após salvar
                    botao_salvar.destroy()
                    botao_on(botao_novo_cx)
                    botao_on(botao_atualizar_cx)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função atualizar caixa
        def visualizar_caixa():
            botao_off(botao_novo_cx)
            botao_off(botao_atualizar_cx)
            botao_on(botao_duplicar)
            try:
                tree_itens = tree_caixa.focus()
                tree_dicionario = tree_caixa.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                data_atual.delete(0, END)
                e_hora.delete(0, END)
                e_local.delete(0, END)
                e_nome_caixa.delete(0, END)
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_produto_caixa.delete(0, END)
                e_quantidade_caixa.delete(0, END)
                e_valor_caixa.delete(0, END)
                e_valor_desconto.delete(0, END)
                e_valor_real.delete(0, END)
                e_tipo_pagamento.delete(0, END)
                e_referente.delete(0, END)
                e_status.delete(0, END)
                e_telefone_cliente.delete(0, END)
                e_status_caixa.delete(0, END)

                # Inserindo os valores nos campos de entrada
                data_atual.insert(0, tree_lista[1])
                e_hora.insert(0, tree_lista[2])
                e_local.insert(0, tree_lista[3])
                e_nome_caixa.insert(0, tree_lista[4])
                e_cpf_cnpj.insert(0, tree_lista[5])
                e_ie_cliente.insert(0, tree_lista[6])
                e_endereco_cliente.insert(0, tree_lista[7])
                e_bairro_cliente.insert(0, tree_lista[8])
                e_cidade_cliente.insert(0, tree_lista[9])
                e_cep_cliente.insert(0, tree_lista[10])
                c_estado_cliente.insert(0, tree_lista[11])
                e_produto_caixa.insert(0, tree_lista[12])
                e_quantidade_caixa.insert(0, tree_lista[13])
                e_valor_caixa.insert(0, tree_lista[14])
                e_valor_desconto.insert(0, tree_lista[15])
                e_valor_real.insert(0, tree_lista[16])
                e_tipo_pagamento.insert(0, tree_lista[17])
                e_referente.insert(0, tree_lista[18])
                e_status.insert(0, tree_lista[19])
                e_telefone_cliente.insert(0, tree_lista[20])
                e_status_caixa.insert(0, tree_lista[21])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar caixa
        def limpar_caixa():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função caixa
            caixa()

        # Função deletar caixa
        def delete_caixa():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_caixa.focus()
                    tree_dicionario = tree_caixa.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # Deletar os dados no bando de dados
                    deletar_caixa([valor_id])

                    # Mostrando a mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # Mostrando os valores na tabela
                    mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um item da tabela')

        # Criando a Função de Busca
        def buscar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=825, y=35)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center",
                                  "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40,
                                 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_cx)
            botao_on(botao_atualizar_cx)
            botao_off(botao_duplicar)

        def exportar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM caixa"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                               'Cidade', 'CEP',
                               'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                               'Tipo de Pagamento',
                               'Natureza', 'Descrição', 'Telefone', 'Status']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_caixa.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        def importar_caixa():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM caixa"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_caixa.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['id']
                    data = row['Data']
                    hora = row['hora']
                    local = row['Local']
                    nome = row['Nome']
                    cpf = row['CPF/CPNJ']
                    ie = row['IE']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    produto = row['Produto']
                    quantidade = row['Quantidade']
                    valor = row['Valor']
                    desconto = row['Desconto']
                    total = row['Valor Total']
                    tipo = row['Tipo de Pagamento']
                    natureza = row['Natureza']
                    descricao = row['Descrição']
                    telefone = row['Telefone']
                    status = row['Status']

                    tabela = [data, hora, local, nome, cpf, ie, endereco, bairro, cidade, cep, estado, produto,
                              quantidade,
                              valor, desconto, total, tipo, natureza, descricao, telefone, status]

                    # Inserindo os dados no banco de dados
                    criar_caixa(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        data = datetime.today()
        ano_atual = data.year
        # Criando campos de entrada
        l_data_atual = Label(frame_detalhes, text="Data:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_atual.place(x=4, y=10)
        data_atual = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2, year=ano_atual,
                               locale="pt_br")
        data_atual.place(x=57, y=10)

        l_hora = Label(frame_detalhes, text="Hora:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_hora.place(x=147, y=10)
        e_hora = Entry(frame_detalhes, width=10, justify='left', relief='solid')
        e_hora.place(x=187, y=10)

        fornecedores = ver_fornecedor()
        local = []
        for i in fornecedores:
            local.append(i[1])
        l_local = Label(frame_detalhes, text="Origem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                        fg=co4)
        l_local.place(x=257, y=10)
        e_local = ttk.Combobox(frame_detalhes, width=42, font=('Ivy 8 bold'))
        e_local['values'] = (local)
        e_local.place(x=311, y=10)

        def dados_cliente(event):
            try:
                valor_selecionado = e_nome_caixa.get()
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT * FROM cliente WHERE nome_cliente ='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Fechando a conexão com o banco de dados
                conn.close()

                # Exibindo os resultados
                e_cpf_cnpj.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_telefone_cliente.delete(0, END)

                e_cpf_cnpj.insert(0, resultado[0][8])
                e_ie_cliente.insert(0, resultado[0][9])
                e_endereco_cliente.insert(0, resultado[0][3])
                e_bairro_cliente.insert(0, resultado[0][4])
                e_cidade_cliente.insert(0, resultado[0][5])
                e_cep_cliente.insert(0, resultado[0][6])
                c_estado_cliente.insert(0, resultado[0][7])
                e_telefone_cliente.insert(0, resultado[0][12])


            except:
                return

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_nome_caixa = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nome_caixa.place(x=4, y=40)
        e_nome_caixa = ttk.Combobox(frame_detalhes, width=40, font=('Ivy 8 bold'))
        e_nome_caixa['values'] = (cliente)
        e_nome_caixa.bind("<<ComboboxSelected>>", dados_cliente)
        e_nome_caixa.place(x=57, y=40)

        cpfs = ver_fornecedor()
        cpf = []
        for i in cpfs:
            cpf.append(i[8])
        l_cpf_cnpj = Label(frame_detalhes, text="CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cpf_cnpj.place(x=330, y=40)
        e_cpf_cnpj = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cpf_cnpj['values'] = (cpf)
        e_cpf_cnpj.place(x=413, y=40)

        ies = ver_fornecedor()
        ie = []
        for i in ies:
            ie.append(i[9])
        l_ie_cliente = Label(frame_detalhes, text="IE:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_cliente.place(x=4, y=70)
        e_ie_cliente = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_ie_cliente['values'] = (ie)
        e_ie_cliente.place(x=57, y=70)

        enderecos = ver_fornecedor()
        endereco = []
        for i in enderecos:
            endereco.append(i[3])
        l_endereco_cliente = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_endereco_cliente.place(x=177, y=70)
        e_endereco_cliente = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_endereco_cliente['values'] = (endereco)
        e_endereco_cliente.place(x=252, y=70)

        l_bairro_cliente = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_bairro_cliente.place(x=410, y=70)
        e_bairro_cliente = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_bairro_cliente.place(x=456, y=70)

        l_cidade_cliente = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cidade_cliente.place(x=4, y=100)
        e_cidade_cliente = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_cidade_cliente.place(x=57, y=100)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=202, y=100)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=20, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=242, y=100)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        l_estado_cliente = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_estado_cliente.place(x=392, y=100)
        c_estado_cliente = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        c_estado_cliente['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ',
            'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_cliente.place(x=446, y=100)

        def formatar_telefone(event):
            telefone = e_telefone_cliente.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_cliente.delete(0, END)
            e_telefone_cliente.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_cliente = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_telefone_cliente.place(x=4, y=130)
        e_telefone_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=24, justify='left',
                                   relief='solid')
        e_telefone_cliente.place(x=64, y=130)

        e_telefone_cliente.bind('<KeyRelease>', formatar_telefone)

        l_quantidade_caixa = Label(frame_detalhes, text="Quantidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_quantidade_caixa.place(x=215, y=130)
        e_quantidade_caixa = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_quantidade_caixa.place(x=295, y=130)

        l_valor_caixa = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_caixa.place(x=450, y=130)
        e_valor_caixa = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_valor_caixa.place(x=492, y=130)

        l_valor_desconto = Label(frame_detalhes, text="Desconto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_desconto.place(x=4, y=160)
        e_valor_desconto = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_valor_desconto.place(x=69, y=160)

        l_valor_real = Label(frame_detalhes, text="Valor Total:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_real.place(x=187, y=160)
        e_valor_real = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_valor_real.place(x=263, y=160)

        l_tipo_pagamento = Label(frame_detalhes, text="Tipo de Pagto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_tipo_pagamento.place(x=400, y=160)
        e_tipo_pagamento = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_tipo_pagamento.place(x=492, y=160)

        l_referente = Label(frame_detalhes, text="Natureza:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_referente.place(x=4, y=190)
        e_referente = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_referente['values'] = (
            'Compra', 'Venda', 'Locação', 'Financeamento', 'Emprestimo', 'Consignação', 'Doação', 'Outros')
        e_referente.place(x=77, y=190)

        produtos = ver_produto()
        produto = []
        for i in produtos:
            produto.append(i[1])
        l_produto_caixa = Label(frame_detalhes, text="Produto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_caixa.place(x=240, y=190)
        e_produto_caixa = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_produto_caixa['values'] = (produto)
        e_produto_caixa.place(x=293, y=190)

        l_status_caixa = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status_caixa.place(x=383, y=220)
        e_status_caixa = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_status_caixa['values'] = ('ABERTO', 'PAGO')
        e_status_caixa.place(x=444, y=220)

        l_status = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=4, y=220)
        e_status = Entry(frame_detalhes, width=47, justify='left', relief='solid')
        e_status.place(x=76, y=220)

        # linha sepratoria--------------------------------------------------------
        l_linha = Label(frame_detalhes, relief=GROOVE, text='h', width=1, height=100, anchor=NW, font=('Ivy 1'), bg=co0,
                        fg=co0)
        l_linha.place(x=610, y=10)
        l_linha = Label(frame_detalhes, relief=GROOVE, text='h', width=1, height=100, anchor=NW, font=('Ivy 1'), bg=co1,
                        fg=co0)
        l_linha.place(x=609, y=10)

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=627, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=630, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_caixa, anchor=CENTER, text='Procurar'.upper(), width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=757, y=35)

        # Botões-----------------------------------------------------------------------------------------------
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_cx["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_cx = Button(frame_detalhes, command=novo_caixa, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_cx.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_cx["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_cx["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_cx = Button(frame_detalhes, command=update_caixa, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_cx.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_caixa, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_caixa, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_caixa, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_caixa, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_caixa, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_cx.bind("<Enter>", button_houver)
        botao_novo_cx.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_cx.bind("<Enter>", button_houver_editar)
        botao_atualizar_cx.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_cx)
        botao_off(botao_atualizar_cx)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela Caixa
        def mostrar_caixa():
            app_nome = Label(frame_tabela, text="", height=1, pady=0, padx=0, relief="flat", anchor=NW,
                             font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço', 'Bairro',
                           'Cidade', 'CEP',
                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                           'Tipo de Pagamento',
                           'Natureza', 'Descrição', 'Telefone', 'Status']

            df_list = ver_caixa()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_caixa

            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_caixa.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw", "nw",
                  "nw", "center",
                  "center", "center", "center", "center", "center", "center", "center", "center", "center"]
            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40]
            n = 0

            for col in list_header:
                tree_caixa.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_caixa.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_caixa.insert('', 'end', values=item)

        mostrar_caixa()

    # Função da tela de clientes ------------------------------------------------------------------
    def clientes():
        # Criando frames para tabelas
        frame_tabela_cliente = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_cliente.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Clientes-----------------------------------------------------------
        # função novo cliente
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def cliente_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((190, 190))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=447, y=20)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=467, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=cliente_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=467, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            cliente_imagem()

        def novo_cliente():
            # Teste para verificar se foi escolhido a imagem ou não
            global imagem, l_imagem, imagem_string, foto
            if foto != 1:
                imagem_string = ""
            nome = e_nome_cliente.get()
            imagem = imagem_string
            endereco = e_endereco_cliente.get()
            bairro = e_bairro_cliente.get()
            cidade = e_cidade_cliente.get()
            cep = e_cep_cliente.get()
            estado = c_estado_cliente.get()
            cpf = e_cpf_cliente.get()
            ie = e_ie_cliente.get()
            email = e_email_cliente.get()
            e_civil = c_e_civil.get()
            telefone = e_telefone_cliente.get()
            nome_cliente = nome

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM cliente WHERE nome_cliente = ?"
            cursor.execute(consulta, (nome_cliente,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone]
            # Verificando se os valores estão dentro do solicitado
            for i in lista:
                if nome == "" or cpf == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if nome in resultado:
                        messagebox.showerror('Erro', 'Registro já existente')
                        return

            # Inserindo os dados
            criar_cliente(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_nome_cliente.delete(0, END)
            e_endereco_cliente.delete(0, END)
            e_bairro_cliente.delete(0, END)
            e_cidade_cliente.delete(0, END)
            e_cep_cliente.delete(0, END)
            c_estado_cliente.delete(0, END)
            e_cpf_cliente.delete(0, END)
            e_ie_cliente.delete(0, END)
            e_email_cliente.delete(0, END)
            c_e_civil.delete(0, END)
            e_telefone_cliente.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_clientes()

        # função atualizar cliente
        def update_cliente():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo)
                botao_off(botao_atualizar)
                botao_off(botao_ver)
                botao_off(botao_limpar)
                botao_off(botao_duplicar)
                tree_itens = tree_cliente.focus()
                tree_dicionario = tree_cliente.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_nome_cliente.insert(0, tree_lista[1])

                e_endereco_cliente.insert(0, tree_lista[3])
                e_bairro_cliente.insert(0, tree_lista[4])
                e_cidade_cliente.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                c_estado_cliente.insert(0, tree_lista[7])
                e_cpf_cliente.insert(0, tree_lista[8])
                e_ie_cliente.insert(0, tree_lista[9])
                e_email_cliente.insert(0, tree_lista[10])
                c_e_civil.insert(0, tree_lista[11])
                e_telefone_cliente.insert(0, tree_lista[12])

                imagem = tree_lista[2]
                if imagem == "":
                    imagem = tree_lista[2]
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                # Função para ativar o batão de busca de imagens
                def buscar_foto():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    botao_on(botao_carregar)
                    return foto

                # Função para escolher a imagem
                def cliente_imagem():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    imagem = fd.askopenfilename()
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                    botao_carregar['text'] = 'Trocar de foto'.upper()

                botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                                    width=20,
                                    compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_foto.place(x=467, y=valor_y_f)
                botao_carregar = Button(frame_detalhes, command=cliente_imagem, anchor=CENTER,
                                        text='Carregar Foto'.upper(),
                                        width=20,
                                        compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_carregar.place(x=467, y=valor_y_b)
                botao_off(botao_carregar)
                if foto != 1:
                    imagem_string = ""

                if foto == 1:
                    return

                # função atualizar
                def update():
                    # Teste para verificar se foi escolhido a imagem ou não
                    global imagem, l_imagem, imagem_string, foto
                    if foto != 1:
                        imagem_string = ""
                    nome = e_nome_cliente.get()
                    imagem = imagem_string
                    endereco = e_endereco_cliente.get()
                    bairro = e_bairro_cliente.get()
                    cidade = e_cidade_cliente.get()
                    cep = e_cep_cliente.get()
                    estado = c_estado_cliente.get()
                    cpf = e_cpf_cliente.get()
                    ie = e_ie_cliente.get()
                    email = e_email_cliente.get()
                    e_civil = c_e_civil.get()
                    telefone = e_telefone_cliente.get()

                    lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if nome == "" or cpf == "":
                            messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                            return
                    # Inserindo os dados
                    atualizar_cliente(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_nome_cliente.delete(0, END)
                    e_endereco_cliente.delete(0, END)
                    e_bairro_cliente.delete(0, END)
                    e_cidade_cliente.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    c_estado_cliente.delete(0, END)
                    e_cpf_cliente.delete(0, END)
                    e_ie_cliente.delete(0, END)
                    e_email_cliente.delete(0, END)
                    c_e_civil.delete(0, END)
                    e_telefone_cliente.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_clientes()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo)
                    botao_on(botao_atualizar)
                    botao_on(botao_ver)
                    botao_on(botao_limpar)
                    botao_on(botao_duplicar)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar cliente
        def limpar_cliente():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            clientes()

        # Função para visualizar clientes
        def visualizar_cliente():
            botao_on(botao_duplicar)
            botao_off(botao_novo)
            botao_off(botao_atualizar)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_cliente.focus()
                tree_dicionario = tree_cliente.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_nome_cliente.delete(0, END)
                e_endereco_cliente.delete(0, END)
                e_bairro_cliente.delete(0, END)
                e_cidade_cliente.delete(0, END)
                e_cep_cliente.delete(0, END)
                c_estado_cliente.delete(0, END)
                e_cpf_cliente.delete(0, END)
                e_ie_cliente.delete(0, END)
                e_email_cliente.delete(0, END)
                c_e_civil.delete(0, END)
                e_telefone_cliente.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_nome_cliente.insert(0, tree_lista[1])

                e_endereco_cliente.insert(0, tree_lista[3])
                e_bairro_cliente.insert(0, tree_lista[4])
                e_cidade_cliente.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                c_estado_cliente.insert(0, tree_lista[7])
                e_cpf_cliente.insert(0, tree_lista[8])
                e_ie_cliente.insert(0, tree_lista[9])
                e_email_cliente.insert(0, tree_lista[10])
                c_e_civil.insert(0, tree_lista[11])
                e_telefone_cliente.insert(0, tree_lista[12])

                imagem = tree_lista[2]
                if imagem == "":
                    return
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((190, 190))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo)
            botao_on(botao_atualizar)
            botao_off(botao_duplicar)

        # Função deletar Cliente
        def delete_cliente():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_cliente.focus()
                    tree_dicionario = tree_cliente.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_cliente([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_clientes()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para importar novos clientes
        def importar_clientes():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM cliente"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_cliente.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    nome = row['Nome']
                    imagem = row['Imagem']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    cpf = row['CPF/CNPJ']
                    ie = row['IE']
                    email = row['E-mail']
                    e_civil = row['Estado Civil']
                    telefone = row['Telefone']

                    tabela = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone]

                    # Inserindo os dados no banco de dados
                    criar_cliente(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_clientes()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de clientes
        def exportar_clientes():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM cliente"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Nome', 'Imagem',
                               'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail',
                               'Estado Civil', 'Telefone']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_cliente.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Tabela Clientes--------------------------------------------------------------------------------------------------
        def mostrar_clientes():
            app_nome = Label(frame_tabela_cliente, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Nome', 'Imagem',
                           'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail', 'Estado Civil',
                           'Telefone']

            df_list = ver_clientes()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_cliente

            tree_cliente = ttk.Treeview(frame_tabela_cliente, selectmode="extended", columns=list_header,
                                        show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_cliente, orient="vertical", command=tree_cliente.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_cliente, orient="horizontal", command=tree_cliente.xview)

            tree_cliente.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_cliente.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_cliente.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "center", "center", "nw", "nw", "center", "center", "nw", "nw", "center", "center",
                  "center"]
            h = [30, 150, 80, 150, 60, 80, 80, 60, 80, 80, 150, 80, 100]
            n = 0

            for col in list_header:
                tree_cliente.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_cliente.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_cliente.insert('', 'end', values=item)

        mostrar_clientes()

        # Criando Itens da Tela de Clientes*********************************************************************************************************************************************
        l_nome = Label(frame_detalhes, text="Nome do cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_cliente = Entry(frame_detalhes, width=45, justify='left', relief='solid')
        e_nome_cliente.place(x=117, y=10)

        l_endereco_cliente = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_endereco_cliente.place(x=4, y=40)
        e_endereco_cliente = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_endereco_cliente.place(x=77, y=40)

        l_bairro_cliente = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_bairro_cliente.place(x=220, y=40)
        e_bairro_cliente = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_bairro_cliente.place(x=267, y=40)

        l_cidade_cliente = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cidade_cliente.place(x=4, y=70)
        e_cidade_cliente = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_cidade_cliente.place(x=77, y=70)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=220, y=70)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=20, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=267, y=70)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        def aplicar_mascara_cpf(event):
            cpf = e_cpf_cliente.get()
            cpf_formatado = ''

            # Remover caracteres diferentes de números do CPF
            cpf = ''.join(filter(str.isdigit, cpf))

            # Aplicar a máscara de CPF
            if len(cpf) <= 3:
                cpf_formatado = cpf
            elif len(cpf) <= 6:
                cpf_formatado = cpf[:3] + '.' + cpf[3:]
            elif len(cpf) <= 11:
                cpf_formatado = cpf[:3] + '.' + cpf[3:6] + '.' + cpf[6:9] + '-' + cpf[9:]
            elif len(cpf) > 11:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]
            else:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]

            # Atualizar o texto da entry com o CPF formatado
            e_cpf_cliente.delete(0, END)
            e_cpf_cliente.insert(0, cpf_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 18
            if len(P) <= 18:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_cpf_cliente = Label(frame_detalhes, text="CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cpf_cliente.place(x=4, y=100)
        e_cpf_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=23, justify='left',
                              relief='solid')
        e_cpf_cliente.place(x=77, y=100)

        e_cpf_cliente.bind("<KeyRelease>", aplicar_mascara_cpf)

        l_estado_cliente = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_estado_cliente.place(x=220, y=100)
        c_estado_cliente = ttk.Combobox(frame_detalhes, width=17, font=('Ivy 8 bold'))
        c_estado_cliente['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ',
            'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_cliente.place(x=268, y=100)

        l_ie_cliente = Label(frame_detalhes, text="I.E.:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_cliente.place(x=4, y=130)
        e_ie_cliente = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ie_cliente.place(x=77, y=130)

        l_email_cliente = Label(frame_detalhes, text="E-mail:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_email_cliente.place(x=177, y=130)
        e_email_cliente = Entry(frame_detalhes, width=27, justify='left', relief='solid')
        e_email_cliente.place(x=227, y=130)

        l_e_civil = Label(frame_detalhes, text="Estado Civil:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_e_civil.place(x=4, y=160)
        c_e_civil = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        c_e_civil['values'] = ('Casado(a)', 'Solteiro(a)', 'Outros')
        c_e_civil.place(x=87, y=160)

        def formatar_telefone(event):
            telefone = e_telefone_cliente.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_cliente.delete(0, END)
            e_telefone_cliente.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_cliente = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_telefone_cliente.place(x=187, y=160)
        e_telefone_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=24, justify='left',
                                   relief='solid')
        e_telefone_cliente.place(x=247, y=160)

        e_telefone_cliente.bind('<KeyRelease>', formatar_telefone)

        # Criando os botões da tela**********************************************************************************************************************

        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo = Button(frame_detalhes, command=novo_cliente, image=busca_nt, text='', width=30, compound=LEFT,
                            overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar = Button(frame_detalhes, command=update_cliente, image=img_editar, text='', width=30,
                                 compound=LEFT,
                                 overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_cliente, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_cliente, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_cliente, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_clientes, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_clientes, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo.bind("<Enter>", button_houver)
        botao_novo.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar.bind("<Enter>", button_houver_editar)
        botao_atualizar.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo)
        botao_off(botao_atualizar)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_nome_cliente.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_cidade_cliente.get()  # Cidade do Pagador
            estado = c_estado_cliente.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                        br_executar.place(x=810, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=810, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=810, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=444, y=40)
            e_texto = Entry(frame_detalhes, width=40, justify='left', relief='solid')
            e_texto.place(x=564, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=810, y=40)

        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=444, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=564, y=10)

    # Função da tela de fornecedores---------------------------------------------------------------
    def fornecedores():
        # Criando frames para tabelas
        frame_tabela_fornecedor = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_fornecedor.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Fornecedor-----------------------------------------------------------
        # Função novo fornecedor
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def fornecedor_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=687, y=160)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=544, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=fornecedor_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=544, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            fornecedor_imagem()

            imagem = imagem_string

        def novo_fornecedor():
            try:
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto
                if foto != 1:
                    imagem_string = ""
                nome = e_nome_fornecedor.get()
                imagem = imagem_string
                endereco = e_endereco_fornecedor.get()
                bairro = e_bairro_fornecedor.get()
                cidade = e_cidade_fornecedor.get()
                cep = e_cep_fornecedor.get()
                estado = c_estado_fornecedor.get()
                cpf = e_cpf_fornecedor.get()
                ie = e_ie_fornecedor.get()
                email = e_email_fornecedor.get()
                e_civil = c_e_civil_fornecedor.get()
                telefone = e_telefone_fornecedor.get()

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                cursor.execute(consulta, (nome,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone]

                # Verificando se os valores estão vazios ou não
                if nome == "" or cpf == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if nome in resultado:
                        messagebox.showerror('Erro', "Registro já existente")
                        return

                # Inserindo os dados
                criar_fornecedor(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_nome_fornecedor.delete(0, END)

                e_endereco_fornecedor.delete(0, END)
                e_bairro_fornecedor.delete(0, END)
                e_cidade_fornecedor.delete(0, END)
                e_cep_fornecedor.delete(0, END)
                c_estado_fornecedor.delete(0, END)
                e_cpf_fornecedor.delete(0, END)
                e_ie_fornecedor.delete(0, END)
                e_email_fornecedor.delete(0, END)
                c_e_civil_fornecedor.delete(0, END)
                e_telefone_fornecedor.delete(0, END)
                # Mostrando os valores na tabela
                mostrar_fornecedores()


            except IndexError:
                messagebox.showerror('Erro', 'Preencha todos os campo obrigatórios')

        # função atualizar fornecedor
        def update_fornecedor():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_f)
                botao_off(botao_atualizar_f)
                tree_itens = tree_fornecedor.focus()
                tree_dicionario = tree_fornecedor.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_nome_fornecedor.insert(0, tree_lista[1])

                e_endereco_fornecedor.insert(0, tree_lista[3])
                e_bairro_fornecedor.insert(0, tree_lista[4])
                e_cidade_fornecedor.insert(0, tree_lista[5])
                e_cep_fornecedor.insert(0, tree_lista[6])
                c_estado_fornecedor.insert(0, tree_lista[7])
                e_cpf_fornecedor.insert(0, tree_lista[8])
                e_ie_fornecedor.insert(0, tree_lista[9])
                e_email_fornecedor.insert(0, tree_lista[10])
                c_e_civil_fornecedor.insert(0, tree_lista[11])
                e_telefone_fornecedor.insert(0, tree_lista[12])

                imagem = tree_lista[2]

                # função atualizar
                def update():
                    nome = e_nome_fornecedor.get()
                    imagem = ""
                    endereco = e_endereco_fornecedor.get()
                    bairro = e_bairro_fornecedor.get()
                    cidade = e_cidade_fornecedor.get()
                    cep = e_cep_fornecedor.get()
                    estado = c_estado_fornecedor.get()
                    cpf = e_cpf_fornecedor.get()
                    ie = e_ie_fornecedor.get()
                    email = e_email_fornecedor.get()
                    e_civil = c_e_civil_fornecedor.get()
                    telefone = e_telefone_fornecedor.get()

                    lista = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone,
                             valor_id]

                    # Verificando se os valores estão vazios ou não
                    # for i in lista:
                    if nome == "" or cpf == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                    # Inserindo os dados
                    atualizar_fornecedor(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_nome_fornecedor.delete(0, END)
                    e_endereco_fornecedor.delete(0, END)
                    e_bairro_fornecedor.delete(0, END)
                    e_cidade_fornecedor.delete(0, END)
                    e_cep_fornecedor.delete(0, END)
                    c_estado_fornecedor.delete(0, END)
                    e_cpf_fornecedor.delete(0, END)
                    e_ie_fornecedor.delete(0, END)
                    e_email_fornecedor.delete(0, END)
                    c_e_civil_fornecedor.delete(0, END)
                    e_telefone_fornecedor.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_fornecedores()

                    # destruindo o botão salvar após salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_f)
                    botao_on(botao_atualizar_f)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar fornecedor
        def limpar_fornecedor():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            fornecedores()

        # Função visualizar fornecedor
        def visualizar_fornecedor():
            botao_on(botao_duplicar)
            botao_off(botao_novo_f)
            botao_off(botao_atualizar_f)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_fornecedor.focus()
                tree_dicionario = tree_fornecedor.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_nome_fornecedor.delete(0, END)
                e_endereco_fornecedor.delete(0, END)
                e_bairro_fornecedor.delete(0, END)
                e_cidade_fornecedor.delete(0, END)
                e_cep_fornecedor.delete(0, END)
                c_estado_fornecedor.delete(0, END)
                e_cpf_fornecedor.delete(0, END)
                e_ie_fornecedor.delete(0, END)
                e_email_fornecedor.delete(0, END)
                c_e_civil_fornecedor.delete(0, END)
                e_telefone_fornecedor.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_nome_fornecedor.insert(0, tree_lista[1])

                e_endereco_fornecedor.insert(0, tree_lista[3])
                e_bairro_fornecedor.insert(0, tree_lista[4])
                e_cidade_fornecedor.insert(0, tree_lista[5])
                e_cep_fornecedor.insert(0, tree_lista[6])
                c_estado_fornecedor.insert(0, tree_lista[7])
                e_cpf_fornecedor.insert(0, tree_lista[8])
                e_ie_fornecedor.insert(0, tree_lista[9])
                e_email_fornecedor.insert(0, tree_lista[10])
                c_e_civil_fornecedor.insert(0, tree_lista[11])
                e_telefone_fornecedor.insert(0, tree_lista[12])

                imagem = tree_lista[2]


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo_f)
            botao_on(botao_atualizar_f)
            botao_off(botao_duplicar)

        # função deletar Fornecedores
        def delete_fornecedor():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_fornecedor.focus()
                    tree_dicionario = tree_fornecedor.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_fornecedor([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_fornecedores()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_nome_fornecedor.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_cidade_fornecedor.get()  # Cidade do Pagador
            estado = c_estado_fornecedor.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                        br_executar.place(x=860, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=860, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=860, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=494, y=40)
            e_texto = Entry(frame_detalhes, width=40, justify='left', relief='solid')
            e_texto.place(x=614, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=860, y=40)

        # Função para importar novos clientes
        def importar_fornecedores():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_fornecedor.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    nome = row['Nome']
                    imagem = row['Imagem']
                    endereco = row['Endereço']
                    bairro = row['Bairro']
                    cidade = row['Cidade']
                    cep = row['CEP']
                    estado = row['Estado']
                    cpf = row['CPF/CNPJ']
                    ie = row['IE']
                    email = row['E-mail']
                    e_civil = row['Estado Civil']
                    telefone = row['Telefone']

                    tabela = [nome, imagem, endereco, bairro, cidade, cep, estado, cpf, ie, email, e_civil, telefone]

                    # Inserindo os dados no banco de dados
                    criar_fornecedor(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_fornecedores()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de clientes
        def exportar_fornecedores():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Nome', 'Imagem',
                               'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE', 'E-mail',
                               'Estado Civil', 'Telefone']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_fornecedor.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=494, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=614, y=10)

        # Criando Itens da Tela de Fornecedores*********************************************************************************************************************************************
        l_nome_fornecedor = Label(frame_detalhes, text="*Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_nome_fornecedor.place(x=4, y=10)
        e_nome_fornecedor = Entry(frame_detalhes, width=58, justify='left', relief='solid')
        e_nome_fornecedor.place(x=97, y=10)

        l_endereco_fornecedor = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_endereco_fornecedor.place(x=4, y=40)
        e_endereco_fornecedor = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_endereco_fornecedor.place(x=97, y=40)

        l_bairro_fornecedor = Label(frame_detalhes, text="Bairro:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_bairro_fornecedor.place(x=250, y=40)
        e_bairro_fornecedor = Entry(frame_detalhes, width=25, justify='left', relief='solid')
        e_bairro_fornecedor.place(x=297, y=40)

        l_cidade_fornecedor = Label(frame_detalhes, text="Cidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_cidade_fornecedor.place(x=4, y=70)
        e_cidade_fornecedor = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_cidade_fornecedor.place(x=97, y=70)

        def formatar_cep(event):
            cep = e_cep_fornecedor.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_fornecedor.delete(0, END)
            e_cep_fornecedor.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_fornecedor = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_fornecedor.place(x=250, y=70)
        e_cep_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=25, justify='left',
                                 relief='solid')
        e_cep_fornecedor.place(x=297, y=70)

        e_cep_fornecedor.bind('<KeyRelease>', formatar_cep)

        def aplicar_mascara_cpf(event):
            cpf = e_cpf_fornecedor.get()
            cpf_formatado = ''

            # Remover caracteres diferentes de números do CPF
            cpf = ''.join(filter(str.isdigit, cpf))

            # Aplicar a máscara de CPF
            if len(cpf) <= 3:
                cpf_formatado = cpf
            elif len(cpf) <= 6:
                cpf_formatado = cpf[:3] + '.' + cpf[3:]
            elif len(cpf) <= 11:
                cpf_formatado = cpf[:3] + '.' + cpf[3:6] + '.' + cpf[6:9] + '-' + cpf[9:]
            elif len(cpf) > 11:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]
            else:
                cpf_formatado = cpf[:2] + '.' + cpf[2:5] + '.' + cpf[5:8] + '/' + cpf[8:12] + '-' + cpf[12:]

            # Atualizar o texto da entry com o CPF formatado
            e_cpf_fornecedor.delete(0, END)
            e_cpf_fornecedor.insert(0, cpf_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 18
            if len(P) <= 18:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_cpf_fornecedor = Label(frame_detalhes, text="*CPF/CNPJ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_cpf_fornecedor.place(x=4, y=100)
        e_cpf_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=25, justify='left',
                                 relief='solid')
        e_cpf_fornecedor.place(x=87, y=100)

        e_cpf_fornecedor.bind("<KeyRelease>", aplicar_mascara_cpf)

        l_estado_fornecedor = Label(frame_detalhes, text="Estado:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_estado_fornecedor.place(x=250, y=100)
        c_estado_fornecedor = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        c_estado_fornecedor['values'] = (
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
            'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')
        c_estado_fornecedor.place(x=307, y=100)

        l_ie_fornecedor = Label(frame_detalhes, text="I.E.:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ie_fornecedor.place(x=4, y=130)
        e_ie_fornecedor = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ie_fornecedor.place(x=87, y=130)

        l_email_fornecedor = Label(frame_detalhes, text="E-mail:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_email_fornecedor.place(x=207, y=130)
        e_email_fornecedor = Entry(frame_detalhes, width=30, justify='left', relief='solid')
        e_email_fornecedor.place(x=267, y=130)

        l_e_civil_fornecedor = Label(frame_detalhes, text="Estado Civil:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_e_civil_fornecedor.place(x=4, y=160)
        c_e_civil_fornecedor = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        c_e_civil_fornecedor['values'] = ('Casado(a)', 'Solteiro(a)', 'Outros')
        c_e_civil_fornecedor.place(x=87, y=160)

        def formatar_telefone(event):
            telefone = e_telefone_fornecedor.get()

            # Remove caracteres não numéricos
            telefone = ''.join(filter(str.isdigit, telefone))

            # Verifica o tamanho do telefone
            if len(telefone) < 8:
                telefone_formatado = telefone
            elif len(telefone) < 11:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:6], telefone[6:10])
            else:
                telefone_formatado = '({}) {}-{}'.format(telefone[:2], telefone[2:7], telefone[7:11])

            e_telefone_fornecedor.delete(0, END)
            e_telefone_fornecedor.insert(0, telefone_formatado)

        def validar_digitos_Tel(P):
            # Verifica se o número de dígitos é menor ou igual a 15
            if len(P) <= 15:
                return True
            return False

        vcmd2 = (janela.register(validar_digitos_Tel), '%P')

        l_telefone_fornecedor = Label(frame_detalhes, text="Telefone:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_telefone_fornecedor.place(x=207, y=160)
        e_telefone_fornecedor = Entry(frame_detalhes, validate='key', validatecommand=vcmd2, width=30, justify='left',
                                      relief='solid')
        e_telefone_fornecedor.place(x=267, y=160)

        e_telefone_fornecedor.bind('<KeyRelease>', formatar_telefone)

        # Botões de controle de fornecedor*****************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_f["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_f = Button(frame_detalhes, command=novo_fornecedor, image=busca_nt, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_f.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_f["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_f = Button(frame_detalhes, command=update_fornecedor, image=img_editar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_f.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=253)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_fornecedor, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_fornecedor, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=248)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_fornecedor, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_fornecedores, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_fornecedores, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_f.bind("<Enter>", button_houver)
        botao_novo_f.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_f.bind("<Enter>", button_houver_editar)
        botao_atualizar_f.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_f)
        botao_off(botao_atualizar_f)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela Fornecedores--------------------------------------------------------------------------------------------------
        def mostrar_fornecedores():
            app_nome = Label(frame_tabela_fornecedor, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Nome', 'Imagem', 'Endereço', 'Bairro', 'Cidade', 'CEP', 'Estado', 'CPF/CNPJ', 'IE',
                           'Email', 'Estado Civil', 'Telefone']

            df_list = ver_fornecedor()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_fornecedor

            tree_fornecedor = ttk.Treeview(frame_tabela_fornecedor, selectmode="extended", columns=list_header,
                                           show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_fornecedor, orient="vertical", command=tree_fornecedor.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_fornecedor, orient="horizontal", command=tree_fornecedor.xview)

            tree_fornecedor.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_fornecedor.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_fornecedor.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw"]
            h = [30, 160, 60, 150, 80, 80, 65, 40, 80, 80, 150, 80, 100]
            n = 0

            for col in list_header:
                tree_fornecedor.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_fornecedor.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_fornecedor.insert('', 'end', values=item)

        mostrar_fornecedores()

    # Função da tela de Imóveis---------------------------------------------------------------
    def imoveis():
        # Criando frames para tabelas
        frame_tabela_imoveis = Frame(frame_tabela, width=450, height=180, bg=co1)
        frame_tabela_imoveis.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes de Imóvel-----------------------------------------------------------
        # Função novo Imóvel
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def imovel_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=707, y=20)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=744, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=imovel_imagem, anchor=CENTER,
                                text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=744, y=valor_y_b)
        botao_off(botao_carregar)

        if foto != 1:
            imagem_string = ""

        if foto == 1:
            imovel_imagem()

            imagem = imagem_string

        def novo_imovel():
            try:
                # Teste para verificar se foi escolhido a imagem ou não
                global imagem, l_imagem, imagem_string, foto
                if foto != 1:
                    imagem_string = ""
                etiqueta = e_identificar_imovel.get()
                tipo = e_tipo_imovel.get()
                endereco = e_endereco_imovel.get()
                descricao = e_descricao_imovel.get()
                area = e_area_imovel.get()
                quarto = e_quartos_imovel.get()
                sala = c_salas_imovel.get()
                cozinha = c_cozinha_imovel.get()
                banheiro = e_banheiros_imovel.get()
                adicional = e_adicionais_imovel.get()
                estacionamento = c_estacionamento_imovel.get()
                valor = e_valor_imovel.get()
                pagamento = e_pagamento_imovel.get()
                diponivel = e_diponivel_imovel.get()
                imagem = imagem_string
                proprietario = e_proprietario_imovel.get()
                status = e_status_imovel.get()
                historico = e_transacao_imovel.get()

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                cursor.execute(consulta, (etiqueta,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional,
                         estacionamento, valor,
                         tipo, diponivel, imagem, proprietario, status, historico]

                # Verificando se os valores estão vazios ou não
                if etiqueta == "" or quarto == "":
                    messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                    return
                for resultado in resultados:
                    if etiqueta in resultado:
                        messagebox.showerror('Erro', "Registro já existente")
                        return

                # Inserindo os dados
                criar_imovel(lista)

                # mostrando mensagem de sucesso
                messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                e_identificar_imovel.delete(0, END)
                e_tipo_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_descricao_imovel.delete(0, END)
                e_area_imovel.delete(0, END)
                e_quartos_imovel.delete(0, END)
                c_salas_imovel.delete(0, END)
                c_cozinha_imovel.delete(0, END)
                e_banheiros_imovel.delete(0, END)
                e_adicionais_imovel.delete(0, END)
                c_estacionamento_imovel.delete(0, END)
                e_valor_imovel.delete(0, END)
                e_pagamento_imovel.delete(0, END)
                e_diponivel_imovel.delete(0, END)
                e_proprietario_imovel.delete(0, END)
                e_status_imovel.delete(0, END)
                e_transacao_imovel.delete(0, END)

                # Mostrando os valores na tabela
                mostrar_imoveis()


            except IndexError:
                messagebox.showerror('Erro', 'Preencha todos os campo obrigatórios')

        # função atualizar fornecedor
        def update_imovel():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_f)
                botao_off(botao_atualizar_f)
                tree_itens = tree_imovel.focus()
                tree_dicionario = tree_imovel.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_identificar_imovel.insert(0, tree_lista[1])
                e_tipo_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_descricao_imovel.insert(0, tree_lista[4])
                e_area_imovel.insert(0, tree_lista[5])
                e_quartos_imovel.insert(0, tree_lista[6])
                c_salas_imovel.insert(0, tree_lista[7])
                c_cozinha_imovel.insert(0, tree_lista[8])
                e_banheiros_imovel.insert(0, tree_lista[9])
                e_adicionais_imovel.insert(0, tree_lista[10])
                c_estacionamento_imovel.insert(0, tree_lista[11])
                e_valor_imovel.insert(0, tree_lista[12])
                e_pagamento_imovel.insert(0, tree_lista[13])
                e_diponivel_imovel.insert(0, tree_lista[14])
                e_proprietario_imovel.insert(0, tree_lista[16])
                e_status_imovel.insert(0, tree_lista[17])
                e_transacao_imovel.insert(0, tree_lista[18])

                imagem = tree_lista[15]

                # função atualizar
                def update():
                    imagem = ""
                    etiqueta = e_identificar_imovel.get()
                    tipo = e_tipo_imovel.get()
                    endereco = e_endereco_imovel.get()
                    descricao = e_descricao_imovel.get()
                    area = e_area_imovel.get()
                    quarto = e_quartos_imovel.get()
                    sala = c_salas_imovel.get()
                    cozinha = c_cozinha_imovel.get()
                    banheiro = e_banheiros_imovel.get()
                    adicional = e_adicionais_imovel.get()
                    estacionamento = c_estacionamento_imovel.get()
                    valor = e_valor_imovel.get()
                    pagamento = e_pagamento_imovel.get()
                    diponivel = e_diponivel_imovel.get()
                    proprietario = e_proprietario_imovel.get()
                    status = e_status_imovel.get()
                    historico = e_transacao_imovel.get()

                    lista = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional,
                             estacionamento, valor,
                             tipo, diponivel, imagem, proprietario, status, historico,
                             valor_id]

                    # Verificando se os valores estão vazios ou não
                    # for i in lista:
                    if etiqueta == "" or proprietario == "":
                        messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                        return
                    # Inserindo os dados
                    atualizar_imovel(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_identificar_imovel.delete(0, END)
                    e_tipo_imovel.delete(0, END)
                    e_endereco_imovel.delete(0, END)
                    e_descricao_imovel.delete(0, END)
                    e_area_imovel.delete(0, END)
                    e_quartos_imovel.delete(0, END)
                    c_salas_imovel.delete(0, END)
                    c_cozinha_imovel.delete(0, END)
                    e_banheiros_imovel.delete(0, END)
                    e_adicionais_imovel.delete(0, END)
                    c_estacionamento_imovel.delete(0, END)
                    e_valor_imovel.delete(0, END)
                    e_pagamento_imovel.delete(0, END)
                    e_diponivel_imovel.delete(0, END)
                    e_proprietario_imovel.delete(0, END)
                    e_status_imovel.delete(0, END)
                    e_transacao_imovel.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_imoveis()

                    # destruindo o botão salvar após salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_f)
                    botao_on(botao_atualizar_f)

                global busca_im, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função limpar fornecedor
        def limpar_imovel():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            imoveis()

        # Função visualizar fornecedor
        def visualizar_imovel():
            botao_on(botao_duplicar)
            botao_off(botao_novo_f)
            botao_off(botao_atualizar_f)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_imovel.focus()
                tree_dicionario = tree_imovel.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_identificar_imovel.delete(0, END)
                e_tipo_imovel.delete(0, END)
                e_endereco_imovel.delete(0, END)
                e_descricao_imovel.delete(0, END)
                e_area_imovel.delete(0, END)
                e_quartos_imovel.delete(0, END)
                c_salas_imovel.delete(0, END)
                c_cozinha_imovel.delete(0, END)
                e_banheiros_imovel.delete(0, END)
                e_adicionais_imovel.delete(0, END)
                c_estacionamento_imovel.delete(0, END)
                e_valor_imovel.delete(0, END)
                e_pagamento_imovel.delete(0, END)
                e_diponivel_imovel.delete(0, END)
                e_proprietario_imovel.delete(0, END)
                e_status_imovel.delete(0, END)
                e_transacao_imovel.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_identificar_imovel.insert(0, tree_lista[1])
                e_tipo_imovel.insert(0, tree_lista[2])
                e_endereco_imovel.insert(0, tree_lista[3])
                e_descricao_imovel.insert(0, tree_lista[4])
                e_area_imovel.insert(0, tree_lista[5])
                e_quartos_imovel.insert(0, tree_lista[6])
                c_salas_imovel.insert(0, tree_lista[7])
                c_cozinha_imovel.insert(0, tree_lista[8])
                e_banheiros_imovel.insert(0, tree_lista[9])
                e_adicionais_imovel.insert(0, tree_lista[10])
                c_estacionamento_imovel.insert(0, tree_lista[11])
                e_valor_imovel.insert(0, tree_lista[12])
                e_pagamento_imovel.insert(0, tree_lista[13])
                e_diponivel_imovel.insert(0, tree_lista[14])
                e_proprietario_imovel.insert(0, tree_lista[16])
                e_status_imovel.insert(0, tree_lista[17])
                e_transacao_imovel.insert(0, tree_lista[18])

                imagem = tree_lista[15]


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para duplicar um registro
        def copiar_registro():
            botao_on(botao_novo_f)
            botao_on(botao_atualizar_f)
            botao_off(botao_duplicar)

        # função deletar Fornecedores
        def delete_imovel():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_imovel.focus()
                    tree_dicionario = tree_imovel.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_imovel([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_imoveis()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Criando a Função de Busca
        def buscar_imovel():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_imovel = e_nome_procurar.get().upper()

                if nome_imovel == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM imovel WHERE proprietario LIKE '%{nome_imovel}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Imovel
                        def mostrar_imovel_r():
                            app_nome = Label(frame_tabela_imoveis, text="", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos',
                                           'Salas',
                                           'Cozinhas',
                                           'Banheiros',
                                           'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível',
                                           'Fotos',
                                           'Proprietário', 'Status', 'Histórico']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(
                                                                   ("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                   ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente,
                                                  anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=1125, y=110)

                            global tree_imovel

                            tree_imovel = ttk.Treeview(frame_tabela_imoveis, selectmode="extended", columns=list_header,
                                                       show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_imoveis, orient="vertical", command=tree_imovel.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_imoveis, orient="horizontal", command=tree_imovel.xview)

                            tree_imovel.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_imovel.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_imoveis.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                                  "nw", "nw", "nw",
                                  "nw", "nw"]
                            h = [30, 60, 60, 150, 80, 60, 60, 40, 60, 60, 80, 40, 60, 80, 80, 60, 140, 60, 80]
                            n = 0

                            for col in list_header:
                                tree_imovel.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_imovel.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_imovel.insert('', 'end', values=item)

                        mostrar_imovel_r()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=944, y=75)
        e_nome_procurar = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_nome_procurar.place(x=947, y=110)

        botao_procurar = Button(frame_detalhes, command=buscar_imovel, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=1057, y=110)

        # Criando função para criar um recibo*********************************************************************
        def relatorio_recibo():
            global pagador, valor, referente, extenso, lista, l_valor
            nome = e_identificar_imovel.get()  # Quem está a receber
            pagador = ""  # Quem está a pagar
            cidade = e_area_imovel.get()  # Cidade do Pagador
            estado = c_cozinha_imovel.get()
            valor = 0.0
            referente = ""
            extenso = ""

            if nome == "" or cidade == "":
                messagebox.showerror('Erro', 'Preencha os campos obrigatórios')
                return

            lista = ['Pagador:', 'Valor:', 'Valor por extenso:', 'Pgto referente a:']

            def coletar_valor():
                bt_executar.destroy()
                global pagador, valor, referente, extenso, lista, l_valor
                # criando a segunda linha
                e_texto.delete(0, END)
                l_valor.config(text="")

                def f_pagador():
                    bp_executar.destroy()
                    # criando a terceira linha
                    global pagador, valor, referente, extenso, lista, l_valor
                    valor = e_texto.get()
                    e_texto.delete(0, END)

                    def f_extenso():
                        be_executar.destroy()
                        # criando a quarta linha
                        global pagador, valor, referente, extenso, lista, l_valor
                        extenso = e_texto.get()
                        e_texto.delete(0, END)

                        def f_referente():
                            br_executar.destroy()
                            global pagador, valor, referente, extenso, lista, l_valor
                            referente = e_texto.get()
                            l_valor.config(text="")
                            e_texto.delete(0, END)
                            e_texto.destroy()

                            # Criando a variável data
                            locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                            data_atual = datetime.today()
                            nome_mes = data_atual.strftime('%B')
                            dia = data_atual.day
                            ano = data_atual.year
                            data = (f'{dia} de {nome_mes} de {ano}')

                            # Salvando o arquivo DOCX
                            doc = Document('arquivos/Modelo_Recibo.docx')
                            for paragraph in doc.paragraphs:
                                if 'Nome' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Nome', nome)
                                if 'Pagador' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Pagador', pagador)
                                if 'Cidade' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Cidade', cidade)
                                if 'Estado' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Estado', estado)
                                if 'Valor' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Valor', valor)
                                if 'R_eferente' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('R_eferente', referente)
                                if 'Extenso' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Extenso', extenso)
                                if 'Data' in paragraph.text:
                                    paragraph.text = paragraph.text.replace('Data', data)
                            doc.save('arquivos/Recibo.docx')
                            abrir_arquivo()

                        def abrir_arquivo():
                            caminho = 'arquivos/Recibo.docx'
                            subprocess.call(["start", "", caminho], shell=True)

                        l_valor.config(text=lista[3])
                        br_executar = Button(frame_detalhes, command=f_referente, text='>>',
                                             width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1,
                                             fg=co0)
                        br_executar.place(x=1290, y=40)

                    l_valor.config(text=lista[2])
                    be_executar = Button(frame_detalhes, command=f_extenso, text='>>',
                                         width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                    be_executar.place(x=1290, y=40)

                l_valor.config(text=lista[1])
                bp_executar = Button(frame_detalhes, command=f_pagador, text='>>',
                                     width=5, compound=LEFT, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                bp_executar.place(x=1290, y=40)

            # criando a primeira linha
            l_valor = Label(frame_detalhes, text=lista[0], height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                            fg=co4)
            l_valor.place(x=944, y=40)
            e_texto = Entry(frame_detalhes, width=35, justify='left', relief='solid')
            e_texto.place(x=1064, y=40)
            pagador = e_texto.get()
            bt_executar = Button(frame_detalhes, command=coletar_valor, text='>>',
                                 width=5, compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
            bt_executar.place(x=1290, y=40)

        # Criando função para criar um contrato*********************************************************************
        def relatorio_contrato():
            if e_proprietario_imovel.get() == "":
                messagebox.showerror('Erro', 'Selecione um item da tabela')
            else:
                etiqueta = e_proprietario_imovel.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM fornecedor WHERE nome_fornecedor = ?"
                cursor.execute(consulta, (etiqueta,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()

                # Criando as Variáveis:
                nome = lista[0][1]
                nacionalidade = lista[0][5]
                e_civil = lista[0][11]
                identidade = lista[0][9]
                cpf = lista[0][8]
                endereco = lista[0][3]
                cep = lista[0][6]

                def abrir_arquivo():
                    caminho = 'arquivos/Contrato.docx'
                    subprocess.call(["start", "", caminho], shell=True)

                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Criando a variável data
                        locale.setlocale(locale.LC_ALL, 'pt_BR.utf8')
                        data_atual = datetime.today()
                        nome_mes = data_atual.strftime('%B')
                        dia = data_atual.day
                        ano = data_atual.year
                        data = (f'{dia} de {nome_mes} de {ano}')

                        # Salvando o arquivo DOCX
                        doc = Document('arquivos/Modelo_Contrato.docx')
                        for paragraph in doc.paragraphs:
                            if 'ca-001' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-001', nome)
                            if 'ca-002' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-002', nacionalidade)
                            if 'ca-003' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-003', e_civil)
                            if 'ca-004' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-004', identidade)
                            if 'ca-005' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-005', cpf)
                            if 'ca-006' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-006', endereco)
                            if 'ca-007' in paragraph.text:
                                paragraph.text = paragraph.text.replace('ca-007', cep)
                            if 'Data' in paragraph.text:
                                paragraph.text = paragraph.text.replace('Data', data)
                        doc.save('arquivos/Contrato.docx')

                        abrir_arquivo()



            except IndexError:
                messagebox.showerror('Erro', 'Selecione um registro ')

        # Função para importar novos clientes
        def importar_imoveis():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM imovel"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_imovel.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    etiqueta = row['Etiqueta']
                    tipo = row['Tipo']
                    endereco = row['Endereço']
                    descricao = row['Descrição']
                    area = row['Área Total']
                    quarto = row['Quartos']
                    sala = row['Salas']
                    cozinha = row['Cozinhas']
                    banheiro = row['Banheiros']
                    adicional = row['Adicionais']
                    estacionamento = row['Estacionamento']
                    valor = row['Valor']
                    tipo_pgto = row['Tipo Pagamento']
                    disponivel = row['Disponível']
                    imagem = row['Fotos']
                    proprietario = row['Proprietário']
                    status = row['Status']
                    historico = row['Histórico']

                    tabela = [etiqueta, tipo, endereco, descricao, area, quarto, sala, cozinha, banheiro, adicional,
                              estacionamento, valor,
                              tipo_pgto, disponivel, imagem, proprietario, status, historico]

                    # Inserindo os dados no banco de dados
                    criar_imovel(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_imoveis()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de clientes
        def exportar_imoveis():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM imovel"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos', 'Salas',
                               'Cozinhas',
                               'Banheiros',
                               'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível', 'Fotos',
                               'Proprietário', 'Status', 'Histórico']
                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_imovel.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Botão para emitir um recibo************************************************************************************
        l_recibo = Label(frame_detalhes, text="Imprimir Recibo: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=944, y=10)
        global app_img_recibo
        app_img_recibo = Image.open('icone/editar60.png')
        app_img_recibo = app_img_recibo.resize((15, 15))
        app_img_recibo = ImageTk.PhotoImage(app_img_recibo)
        app_recibo = Button(frame_detalhes, command=relatorio_recibo, image=app_img_recibo,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=1064, y=10)

        # Botão para emitir um contrato**********************************************************************************
        l_recibo = Label(frame_detalhes, text="Imprimir Contrato: ", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                         fg=co4)
        l_recibo.place(x=944, y=160)
        global app_img_contrato
        app_img_contrato = Image.open('icone/editar60.png')
        app_img_contrato = app_img_contrato.resize((15, 15))
        app_img_contrato = ImageTk.PhotoImage(app_img_contrato)
        app_recibo = Button(frame_detalhes, command=relatorio_contrato, image=app_img_contrato,
                            width=20, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
        app_recibo.place(x=1064, y=160)

        # Criando Itens da Tela de Fornecedores*********************************************************************************************************************************************
        l_identificar_imovel = Label(frame_detalhes, text="*Identificação:", height=1, anchor=NW, font=('Ivy 10'),
                                     bg=co1,
                                     fg=co4)
        l_identificar_imovel.place(x=4, y=10)
        e_identificar_imovel = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_identificar_imovel.place(x=97, y=10)

        l_tipo_imovel = Label(frame_detalhes, text="Tipo:", height=1, anchor=NW, font=('Ivy 9'),
                              bg=co1,
                              fg=co4)
        l_tipo_imovel.place(x=200, y=10)
        e_tipo_imovel = ttk.Combobox(frame_detalhes, width=19, font=('Ivy 8 bold'))
        e_tipo_imovel['values'] = ('CASA', 'APARTAMENTO', 'IMÓVEL COMERCIAL', 'TERRENO', 'RURAL')
        e_tipo_imovel.place(x=237, y=10)

        l_endereco_imovel = Label(frame_detalhes, text="Endereço:", height=1, anchor=NW, font=('Ivy 9'), bg=co1,
                                  fg=co4)
        l_endereco_imovel.place(x=4, y=40)
        e_endereco_imovel = Entry(frame_detalhes, width=40, justify='left', relief='solid')
        e_endereco_imovel.place(x=97, y=40)

        l_area_imovel = Label(frame_detalhes, text="Área Total:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_area_imovel.place(x=377, y=10)
        e_area_imovel = Entry(frame_detalhes, width=22, justify='left', relief='solid')
        e_area_imovel.place(x=447, y=10)

        l_descricao_imovel = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 9'), bg=co1,
                                   fg=co4)
        l_descricao_imovel.place(x=347, y=40)
        e_descricao_imovel = Entry(frame_detalhes, validate='key', width=26, justify='left',
                                   relief='solid')
        e_descricao_imovel.place(x=423, y=40)

        l_quartos_imovel = Label(frame_detalhes, text="Quartos:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_quartos_imovel.place(x=4, y=70)
        e_quartos_imovel = Entry(frame_detalhes, validate='key', width=15, justify='left',
                                 relief='solid')
        e_quartos_imovel.place(x=97, y=70)

        l_salas_imovel = Label(frame_detalhes, text="Salas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_salas_imovel.place(x=210, y=70)
        c_salas_imovel = Entry(frame_detalhes, validate='key', width=18, justify='left',
                               relief='solid')
        c_salas_imovel.place(x=258, y=70)

        l_cozinha_imovel = Label(frame_detalhes, text="Cozinhas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_cozinha_imovel.place(x=377, y=100)
        c_cozinha_imovel = Entry(frame_detalhes, validate='key', width=22, justify='left',
                                 relief='solid')
        c_cozinha_imovel.place(x=447, y=100)

        l_banheiros_imovel = Label(frame_detalhes, text="Banheiros:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_banheiros_imovel.place(x=377, y=70)
        e_banheiros_imovel = Entry(frame_detalhes, width=22, justify='left', relief='solid')
        e_banheiros_imovel.place(x=447, y=70)

        l_adicionais_imovel = Label(frame_detalhes, text="Adicionais:", height=1, anchor=NW, font=('Ivy 10'),
                                    bg=co1,
                                    fg=co4)
        l_adicionais_imovel.place(x=4, y=100)
        e_adicionais_imovel = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_adicionais_imovel.place(x=97, y=100)

        l_estacionamento_imovel = Label(frame_detalhes, text="Estacionamento:", height=1, anchor=NW,
                                        font=('Ivy 10'),
                                        bg=co1,
                                        fg=co4)
        l_estacionamento_imovel.place(x=215, y=100)
        c_estacionamento_imovel = ttk.Combobox(frame_detalhes, width=6, font=('Ivy 8 bold'))
        c_estacionamento_imovel['values'] = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
        c_estacionamento_imovel.place(x=318, y=100)

        l_pagamento_imovel = Label(frame_detalhes, text="T. Pagamento:", height=1, anchor=NW, font=('Ivy 10'),
                                   bg=co1,
                                   fg=co4)
        l_pagamento_imovel.place(x=4, y=130)
        e_pagamento_imovel = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_pagamento_imovel.place(x=97, y=130)

        l_disponivel_imovel = Label(frame_detalhes, text="Disponível:", height=1, anchor=NW, font=('Ivy 10'),
                                    bg=co1,
                                    fg=co4)
        l_disponivel_imovel.place(x=212, y=130)
        e_diponivel_imovel = DateEntry(frame_detalhes, width=10, background='darkblue', borderwidth=2,
                                       year=ano_atual,
                                       locale="pt_br")
        e_diponivel_imovel.place(x=282, y=130)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_proprietario_imovel = Label(frame_detalhes, text="Proprietário:", height=1, anchor=NW, font=('Ivy 10'),
                                      bg=co1,
                                      fg=co4)
        l_proprietario_imovel.place(x=380, y=130)
        e_proprietario_imovel = ttk.Combobox(frame_detalhes, width=20, font=('Ivy 8 bold'))
        e_proprietario_imovel['values'] = (fornecedor)
        e_proprietario_imovel.place(x=457, y=130)

        l_status_imovel = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_status_imovel.place(x=4, y=160)
        e_status_imovel = ttk.Combobox(frame_detalhes, width=10, font=('Ivy 8 bold'))
        e_status_imovel['values'] = ('ATIVO', 'INATIVO')
        e_status_imovel.place(x=97, y=160)

        l_valor_imovel = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'),
                               bg=co1,
                               fg=co4)
        l_valor_imovel.place(x=212, y=160)
        e_valor_imovel = Entry(frame_detalhes, validate='key', width=15,
                               justify='left',
                               relief='solid')
        e_valor_imovel.place(x=252, y=160)

        transacoes = ver_transacao()
        transacao = []
        for i in transacoes:
            transacao.append(i[0])
        l_transacao_imovel = Label(frame_detalhes, text="Histórico:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_transacao_imovel.place(x=357, y=160)
        e_transacao_imovel = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_transacao_imovel['values'] = (transacao)
        e_transacao_imovel.place(x=422, y=160)

        # Botões de controle de fornecedor*****************************************************************************************************************************
        global busca_im, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_f["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_im = Image.open('icone/novo.png')
        busca_im = busca_im.resize((20, 20))
        busca_im = ImageTk.PhotoImage(busca_im)
        botao_novo_f = Button(frame_detalhes, command=novo_imovel, image=busca_im, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_f.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_f["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_f["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_f = Button(frame_detalhes, command=update_imovel, image=img_editar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_f.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=253)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_imovel, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_imovel, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=248)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_imovel, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_imoveis, image=img_importar, text='',
                                width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_imoveis, image=img_exportar, text='',
                                width=30, compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_f.bind("<Enter>", button_houver)
        botao_novo_f.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_f.bind("<Enter>", button_houver_editar)
        botao_atualizar_f.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_f)
        botao_off(botao_atualizar_f)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela Fornecedores--------------------------------------------------------------------------------------------------
        def mostrar_imoveis():
            app_nome = Label(frame_tabela_imoveis, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Etiqueta', 'Tipo', 'Endereço', 'Descrição', 'Área Total', 'Quartos', 'Salas',
                           'Cozinhas',
                           'Banheiros',
                           'Adicionais', 'Estacionamento', 'Valor', 'Tipo Pagamento', 'Disponível', 'Fotos',
                           'Proprietário', 'Status', 'Histórico']

            df_list = ver_imovel()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_imovel

            tree_imovel = ttk.Treeview(frame_tabela_imoveis, selectmode="extended", columns=list_header,
                                       show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_imoveis, orient="vertical", command=tree_imovel.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_imoveis, orient="horizontal", command=tree_imovel.xview)

            tree_imovel.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_imovel.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_imoveis.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw",
                  "nw", "nw"]
            h = [30, 60, 60, 150, 80, 60, 60, 40, 60, 60, 80, 40, 60, 80, 80, 60, 140, 60, 80]
            n = 0

            for col in list_header:
                tree_imovel.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_imovel.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_imovel.insert('', 'end', values=item)

        mostrar_imoveis()

    # Função da tela de Contrato-------------------------------------------------------------------
    def contratos():
        # Criando frames para tabelas
        frame_tabela_contrato = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_contrato.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da Contrato-----------------------------------------------------------
        # Trabalhando com Calculos de datas*********************************************************
        def calculos_data(valor):
            from datetime import datetime
            # Calcular diferença entre datas
            data_informada = valor

            # Converter a data informada para formato de datetime
            data_informada = datetime.strptime(data_informada, "%d/%m/%Y")

            # Obter a data atual
            data_atual = datetime.now()

            # Calcular a diferença entre as datas
            diferenca = data_atual - data_informada

            # Retorna a diferença entre data em dias
            return diferenca.days

        def ia_vencimento():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Decompondo a data atual
                data_atual = datetime.now()
                dia_atual = data_atual.day
                mes_atual = data_atual.month
                ano_atual = data_atual.year
                # **************************

                # Realizando a busca
                cursor.execute("SELECT * FROM contrato")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                lista = []
                for resultado in resultados:
                    data_vencimento = str(resultado[2]) + '/' + str(mes_atual) + '/' + str(ano_atual)
                    data_vencimento = datetime.strptime(data_vencimento, "%d/%m/%Y")
                    data_compra = resultado[9]
                    data_compra = datetime.strptime(data_compra, "%d/%m/%Y")
                    if data_compra <= data_vencimento:
                        lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # função novo Contrato
        def novo_Contrato():
            numero = e_numero_contrato.get()
            vencimento = d_vencimento.get()
            objeto = e_objeto_contrato.get()
            fornecedor = e_fornecedor_contrato.get()
            cliente = e_cliente_contrato.get()
            cep = e_cep_cliente.get()
            parcelas = e_parcelas_contrato.get()
            valor = e_valor_contrato.get()
            data_inicial = data_inicio.get()
            data_final = l_data_final.get()
            iptu = e_iptu.get()
            condominio = e_condominio.get()
            luz = e_luz.get()
            agua = e_agua.get()
            outros = e_outros.get()
            status = e_status.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM contrato WHERE numero = ?"
            cursor.execute(consulta, (numero,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial, data_final,
                     iptu, condominio,
                     luz,
                     agua, outros, status]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if numero in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_contrato(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_numero_contrato.delete(0, END)
            d_vencimento.delete(0, END)
            e_objeto_contrato.delete(0, END)
            e_fornecedor_contrato.delete(0, END)
            e_cliente_contrato.delete(0, END)
            e_cep_cliente.delete(0, END)
            e_parcelas_contrato.delete(0, END)
            e_valor_contrato.delete(0, END)
            data_inicio.delete(0, END)
            l_data_final.delete(0, END)
            e_iptu.delete(0, END)
            e_condominio.delete(0, END)
            e_luz.delete(0, END)
            e_agua.delete(0, END)
            e_outros.delete(0, END)
            e_status.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_contrato()

        # função atualizar cliente
        def update_contrato():
            try:
                botao_off(botao_novo_ct)
                botao_off(botao_atualizar_ct)
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])

                # função atualizar
                def update():
                    numero = e_numero_contrato.get()
                    vencimento = d_vencimento.get()
                    objeto = e_objeto_contrato.get()
                    fornecedor = e_fornecedor_contrato.get()
                    cliente = e_cliente_contrato.get()
                    cep = e_cep_cliente.get()
                    parcelas = e_parcelas_contrato.get()
                    valor = e_valor_contrato.get()
                    data_inicial = data_inicio.get()
                    data_final = l_data_final.get()
                    iptu = e_iptu.get()
                    condominio = e_condominio.get()
                    luz = e_luz.get()
                    agua = e_agua.get()
                    outros = e_outros.get()
                    status = e_status.get()

                    lista = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial,
                             data_final, iptu,
                             condominio, luz, agua, outros, status, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_contrato(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_numero_contrato.delete(0, END)
                    d_vencimento.delete(0, END)
                    e_objeto_contrato.delete(0, END)
                    e_fornecedor_contrato.delete(0, END)
                    e_cliente_contrato.delete(0, END)
                    e_cep_cliente.delete(0, END)
                    e_parcelas_contrato.delete(0, END)
                    e_valor_contrato.delete(0, END)
                    data_inicio.delete(0, END)
                    l_data_final.delete(0, END)
                    e_iptu.delete(0, END)
                    e_condominio.delete(0, END)
                    e_luz.delete(0, END)
                    e_agua.delete(0, END)
                    e_outros.delete(0, END)
                    e_status.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_contrato()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_ct)
                    botao_on(botao_atualizar_ct)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função deletar Contrato
        def delete_contrato():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_contrato.focus()
                    tree_dicionario = tree_contrato.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_contrato([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função Limpar a tela
        def limpar_contrato():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            contratos()

        def visualizar_contrato():
            botao_on(botao_duplicar)
            botao_off(botao_novo_ct)
            botao_off(botao_atualizar_ct)
            try:
                tree_itens = tree_contrato.focus()
                tree_dicionario = tree_contrato.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_numero_contrato.delete(0, END)
                d_vencimento.delete(0, END)
                e_objeto_contrato.delete(0, END)
                e_fornecedor_contrato.delete(0, END)
                e_cliente_contrato.delete(0, END)
                e_cep_cliente.delete(0, END)
                e_parcelas_contrato.delete(0, END)
                e_valor_contrato.delete(0, END)
                data_inicio.delete(0, END)
                l_data_final.delete(0, END)
                e_iptu.delete(0, END)
                e_condominio.delete(0, END)
                e_luz.delete(0, END)
                e_agua.delete(0, END)
                e_outros.delete(0, END)
                e_status.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_numero_contrato.insert(0, tree_lista[1])
                d_vencimento.insert(0, tree_lista[2])
                e_objeto_contrato.insert(0, tree_lista[3])
                e_fornecedor_contrato.insert(0, tree_lista[4])
                e_cliente_contrato.insert(0, tree_lista[5])
                e_cep_cliente.insert(0, tree_lista[6])
                e_parcelas_contrato.insert(0, tree_lista[7])
                e_valor_contrato.insert(0, tree_lista[8])
                data_inicio.insert(0, tree_lista[9])
                l_data_final.insert(0, tree_lista[10])
                e_iptu.insert(0, tree_lista[11])
                e_condominio.insert(0, tree_lista[12])
                e_luz.insert(0, tree_lista[13])
                e_agua.insert(0, tree_lista[14])
                e_outros.insert(0, tree_lista[15])
                e_status.insert(0, tree_lista[16])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_ct)
            botao_on(botao_atualizar_ct)
            botao_off(botao_duplicar)

        # Função para importar novos contratos

        # Função para importar o cadastro de contratos
        def importar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_contratos.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    numero = row['Número']
                    vencimento = row['Vencimento']
                    objeto = row['Objeto']
                    fornecedor = row['Fornecedor']
                    cliente = row['Cliente']
                    cep = row['CEP']
                    parcelas = row['Parcelas']
                    valor = row['Valor']
                    data_inicial = row['Dta Inicio']
                    data_final = row['Dta Final']
                    iptu = row['IPTU']
                    condominio = row['Condominio']
                    luz = row['Luz']
                    agua = row['Agua']
                    outros = row['Outros']
                    status = row['Status']

                    tabela = [numero, vencimento, objeto, fornecedor, cliente, cep, parcelas, valor, data_inicial,
                              data_final, iptu, condominio,
                              luz, agua, outros, status]

                    # Inserindo os dados no banco de dados
                    criar_contrato(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_contrato()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de contratos
        def exportar_contratos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM contrato"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas',
                               'Valor',
                               'Dta Inicio',
                               'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']
                tabela_contratos = pd.DataFrame(lista)
                tabela_contratos.columns = list_header
                nome_arquivo = 'arquivos/tabela_contratos.xlsx'
                tabela_contratos.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx


            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando Itens da Tela de Contrato*********************************************************************************************************************************************
        global ano_atual

        l_numero_contrato = Label(frame_detalhes, text="Número do contrato:", height=1, anchor=NW, font=('Ivy 10'),
                                  bg=co1,
                                  fg=co4)
        l_numero_contrato.place(x=4, y=10)
        e_numero_contrato = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_numero_contrato.place(x=127, y=10)

        l_vencimento = Label(frame_detalhes, text="Vencimento:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_vencimento.place(x=227, y=10)
        d_vencimento = ttk.Combobox(frame_detalhes, width=12, font=('Ivy 8 bold'))
        d_vencimento['values'] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                                  25, 26, 27, 28, 29, 30, 31]
        d_vencimento.place(x=307, y=10)

        l_objeto_contrato = Label(frame_detalhes, text="Objeto:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_objeto_contrato.place(x=4, y=40)
        e_objeto_contrato = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_objeto_contrato['values'] = ['COMPRA', 'VENDA', 'LOCAÇÃO', 'DIVERSOS', 'SERVIÇOS']
        e_objeto_contrato.place(x=57, y=40)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_fornecedor_contrato = Label(frame_detalhes, text="Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_fornecedor_contrato.place(x=167, y=40)
        e_fornecedor_contrato = ttk.Combobox(frame_detalhes, width=23, font=('Ivy 8 bold'))
        e_fornecedor_contrato['values'] = (fornecedor)
        e_fornecedor_contrato.place(x=243, y=40)

        def dados_cliente(event):
            valor_selecionado = e_cliente_contrato.get()
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                # Realizando a busca
                query = f"SELECT * FROM cliente WHERE nome_cliente ='{valor_selecionado}'"
                cursor.execute(query)
                # Recuperando os resultados
                resultado = cursor.fetchall()
                # Fechando a conexão com o banco de dados
                conn.close()

                # Exibindo os resultados
                e_cep_cliente.delete(0, END)
                e_cep_cliente.insert(0, resultado[0][6])
            except:
                return

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_cliente_contrato = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_cliente_contrato.place(x=4, y=70)
        e_cliente_contrato = ttk.Combobox(frame_detalhes, width=25, font=('Ivy 8 bold'))
        e_cliente_contrato['values'] = (cliente)
        e_cliente_contrato.bind("<<ComboboxSelected>>", dados_cliente)
        e_cliente_contrato.place(x=57, y=70)

        def formatar_cep(event):
            cep = e_cep_cliente.get()
            # Remove quaisquer caracteres não numéricos do CEP
            cep = ''.join([c for c in cep if c.isdigit()])
            # Se o CEP tem mais de 5 dígitos, adiciona o traço
            if len(cep) > 5:
                cep = cep[:5] + '-' + cep[5:]
            # Define o valor formatado do CEP no campo de entrada
            e_cep_cliente.delete(0, END)
            e_cep_cliente.insert(0, cep)

        def validar_digitos_CEP(P):
            # Verifica se o número de dígitos é menor ou igual a 9
            if len(P) <= 9:
                return True
            return False

        vcmd1 = (janela.register(validar_digitos_CEP), '%P')

        l_cep_cliente = Label(frame_detalhes, text="CEP:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cep_cliente.place(x=232, y=70)
        e_cep_cliente = Entry(frame_detalhes, validate='key', validatecommand=vcmd1, width=21, justify='left',
                              relief='solid')
        e_cep_cliente.place(x=272, y=70)

        e_cep_cliente.bind('<KeyRelease>', formatar_cep)

        l_parcelas_contrato = Label(frame_detalhes, text="Parcelas:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_parcelas_contrato.place(x=4, y=100)
        e_parcelas_contrato = Entry(frame_detalhes, width=23, justify='left', relief='solid')
        e_parcelas_contrato.place(x=73, y=100)

        l_valor_contrato = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_valor_contrato.place(x=222, y=100)
        e_valor_contrato = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_valor_contrato.place(x=272, y=100)

        # Criando campos de entrada
        l_data_inicio = Label(frame_detalhes, text="Data de inicio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_data_inicio.place(x=4, y=130)
        data_inicio = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                locale="pt_br")
        data_inicio.place(x=98, y=130)

        l_data_final = Label(frame_detalhes, text="Data Final:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_final.place(x=220, y=130)
        l_data_final = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                 locale="pt_br")
        l_data_final.place(x=300, y=130)

        l_iptu = Label(frame_detalhes, text="IPTU:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_iptu.place(x=4, y=160)
        e_iptu = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_iptu.place(x=57, y=160)

        l_condominio = Label(frame_detalhes, text="Condominio:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_condominio.place(x=187, y=160)
        e_condominio = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_condominio.place(x=272, y=160)

        l_luz = Label(frame_detalhes, text="LUZ:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_luz.place(x=4, y=190)
        e_luz = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_luz.place(x=57, y=190)

        l_agua = Label(frame_detalhes, text="AGUA:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_agua.place(x=217, y=190)
        e_agua = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_agua.place(x=272, y=190)

        l_outros = Label(frame_detalhes, text="OUTROS:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_outros.place(x=4, y=220)
        e_outros = Entry(frame_detalhes, width=25, justify='left', relief='solid')
        e_outros.place(x=77, y=219)

        l_status = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_status.place(x=240, y=220)
        e_status = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
        e_status['values'] = ['ABERTO', 'PAGO']
        e_status.place(x=294, y=220)

        # Botões de controle de contrato*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_aberto

        def button_houver(e):
            botao_novo_ct["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_ct = Button(frame_detalhes, command=novo_Contrato, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_ct.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_ct["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_ct = Button(frame_detalhes, command=update_contrato, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_ct.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_contrato, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_contrato, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_contrato, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_contratos, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_contratos, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        def button_houver_aberto(e):
            botao_abertos["bg"] = "white"
            status_label.config(text="     Faturas em aberto")

        def button_houver_leave_aberto(e):
            botao_abertos["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_aberto = Image.open('icone/Receber.png')
        img_aberto = img_aberto.resize((20, 20))
        img_aberto = ImageTk.PhotoImage(img_aberto)
        botao_abertos = Button(frame_detalhes, command=ia_vencimento, image=img_aberto, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_abertos.place(x=454, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_ct.bind("<Enter>", button_houver)
        botao_novo_ct.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_ct.bind("<Enter>", button_houver_editar)
        botao_atualizar_ct.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_abertos.bind("<Enter>", button_houver_aberto)
        botao_abertos.bind("<Leave>", button_houver_leave_aberto)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_ct)
        botao_off(botao_atualizar_ct)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela contrato--------------------------------------------------------------------------------------------------
        def mostrar_contrato():
            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP', 'Parcelas', 'Valor',
                           'Dta Inicio',
                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

            df_list = ver_contratos()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_contrato

            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended", columns=list_header,
                                         show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_contrato.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e", "e"]
            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
            n = 0

            for col in list_header:
                tree_contrato.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_contrato.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_contrato.insert('', 'end', values=item)

        mostrar_contrato()

        # Criando seção de busca para contratos:*****************************************************************************************************
        # Criando os relatórios-----------------------------------------------------------
        def pagar(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_fornecedor()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=125)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def nome(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        buscar_relatorio()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=5)
                return soma_total

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def objeto(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE status = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_objeto()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=65)
                return

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        def funcao_date(i):
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()
                # Realizando a busca
                cursor.execute(
                    f"SELECT sum(replace(valor,',', '.')) FROM contrato WHERE data_final BETWEEN '{data}' AND '{data_atual}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Recuperando os resultados

                soma_total = f"R$ {resultados[0][0]:.2f}"

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        relatorio_data()
                    l_card_fornecedor = Label(frame_detalhes, text="- Despesas: {}".format(soma_total), width=20,
                                              height=2, font=('Ivy 15 bold'), bg=co6, fg=co1)
                    l_card_fornecedor.place(x=1030, y=185)
                return

            except:
                return

        # Criando a Função de Busca

        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE cliente_contrato LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=35)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_objeto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE status LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor

        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()
                # Realizando a busca
                cursor.execute(f"SELECT * FROM contrato WHERE fornecedor_contrato = '{nome_caixa}'")

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Contrato
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio',
                                           'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros', 'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=150)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical",
                                                command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal",
                                                command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e",
                                  "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()


            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute("SELECT * FROM contrato WHERE data_final BETWEEN '{}' AND '{}';".format(data,
                                                                                                       data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_contrato, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Número', 'Vencimento', 'Objeto', 'Fornecedor', 'Cliente', 'CEP',
                                           'Parcelas', 'Valor',
                                           'Dta Inicio', 'Dta Final', 'IPTU', 'Condominio', 'Luz', 'Agua', 'Outros',
                                           'Status']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=860, y=205)

                            global tree_contrato

                            tree_contrato = ttk.Treeview(frame_tabela_contrato, selectmode="extended",
                                                         columns=list_header,
                                                         show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_contrato, orient="vertical", command=tree_contrato.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_contrato, orient="horizontal", command=tree_contrato.xview)

                            tree_contrato.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_contrato.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_contrato.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "e", "e", "e", "e", "e", "e"]
                            h = [30, 80, 80, 80, 80, 120, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 40]
                            n = 0

                            for col in list_header:
                                tree_contrato.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_contrato.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_contrato.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except:
                return

        def funcao_nome():
            nome(i)
            buscar_relatorio()

        def funcao_data():
            funcao_date(i)
            relatorio_data()

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=494, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=494, y=35)

        botao_procurar = Button(frame_detalhes, command=funcao_nome, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=613, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW,
                            font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=494, y=70)
        ver_contrato = ver_contratos()
        referente = []
        for i in ver_contrato:
            referente.append(i[16])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.bind("<<ComboboxSelected>>", objeto)
        e_referente_procurar.place(x=494, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_objeto, anchor=CENTER,
                                          text='Procurar'.upper(),
                                          width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=613, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=494, y=125)
        ver_contrato = ver_contratos()
        provedor = []
        for i in ver_contrato:
            provedor.append(i[4])
        e_fornecedor_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_fornecedor_procurar['values'] = (provedor)
        e_fornecedor_procurar.bind("<<ComboboxSelected>>", pagar)
        e_fornecedor_procurar.place(x=494, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=613, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=494, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=494, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2,
                                          year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=627, y=205)

        botao_procurar_data = Button(frame_detalhes, command=funcao_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=757, y=205)

    # Função da tela de Contrato e Produtos--------------------------------------------------------
    def produtos():
        # Criando frames para tabelas
        frame_tabela_contrato = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_contrato.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        frame_tabela_linha = Frame(frame_tabela, width=30, height=200, bg=co1)
        frame_tabela_linha.grid(row=0, column=1, pady=0, padx=10, sticky=NSEW)

        frame_tabela_produto = Frame(frame_tabela, width=300, height=200, bg=co1)
        frame_tabela_produto.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes da produto-----------------------------------------------------------
        # Função novo produto
        # Criando a variavel foto
        global imagem, l_imagem, imagem_string, foto
        foto = 0

        # Função para ativar o batão de busca de imagens
        def buscar_foto():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            botao_on(botao_carregar)
            return foto

        # Função para escolher a imagem
        def produto_imagem():
            global imagem, l_imagem, imagem_string, foto
            foto = 1
            imagem = fd.askopenfilename()
            imagem_string = imagem

            # Abrindo a imagem
            imagem = Image.open(imagem)
            imagem = imagem.resize((200, 200))
            imagem = ImageTk.PhotoImage(imagem)
            l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
            l_imagem.place(x=447, y=20)

            botao_carregar['text'] = 'Trocar de foto'.upper()

        botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                            width=20,
                            compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_foto.place(x=467, y=valor_y_f)
        botao_carregar = Button(frame_detalhes, command=produto_imagem, anchor=CENTER, text='Carregar Foto'.upper(),
                                width=20,
                                compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
        botao_carregar.place(x=467, y=valor_y_b)
        botao_off(botao_carregar)
        if foto != 1:
            imagem_string = ""

        if foto == 1:
            produto_imagem()

        def novo_produto():
            # Teste para verificar se foi escolhido a imagem ou não
            global imagem, l_imagem, imagem_string, foto
            if foto != 1:
                imagem_string = ""

            imagem = imagem_string
            codigo = e_produto_codigo.get()
            quantidade = e_produto_quantidade.get()
            descricao = e_produto_descricao.get()
            localizacao = e_produto_localizacao.get()
            referencia = e_produto_referencia.get()
            classe = e_produto_classe.get()
            valor = e_produto_valor.get()
            reserva = e_produto_seguro.get()
            pedido = e_produto_pedido.get()
            status = e_produto_status.get()
            unidade = e_produto_unidade.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM produto WHERE codigo = ?"
            cursor.execute(consulta, (codigo,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor, reserva,
                     pedido, status]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if codigo == "" or descricao == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if codigo in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_produto(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_produto_codigo.delete(0, END)
            e_produto_quantidade.delete(0, END)
            e_produto_descricao.delete(0, END)
            e_produto_localizacao.delete(0, END)
            e_produto_referencia.delete(0, END)
            e_produto_classe.delete(0, END)
            e_produto_valor.delete(0, END)
            e_produto_seguro.delete(0, END)
            e_produto_pedido.delete(0, END)
            e_produto_status.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_produto()

        # função atualizar Turma
        def update_produto():
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                botao_off(botao_novo_p)
                botao_off(botao_atualizar_p)
                botao_off(botao_ver)
                botao_off(botao_limpar)
                botao_off(botao_duplicar)
                tree_itens = tree_produto.focus()
                tree_dicionario = tree_produto.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_produto_codigo.insert(0, tree_lista[1])
                e_produto_localizacao.insert(0, tree_lista[2])
                e_produto_descricao.insert(0, tree_lista[3])
                e_produto_quantidade.insert(0, tree_lista[4])
                e_produto_unidade.insert(0, tree_lista[5])
                e_produto_referencia.insert(0, tree_lista[6])
                e_produto_classe.insert(0, tree_lista[7])
                e_produto_valor.insert(0, tree_lista[9])
                e_produto_seguro.insert(0, tree_lista[10])
                e_produto_pedido.insert(0, tree_lista[11])
                e_produto_status.insert(0, tree_lista[12])

                imagem = tree_lista[8]
                if imagem == "":
                    imagem = tree_lista[8]
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                # Função para ativar o batão de busca de imagens
                def buscar_foto():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    botao_on(botao_carregar)
                    return foto

                # Função para escolher a imagem
                def produto_imagem():
                    global imagem, l_imagem, imagem_string, foto
                    foto = 1
                    imagem = fd.askopenfilename()
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

                    botao_carregar['text'] = 'Trocar de foto'.upper()

                botao_foto = Button(frame_detalhes, command=buscar_foto, anchor=CENTER, text='Inserir Foto'.upper(),
                                    width=20,
                                    compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_foto.place(x=467, y=valor_y_f)
                botao_carregar = Button(frame_detalhes, command=produto_imagem, anchor=CENTER,
                                        text='Carregar Foto'.upper(),
                                        width=20,
                                        compound=CENTER, overrelief=RIDGE, font=('Ivy 7'), bg=co1, fg=co0)
                botao_carregar.place(x=467, y=valor_y_b)
                botao_off(botao_carregar)
                if foto != 1:
                    imagem_string = ""

                if foto == 1:
                    pass

                # função atualizar
                def update():
                    # Teste para verificar se foi escolhido a imagem ou não
                    global imagem, l_imagem, imagem_string, foto
                    if foto != 1:
                        imagem_string = ""
                    codigo = e_produto_codigo.get()
                    localizacao = e_produto_localizacao.get()
                    descricao = e_produto_descricao.get()
                    quantidade = e_produto_quantidade.get()
                    unidade = e_produto_unidade.get()
                    referencia = e_produto_referencia.get()
                    classe = e_produto_classe.get()
                    imagem = imagem_string
                    valor = e_produto_valor.get()
                    reserva = e_produto_seguro.get()
                    pedido = e_produto_pedido.get()
                    status = e_produto_status.get()

                    lista = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor,
                             reserva, pedido, status, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if codigo == "" or descricao == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_produto(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_produto_codigo.delete(0, END)
                    e_produto_quantidade.delete(0, END)
                    e_produto_descricao.delete(0, END)
                    e_produto_localizacao.delete(0, END)
                    e_produto_referencia.delete(0, END)
                    e_produto_classe.delete(0, END)
                    e_produto_valor.delete(0, END)
                    e_produto_seguro.delete(0, END)
                    e_produto_pedido.delete(0, END)
                    e_produto_status.delete(0, END)
                    e_produto_unidade.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_produto()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_p)
                    botao_on(botao_atualizar_p)
                    botao_on(botao_ver)
                    botao_on(botao_limpar)
                    botao_on(botao_duplicar)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT,
                                      overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função atualizar aluno
        def visualizar_produto():
            botao_on(botao_duplicar)
            botao_off(botao_novo_p)
            botao_off(botao_atualizar_p)
            # Função para escolher imagem
            global imagem, imagem_string, l_imagem
            try:
                tree_itens = tree_produto.focus()
                tree_dicionario = tree_produto.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_produto_codigo.delete(0, END)
                e_produto_localizacao.delete(0, END)
                e_produto_descricao.delete(0, END)
                e_produto_quantidade.delete(0, END)
                e_produto_unidade.delete(0, END)
                e_produto_referencia.delete(0, END)
                e_produto_classe.delete(0, END)
                e_produto_valor.delete(0, END)
                e_produto_seguro.delete(0, END)
                e_produto_pedido.delete(0, END)
                e_produto_status.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_produto_codigo.insert(0, tree_lista[1])
                e_produto_localizacao.insert(0, tree_lista[2])
                e_produto_descricao.insert(0, tree_lista[3])
                e_produto_quantidade.insert(0, tree_lista[4])
                e_produto_unidade.insert(0, tree_lista[5])
                e_produto_referencia.insert(0, tree_lista[6])
                e_produto_classe.insert(0, tree_lista[7])
                e_produto_valor.insert(0, tree_lista[9])
                e_produto_seguro.insert(0, tree_lista[10])
                e_produto_pedido.insert(0, tree_lista[11])
                e_produto_status.insert(0, tree_lista[12])

                imagem = tree_lista[8]
                if imagem == "":
                    return
                if imagem != "":
                    imagem_string = imagem

                    # Abrindo a imagem
                    imagem = Image.open(imagem)
                    imagem = imagem.resize((200, 200))
                    imagem = ImageTk.PhotoImage(imagem)
                    l_imagem = Label(frame_detalhes, image=imagem, bg=co1, fg=co4)
                    l_imagem.place(x=447, y=20)

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um item da tabela')

        # função deletar Fornecedores
        def delete_produto():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_produto.focus()
                    tree_dicionario = tree_produto.item(tree_itens)
                    tree_lista = tree_dicionario['values']

                    valor_id = tree_lista[0]

                    # deletar os dados no bando de dados
                    deletar_produto([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso')

                    # mostrando os valores na tabela
                    mostrar_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos valores da tabela')

        # Função Limpar a tela
        def limpar_produto():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            produtos()

        # Criando função para duplicar registro
        def copiar_registro():
            botao_on(botao_novo_p)
            botao_on(botao_atualizar_p)
            botao_off(botao_duplicar)

        # Função para importar o cadastro de produtos
        def importar_produtos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM produto"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_produtos.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    codigo = row['Código']
                    localizacao = row['Localização']
                    descricao = row['Descrição']
                    quantidade = row['Quantidade']
                    unidade = row['Unidade']
                    referencia = row['Referencia']
                    classe = row['Classe']
                    imagem = row['Imagem']
                    valor = row['Valor']
                    reserva = row['Reserva']
                    pedido = row['Pedido']
                    status = row['Status']

                    tabela = [codigo, localizacao, descricao, quantidade, unidade, referencia, classe, imagem, valor,
                              reserva, pedido, status]

                    # Inserindo os dados no banco de dados
                    criar_produto(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de produtos
        def exportar_produtos():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM produto"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade', 'Referencia',
                               'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_produtos.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando a Função de Busca
        def buscar_produto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM produto WHERE descricao LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def exibir_produto():
                            app_nome = Label(frame_tabela_produto, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade',
                                           'Referencia',
                                           'Classe', 'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

                            df_list = lista
                            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(
                                                                   ("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                   ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente,
                                                  anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=925, y=35)

                            global tree_produto

                            tree_produto = ttk.Treeview(frame_tabela_produto, selectmode="extended",
                                                        columns=list_header, show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_produto, orient="vertical", command=tree_produto.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_produto, orient="horizontal", command=tree_produto.xview)

                            tree_produto.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_produto.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_produto.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
                            h = [40, 80, 80, 250, 150, 150, 80, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_produto.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_produto.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_produto.insert('', 'end', values=item)

                        exibir_produto()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando a Função para bloquear a tela e voltar para tela de autenticação
        def bloqueio_tela():
            janela.destroy()
            password()

        # Procurar registro------------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW,
                       font=('Ivy 10'), bg=co1,
                       fg=co4)
        l_nome.place(x=727, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=730, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_produto, anchor=CENTER, text='Procurar'.upper(),
                                width=9,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=857, y=35)

        # Criando Itens da Tela de Produto*********************************************************************************************************************************************
        def aplicar_mascara_cod(event):
            cod = e_produto_codigo.get()
            cod_formatado = ''

            # Remover caracteres diferentes de números do Código
            cod = ''.join(filter(str.isdigit, cod))

            # Aplicar a máscara de CPF
            if len(cod) <= 3:
                cod_formatado = cod
            elif len(cod) <= 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            elif len(cod) > 10:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]
            else:
                cod_formatado = cod[:2] + '-' + cod[2:5] + '.' + cod[5:8]

            # Atualizar o texto da entry com o CPF formatado
            e_produto_codigo.delete(0, END)
            e_produto_codigo.insert(0, cod_formatado)

        def validar_digitos(P):
            # Verifica se o número de dígitos é menor ou igual a 10
            if len(P) <= 10:
                return True
            return False

        vcmd = (janela.register(validar_digitos), '%P')

        l_produto_codigo = Label(frame_detalhes, text="Código:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_produto_codigo.place(x=4, y=10)
        e_produto_codigo = Entry(frame_detalhes, validate='key', validatecommand=vcmd, width=20, justify='left',
                                 relief='solid')
        e_produto_codigo.place(x=87, y=10)

        e_produto_codigo.bind("<KeyRelease>", aplicar_mascara_cod)

        l_produto_localizacao = Label(frame_detalhes, text="Localização:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                      fg=co4)
        l_produto_localizacao.place(x=227, y=10)
        e_produto_localizacao = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_produto_localizacao.place(x=307, y=10)

        l_produto_descricao = Label(frame_detalhes, text="Descrição:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                    fg=co4)
        l_produto_descricao.place(x=4, y=40)
        e_produto_descricao = Entry(frame_detalhes, width=52, justify='left', relief='solid')
        e_produto_descricao.place(x=87, y=40)

        l_produto_quantidade = Label(frame_detalhes, text="Quantidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_produto_quantidade.place(x=4, y=70)
        e_produto_quantidade = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_quantidade.place(x=87, y=70)

        l_produto_unidade = Label(frame_detalhes, text="Unidade:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_produto_unidade.place(x=217, y=70)
        e_produto_unidade = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_unidade.place(x=277, y=70)

        l_produto_referencia = Label(frame_detalhes, text="Referência:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                     fg=co4)
        l_produto_referencia.place(x=4, y=100)
        e_produto_referencia = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_referencia.place(x=87, y=100)

        l_produto_classe = Label(frame_detalhes, text="Classe:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_classe.place(x=217, y=100)
        e_produto_classe = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_classe.place(x=277, y=100)

        l_produto_valor = Label(frame_detalhes, text="Valor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                fg=co4)
        l_produto_valor.place(x=4, y=130)
        e_produto_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_valor.place(x=87, y=130)

        l_produto_seguro = Label(frame_detalhes, text="Reserva:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_seguro.place(x=217, y=130)
        e_produto_seguro = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_seguro.place(x=277, y=130)

        l_produto_pedido = Label(frame_detalhes, text="Pedido:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                 fg=co4)
        l_produto_pedido.place(x=4, y=160)
        e_produto_pedido = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_produto_pedido.place(x=87, y=160)

        l_produto_status = Label(frame_detalhes, text="Status:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_produto_status.place(x=217, y=160)
        e_produto_status = ttk.Combobox(frame_detalhes, width=17, font=('Ivy 8'))
        e_produto_status['values'] = ('ATIVO', 'INATIVO')
        e_produto_status.place(x=277, y=160)

        # Botões de controle de produtos*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_bloquear

        def button_houver(e):
            botao_novo_p["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_p["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_p = Button(frame_detalhes, command=novo_produto, image=busca_nt, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_p.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_p["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_p["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_p = Button(frame_detalhes, command=update_produto, image=img_editar, text='', width=30,
                                   compound=LEFT,
                                   overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_p.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_produto, image=img_deletar, text='', width=30,
                               compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_produto, image=img_limpar, text='', width=30,
                              compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_produto, image=img_localizar, text='', width=30,
                           compound=LEFT,
                           overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_produtos, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_produtos, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        def button_houver_bloqueio(e):
            botao_bloqueio["bg"] = "white"
            status_label.config(text="     Bloquear Tela")

        def button_houver_leave_bloqueio(e):
            botao_bloqueio["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_bloquear = Image.open('icone/trancado.png')
        img_bloquear = img_bloquear.resize((20, 20))
        img_bloquear = ImageTk.PhotoImage(img_bloquear)
        botao_bloqueio = Button(frame_detalhes, command=bloqueio_tela, image=img_bloquear, text='Bloquear Tela',
                                width=150,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_bloqueio.place(x=1150, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_p.bind("<Enter>", button_houver)
        botao_novo_p.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_p.bind("<Enter>", button_houver_editar)
        botao_atualizar_p.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        botao_bloqueio.bind("<Enter>", button_houver_bloqueio)
        botao_bloqueio.bind("<Leave>", button_houver_leave_bloqueio)

        #Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_p)
        botao_off(botao_atualizar_p)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela Produto--------------------------------------------------------------------------------------------------
        def mostrar_produto():
            app_nome = Label(frame_tabela_produto, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'Código', 'Localização', 'Descrição', 'Quantidade', 'Unidade', 'Referencia', 'Classe',
                           'Imagem', 'Valor', 'Reserva', 'Pedido', 'Status']

            df_list = ver_produto()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_produto

            tree_produto = ttk.Treeview(frame_tabela_produto, selectmode="extended", columns=list_header,
                                        show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_produto, orient="vertical", command=tree_produto.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_produto, orient="horizontal", command=tree_produto.xview)

            tree_produto.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_produto.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_produto.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw", "nw"]
            h = [40, 80, 80, 250, 150, 130, 120, 80, 80, 80, 80, 80, 80]
            n = 0

            for col in list_header:
                tree_produto.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_produto.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_produto.insert('', 'end', values=item)

        mostrar_produto()

    # Criando a seção de relatórios**********************************************************************************************************************************************
    def relatorios():
        # Criando a Função de Busca
        def buscar_relatorio():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE nome LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=35)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_referente():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_referente_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE referente LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=95)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_fornecedor_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM caixa WHERE local LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=227, y=150)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute('SELECT * FROM caixa WHERE data BETWEEN ? AND ?', (data,
                                                                                  data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        # Tabela Caixa
                        def mostrar_caixa():
                            app_nome = Label(frame_tabela, text="Movimentações", height=1, pady=0, padx=0,
                                             relief="flat",
                                             anchor=NW,
                                             font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['id', 'Data', 'hora', 'Local', 'Nome', 'CPF/CPNJ', 'IE', 'Endereço',
                                           'Bairro',
                                           'Cidade', 'CEP',
                                           'Estado', 'Produto', 'Quantidade', 'Valor', 'Desconto', 'Valor Total',
                                           'Tipo de Pagamento',
                                           'Natureza', 'Descrição', 'Telefone']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=397, y=205)

                            global tree_caixa

                            tree_caixa = ttk.Treeview(frame_tabela, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree_caixa.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela, orient="horizontal", command=tree_caixa.xview)

                            tree_caixa.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_caixa.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "nw", "center", "center", "center", "center", "center", "center", "nw",
                                  "nw",
                                  "nw", "center",
                                  "center", "center", "center", "center", "center", "center", "center", "center"]
                            h = [30, 70, 70, 100, 100, 80, 80, 100, 70, 70, 70, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40]
                            n = 0

                            for col in list_header:
                                tree_caixa.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_caixa.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_caixa.insert('', 'end', values=item)

                        mostrar_caixa()
            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=4, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=4, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_relatorio, anchor=CENTER, text='Procurar'.upper(),
                                width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=117, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW,
                            font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=4, y=70)
        caixa = ver_caixa()
        referente = []
        for i in caixa:
            referente.append(i[18])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=4, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_referente, anchor=CENTER,
                                          text='Procurar'.upper(), width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=117, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=4, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=4, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=117, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=4, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=4, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2,
                                          year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=147, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=287, y=205)

    def notas():
        # Criando frames para tabelas
        frame_tabela_notas = Frame(frame_tabela, width=295, height=200, bg=co1)
        frame_tabela_notas.grid(row=0, column=0, pady=0, padx=10, sticky=NSEW)

        # Detalhes de Notas-----------------------------------------------------------
        # função nova nota
        def nova_nota():
            banco = e_banco.get()
            data_emissao = e_data_emissao.get()
            fatura_numero = e_fatura_numero.get()
            fatura_valor = e_fatura_valor.get()
            ordem = e_ordem.get()
            ordem_valor = e_ordem_valor.get()
            data_vencimento = l_data_vencimento.get()
            data_aceite = l_data_aceite.get()
            fornecedor_notas = e_fornecedor_notas.get()
            cliente_notas = e_cliente_notas.get()

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM notas WHERE banco = ?"
            cursor.execute(consulta, (banco,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()

            lista = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento, data_aceite,
                     fornecedor_notas, cliente_notas]

            # Verificando se os valores estão vazios ou não
            for i in lista:
                if i == "":
                    messagebox.showerror('Erro', 'Preencha todos os campos')
                    return
            for resultado in resultados:
                if fatura_numero in resultado:
                    messagebox.showerror('Erro', "Registro já existente")
                    return

            # Inserindo os dados
            criar_notas(lista)

            # mostrando mensagem de sucesso
            messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
            e_banco.delete(0, END)
            e_data_emissao.delete(0, END)
            e_fatura_numero.delete(0, END)
            e_fatura_valor.delete(0, END)
            e_ordem.delete(0, END)
            e_ordem_valor.delete(0, END)
            l_data_vencimento.delete(0, END)
            l_data_aceite.delete(0, END)
            e_fornecedor_notas.delete(0, END)
            e_cliente_notas.delete(0, END)

            # Mostrando os valores na tabela
            mostrar_notas()

        # função atualizar notas
        def update_nota():
            try:
                botao_off(botao_novo_nt)
                botao_off(botao_atualizar_ct)
                tree_itens = tree_notas.focus()
                tree_dicionario = tree_notas.item(tree_itens)
                tree_lista = tree_dicionario['values']
                valor_id = tree_lista[0]

                # inserindo os valores nas entry
                e_banco.insert(0, tree_lista[1])
                e_data_emissao.insert(0, tree_lista[2])
                e_fatura_numero.insert(0, tree_lista[3])
                e_fatura_valor.insert(0, tree_lista[4])
                e_ordem.insert(0, tree_lista[5])
                e_ordem_valor.insert(0, tree_lista[6])
                l_data_vencimento.insert(0, tree_lista[7])
                l_data_aceite.insert(0, tree_lista[8])
                e_fornecedor_notas.insert(0, tree_lista[9])
                e_cliente_notas.insert(0, tree_lista[10])

                # função atualizar
                def update():
                    banco = e_banco.get()
                    data_emissao = e_data_emissao.get()
                    fatura_numero = e_fatura_numero.get()
                    fatura_valor = e_fatura_valor.get()
                    ordem = e_ordem.get()
                    ordem_valor = e_ordem_valor.get()
                    data_vencimento = l_data_vencimento.get()
                    data_aceite = l_data_aceite.get()
                    fornecedor_notas = e_fornecedor_notas.get()
                    cliente_notas = e_cliente_notas.get()

                    lista = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento,
                             data_aceite, fornecedor_notas, cliente_notas, valor_id]

                    # Verificando se os valores estão vazios ou não
                    for i in lista:
                        if i == "":
                            messagebox.showerror('Erro', 'Preencha todos os campos')
                            return
                    # Inserindo os dados
                    atualizar_notas(lista)

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso!')
                    e_banco.delete(0, END)
                    e_data_emissao.delete(0, END)
                    e_fatura_numero.delete(0, END)
                    e_fatura_valor.delete(0, END)
                    e_ordem.delete(0, END)
                    e_ordem_valor.delete(0, END)
                    l_data_vencimento.delete(0, END)
                    l_data_aceite.delete(0, END)
                    e_fornecedor_notas.delete(0, END)
                    e_cliente_notas.delete(0, END)

                    # Mostrando os valores na tabela
                    mostrar_notas()

                    # destruindo o botão salvar apos salvar os dados
                    botao_salvar.destroy()
                    botao_on(botao_novo_nt)
                    botao_on(botao_atualizar_ct)

                global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar
                img_salvar = Image.open('icone/salvar94.png')
                img_salvar = img_salvar.resize((20, 20))
                img_salvar = ImageTk.PhotoImage(img_salvar)
                botao_salvar = Button(frame_detalhes, command=update, image=img_salvar, text='', width=30,
                                      compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
                botao_salvar.place(x=4, y=valor_y_b)
            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função deletar notas
        def delete_notas():
            try:
                resultado = messagebox.askokcancel('Atenção!', 'Quer realmente apagar este registro?')
                if resultado:
                    tree_itens = tree_notas.focus()
                    tree_dicionario = tree_notas.item(tree_itens)
                    tree_lista = tree_dicionario['values']
                    valor_id = tree_lista[0]

                    # Deletar os dados no banco de dados
                    deletar_notas([valor_id])

                    # mostrando mensagem de sucesso
                    messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')

                    mostrar_notas()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função Limpar a tela
        def limpar_notas():
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função adicionar
            notas()

        def visualizar_notas():
            botao_on(botao_duplicar)
            botao_off(botao_novo_nt)
            botao_off(botao_atualizar_ct)
            try:
                tree_itens = tree_notas.focus()
                tree_dicionario = tree_notas.item(tree_itens)
                tree_lista = tree_dicionario['values']

                valor_id = tree_lista[0]

                # limpando os campos de entrada
                e_banco.delete(0, END)
                e_data_emissao.delete(0, END)
                e_fatura_numero.delete(0, END)
                e_fatura_valor.delete(0, END)
                e_ordem.delete(0, END)
                e_ordem_valor.delete(0, END)
                l_data_vencimento.delete(0, END)
                l_data_aceite.delete(0, END)
                e_fornecedor_notas.delete(0, END)
                e_cliente_notas.delete(0, END)

                # Inserindo os valores nos campos de entrada
                e_banco.insert(0, tree_lista[1])
                e_data_emissao.insert(0, tree_lista[2])
                e_fatura_numero.insert(0, tree_lista[3])
                e_fatura_valor.insert(0, tree_lista[4])
                e_ordem.insert(0, tree_lista[5])
                e_ordem_valor.insert(0, tree_lista[6])
                l_data_vencimento.insert(0, tree_lista[7])
                l_data_aceite.insert(0, tree_lista[8])
                e_fornecedor_notas.insert(0, tree_lista[9])
                e_cliente_notas.insert(0, tree_lista[10])

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando relatório do Caixa duplicado
        def copiar_registro():
            botao_on(botao_novo_nt)
            botao_on(botao_atualizar_ct)
            botao_off(botao_duplicar)

        # Função para importar o cadastro de notas
        def importar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM notas"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                tabela_dados = pd.read_excel('arquivos/tabela_notas.xlsx')
                for index, row in tabela_dados.iterrows():
                    id = row['ID']
                    banco = row['BANCO']
                    data_emissao = row['EMISSÃO']
                    fatura_numero = row['FATURA']
                    fatura_valor = row['VALOR']
                    ordem = row['ORDEM']
                    ordem_valor = row['VALOR DA ORDEM']
                    data_vencimento = row['VENCIMENTO']
                    data_aceite = row['ACEITE']
                    fornecedor_notas = row['FORNECEDOR']
                    cliente_notas = row['CLIENTE']

                    tabela = [banco, data_emissao, fatura_numero, fatura_valor, ordem, ordem_valor, data_vencimento,
                              data_aceite,
                              fornecedor_notas, cliente_notas]

                    # Inserindo os dados no banco de dados
                    criar_notas(tabela)

                messagebox.showinfo('Sucesso', 'Importação concluída com sucesso!')
                mostrar_notas()

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Função para exportar o cadastro de notas
        def exportar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM notas"
                cursor.execute(consulta)

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM', 'VENCIMENTO',
                               'ACEITE',
                               'FORNECEDOR', 'CLIENTE']

                tabela_dados = pd.DataFrame(lista)
                tabela_dados.columns = list_header
                nome_arquivo = 'arquivos/tabela_notas.xlsx'
                tabela_dados.to_excel(nome_arquivo, index=False)

                messagebox.showinfo('Sucesso', 'Tabela foi exportada com sucesso!')

                # Código para abrir o arquivo xlsx

            except IndexError:
                messagebox.showerror('Erro', 'Selecione um dos itens da tabela')

        # Criando Itens da Tela de Contrato*********************************************************************************************************************************************
        l_banco = Label(frame_detalhes, text="Banco:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_banco.place(x=4, y=10)
        e_banco = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_banco.place(x=57, y=10)

        l_fatura_numero = Label(frame_detalhes, text="Nº Fatura:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_fatura_numero.place(x=198, y=10)
        e_fatura_numero = Entry(frame_detalhes, width=21, justify='left', relief='solid')
        e_fatura_numero.place(x=263, y=10)

        fornecedores = ver_fornecedor()
        fornecedor = []
        for i in fornecedores:
            fornecedor.append(i[1])
        l_fornecedor_notas = Label(frame_detalhes, text="Fornecedor:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                   fg=co4)
        l_fornecedor_notas.place(x=4, y=40)
        e_fornecedor_notas = ttk.Combobox(frame_detalhes, width=48, font=('Ivy 8 bold'))
        e_fornecedor_notas['values'] = (fornecedor)
        e_fornecedor_notas.place(x=86, y=40)

        clientes = ver_clientes()
        cliente = []
        for i in clientes:
            cliente.append(i[1])
        l_cliente_notas = Label(frame_detalhes, text="Cliente:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_cliente_notas.place(x=4, y=70)
        e_cliente_notas = ttk.Combobox(frame_detalhes, width=53, font=('Ivy 8 bold'))
        e_cliente_notas['values'] = (cliente)
        e_cliente_notas.place(x=57, y=70)

        l_ordem = Label(frame_detalhes, text="Ordem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_ordem.place(x=4, y=100)
        e_ordem = Entry(frame_detalhes, width=15, justify='left', relief='solid')
        e_ordem.place(x=57, y=100)

        l_ordem_valor = Label(frame_detalhes, text="Valor da Ordem:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                              fg=co4)
        l_ordem_valor.place(x=162, y=100)
        e_ordem_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_ordem_valor.place(x=272, y=100)

        data = datetime.today()
        ano_atual = data.year
        # Criando campos de entrada
        l_data_emissao = Label(frame_detalhes, text="Data de emissão:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_data_emissao.place(x=4, y=130)
        e_data_emissao = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                   locale="pt_br")
        e_data_emissao.place(x=112, y=130)

        l_data_vencimento = Label(frame_detalhes, text="Vencimento:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                                  fg=co4)
        l_data_vencimento.place(x=217, y=130)
        l_data_vencimento = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                      locale="pt_br")
        l_data_vencimento.place(x=302, y=130)

        l_data_aceite = Label(frame_detalhes, text="Data aceite:", height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
        l_data_aceite.place(x=4, y=160)
        l_data_aceite = DateEntry(frame_detalhes, width=12, background='darkblue', borderwidth=2, year=ano_atual,
                                  locale="pt_br")
        l_data_aceite.place(x=87, y=160)

        l_fatura_valor = Label(frame_detalhes, text="Valor Fatura:", height=1, anchor=NW, font=('Ivy 10'), bg=co1,
                               fg=co4)
        l_fatura_valor.place(x=187, y=160)
        e_fatura_valor = Entry(frame_detalhes, width=20, justify='left', relief='solid')
        e_fatura_valor.place(x=272, y=160)

        # Botões de controle de contrato*********************************************************************************************************************************
        global busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar

        def button_houver(e):
            botao_novo_nt["bg"] = "white"
            status_label.config(text="     Novo Registro")

        def button_houver_leave(e):
            botao_novo_nt["bg"] = "SystemButtonFace"
            status_label.config(text="")

        busca_nt = Image.open('icone/novo.png')
        busca_nt = busca_nt.resize((20, 20))
        busca_nt = ImageTk.PhotoImage(busca_nt)
        botao_novo_nt = Button(frame_detalhes, command=nova_nota, image=busca_nt, text='', width=30, compound=LEFT,
                               overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_novo_nt.place(x=4, y=valor_y_b)

        def button_houver_editar(e):
            botao_atualizar_ct["bg"] = "white"
            status_label.config(text="     Editar Registro")

        def button_houver_leave_editar(e):
            botao_atualizar_ct["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_editar = Image.open('icone/editar.png')
        img_editar = img_editar.resize((20, 20))
        img_editar = ImageTk.PhotoImage(img_editar)
        botao_atualizar_ct = Button(frame_detalhes, command=update_nota, image=img_editar, text='', width=30,
                                    compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_atualizar_ct.place(x=54, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=104, y=valor_y_e)

        def button_houver_deletar(e):
            botao_deletar["bg"] = "white"
            status_label.config(text="     Deletar Registro")

        def button_houver_leave_deletar(e):
            botao_deletar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_deletar = Image.open('icone/deletar.png')
        img_deletar = img_deletar.resize((20, 20))
        img_deletar = ImageTk.PhotoImage(img_deletar)
        botao_deletar = Button(frame_detalhes, command=delete_notas, image=img_deletar, text='', width=30,
                               compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_deletar.place(x=304, y=valor_y_b)

        def button_houver_duplicar(e):
            botao_duplicar["bg"] = "white"
            status_label.config(text="     Duplicar Registro")

        def button_houver_leave_duplicar(e):
            botao_duplicar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_duplicar = Image.open('icone/duplicar.png')
        img_duplicar = img_duplicar.resize((20, 20))
        img_duplicar = ImageTk.PhotoImage(img_duplicar)
        botao_duplicar = Button(frame_detalhes, command=copiar_registro, image=img_duplicar, text='', width=30,
                                compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_duplicar.place(x=178, y=valor_y_b)

        def button_houver_limpar(e):
            botao_limpar["bg"] = "white"
            status_label.config(text="     Limpar Tela")

        def button_houver_leave_limpar(e):
            botao_limpar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_limpar = Image.open('icone/limpar.png')
        img_limpar = img_limpar.resize((20, 20))
        img_limpar = ImageTk.PhotoImage(img_limpar)
        botao_limpar = Button(frame_detalhes, command=limpar_notas, image=img_limpar, text='', width=30, compound=LEFT,
                              overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_limpar.place(x=228, y=valor_y_b)

        pipe = Label(frame_detalhes, text="|", height=1, anchor=NW, font=('Ivy 20'), bg=co1, fg=co4)
        pipe.place(x=280, y=valor_y_e)

        def button_houver_ver(e):
            botao_ver["bg"] = "white"
            status_label.config(text="     Visualizar Registro")

        def button_houver_leave_ver(e):
            botao_ver["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_localizar = Image.open('icone/visualizar.png')
        img_localizar = img_localizar.resize((20, 20))
        img_localizar = ImageTk.PhotoImage(img_localizar)
        botao_ver = Button(frame_detalhes, command=visualizar_notas, image=img_localizar, text='', width=30,
                           compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_ver.place(x=128, y=valor_y_b)

        def button_houver_importar(e):
            botao_importar["bg"] = "white"
            status_label.config(text="     Importar Registros")

        def button_houver_leave_importar(e):
            botao_importar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_importar = Image.open('icone/importar.png')
        img_importar = img_importar.resize((20, 20))
        img_importar = ImageTk.PhotoImage(img_importar)
        botao_importar = Button(frame_detalhes, command=importar_notas, image=img_importar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_importar.place(x=354, y=valor_y_b)

        def button_houver_exportar(e):
            botao_exportar["bg"] = "white"
            status_label.config(text="     Exportar Tabela")

        def button_houver_leave_exportar(e):
            botao_exportar["bg"] = "SystemButtonFace"
            status_label.config(text="")

        img_exportar = Image.open('icone/exportar.png')
        img_exportar = img_exportar.resize((20, 20))
        img_exportar = ImageTk.PhotoImage(img_exportar)
        botao_exportar = Button(frame_detalhes, command=exportar_notas, image=img_exportar, text='', width=30,
                                compound=LEFT,
                                overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
        botao_exportar.place(x=404, y=valor_y_b)

        status_label = Label(frame_detalhes, text="", width=1200, bd=1, relief=SUNKEN, anchor=NW)
        status_label.place(x=0, y=valor_y_st)

        botao_novo_nt.bind("<Enter>", button_houver)
        botao_novo_nt.bind("<Leave>", button_houver_leave)

        botao_deletar.bind("<Enter>", button_houver_deletar)
        botao_deletar.bind("<Leave>", button_houver_leave_deletar)

        botao_atualizar_ct.bind("<Enter>", button_houver_editar)
        botao_atualizar_ct.bind("<Leave>", button_houver_leave_editar)

        botao_duplicar.bind("<Enter>", button_houver_duplicar)
        botao_duplicar.bind("<Leave>", button_houver_leave_duplicar)

        botao_limpar.bind("<Enter>", button_houver_limpar)
        botao_limpar.bind("<Leave>", button_houver_leave_limpar)

        botao_ver.bind("<Enter>", button_houver_ver)
        botao_ver.bind("<Leave>", button_houver_leave_ver)

        botao_importar.bind("<Enter>", button_houver_importar)
        botao_importar.bind("<Leave>", button_houver_leave_importar)

        botao_exportar.bind("<Enter>", button_houver_exportar)
        botao_exportar.bind("<Leave>", button_houver_leave_exportar)

        # Bloqueando o acesso de usuário*********************************************************************************
        botao_off(botao_novo_nt)
        botao_off(botao_atualizar_ct)
        botao_off(botao_deletar)
        botao_off(botao_duplicar)
        botao_off(botao_importar)
        botao_off(botao_exportar)

        # Tabela contrato--------------------------------------------------------------------------------------------------
        def mostrar_notas():
            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

            # creating a treeview with dual scrollbars
            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM', 'VENCIMENTO',
                           'ACEITE',
                           'FORNECEDOR', 'CLIENTE']

            df_list = ver_notas()
            df_list = sorted(df_list, key=lambda x: x[0], reverse=True)

            global tree_notas

            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header, show="headings")

            # vertical scrollbar
            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
            # horizontal scrollbar
            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
            tree_notas.grid(column=0, row=1, sticky='nsew')
            vsb.grid(column=1, row=1, sticky='ns')
            hsb.grid(column=0, row=2, sticky='ew')
            frame_tabela_notas.grid_rowconfigure(0, weight=12)

            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 150, 150]
            n = 0

            for col in list_header:
                tree_notas.heading(col, text=col.title(), anchor=NW)
                # adjust the column's width to the header string
                tree_notas.column(col, width=h[n], anchor=hd[n])

                n += 1

            for item in df_list:
                tree_notas.insert('', 'end', values=item)

        mostrar_notas()

        # Criando seção de busca para Notas:*****************************************************************************************************

        # Criando a Função de Busca
        def buscar_notas():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE fatura_numero LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=35)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do referente
        def relatorio_objeto():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE ordem LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=95)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_fornecedor():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                nome_caixa = e_nome_procurar.get().upper()

                if nome_caixa == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute(f"SELECT * FROM notas WHERE fornecedor_notas LIKE '%{nome_caixa}%'")

                # Recuperando os resultados
                resultados = cursor.fetchall()
                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)
                # Fechando a conexão com o banco de dados
                conn.close()
                e_nome_procurar.delete(0, END)
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Registro não encontrado')
                        break
                    else:
                        def mostrar_contrato_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=723, y=150)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_contrato_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Criando relatório do fornecedor
        def relatorio_data():
            try:
                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()
                data = e_data_procurar.get().upper()
                data_atual = e_data_final_procurar.get().upper()

                if data == "":
                    messagebox.showerror('Erro', 'Preencha o campo nome')
                    return
                # Realizando a busca
                cursor.execute("SELECT * FROM notas WHERE data_vencimento BETWEEN '{}' AND '{}';".format(data,
                                                                                                         data_atual))  # Procura um registro com a data = data maior e data_atual = data menor, lembrando que isso dentro do mesmo mês

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Exibindo os resultados
                lista = []
                for resultado in resultados:
                    lista.append(resultado)

                # Fechando a conexão com o banco de dados
                conn.close()
                for i in lista:
                    if i == "":
                        break
                    else:
                        def mostrar_notas_nome():
                            app_nome = Label(frame_tabela_notas, text="", height=1, pady=0, padx=0, relief="flat",
                                             anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
                            app_nome.grid(row=0, column=0, padx=0, pady=10, sticky=NSEW)

                            # creating a treeview with dual scrollbars
                            list_header = ['ID', 'BANCO', 'EMISSÃO', 'FATURA', 'VALOR', 'ORDEM', 'VALOR DA ORDEM',
                                           'VENCIMENTO', 'ACEITE', 'FORNECEDOR', 'CLIENTE']

                            df_list = lista
                            tabela_cliente = pd.DataFrame(lista)
                            tabela_cliente.columns = list_header

                            def salvar_documento_cliente():
                                # Abrir janela de salvamento
                                arquivo = fd.asksaveasfilename(defaultextension=".xlsx",
                                                               filetypes=(("Pasta de Trabalho do Excel", "*.xlsx"),
                                                                          ("Todos os Arquivos", "*.*")))
                                # Código para salvar o arquivo
                                if arquivo == "":
                                    print("")
                                else:
                                    tabela_cliente.to_excel(arquivo, index=False)

                            botao_salvar = Button(frame_detalhes, command=salvar_documento_cliente, anchor=CENTER,
                                                  text='Salvar'.upper(),
                                                  width=15,
                                                  overrelief=RIDGE,
                                                  font=('Ivy 7 bold'), bg=co1, fg=co0)
                            botao_salvar.place(x=860, y=205)

                            global tree_notas

                            tree_notas = ttk.Treeview(frame_tabela_notas, selectmode="extended", columns=list_header,
                                                      show="headings")

                            # vertical scrollbar
                            vsb = ttk.Scrollbar(frame_tabela_notas, orient="vertical", command=tree_notas.yview)
                            # horizontal scrollbar
                            hsb = ttk.Scrollbar(frame_tabela_notas, orient="horizontal", command=tree_notas.xview)

                            tree_notas.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
                            tree_notas.grid(column=0, row=1, sticky='nsew')
                            vsb.grid(column=1, row=1, sticky='ns')
                            hsb.grid(column=0, row=2, sticky='ew')
                            frame_tabela_notas.grid_rowconfigure(0, weight=12)

                            hd = ["nw", "nw", "e", "e", "nw", "nw", "e", "e", "nw", "nw", "nw"]
                            h = [30, 80, 80, 80, 150, 80, 80, 80, 80, 80, 80]
                            n = 0

                            for col in list_header:
                                tree_notas.heading(col, text=col.title(), anchor=NW)
                                # adjust the column's width to the header string
                                tree_notas.column(col, width=h[n], anchor=hd[n])

                                n += 1

                            for item in df_list:
                                tree_notas.insert('', 'end', values=item)

                        mostrar_notas_nome()

            except IndexError:
                messagebox.showerror('Erro', 'Digite um nome')

        # Procurar registro Cliente---------------------------------------------------------------
        l_nome = Label(frame_detalhes, text="Procurar [ Entrar com nome ]", height=1, anchor=NW, font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_nome.place(x=494, y=10)
        e_nome_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_nome_procurar.place(x=494, y=35)

        botao_procurar = Button(frame_detalhes, command=buscar_notas, anchor=CENTER, text='Procurar'.upper(), width=15,
                                overrelief=RIDGE,
                                font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar.place(x=613, y=35)

        # Procurar registro Referencia---------------------------------------------------------------
        l_referente = Label(frame_detalhes, text="Procurar [ Entrar com referência ]", height=1, anchor=NW,
                            font=('Ivy 10'),
                            bg=co1,
                            fg=co4)
        l_referente.place(x=494, y=70)
        ver_contrato = ver_contratos()
        referente = []
        for i in ver_contrato:
            referente.append(i[2])
        e_referente_procurar = ttk.Combobox(frame_detalhes, width=18, font=('Ivy 7 bold'))
        e_referente_procurar['values'] = (referente)
        e_referente_procurar.place(x=494, y=95)

        botao_procurar_referente = Button(frame_detalhes, command=relatorio_objeto, anchor=CENTER,
                                          text='Procurar'.upper(),
                                          width=15,
                                          overrelief=RIDGE,
                                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_referente.place(x=613, y=95)

        # Procurar registro Fornecedor---------------------------------------------------------------
        l_fornecedor = Label(frame_detalhes, text="Procurar [ Entrar com fornecedor ]", height=1, anchor=NW,
                             font=('Ivy 10'),
                             bg=co1,
                             fg=co4)
        l_fornecedor.place(x=494, y=125)
        e_fornecedor_procurar = Entry(frame_detalhes, width=18, justify='left', relief='solid')
        e_fornecedor_procurar.place(x=494, y=150)

        botao_procurar_fornecedor = Button(frame_detalhes, command=relatorio_fornecedor, anchor=CENTER,
                                           text='Procurar'.upper(), width=15,
                                           overrelief=RIDGE,
                                           font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_fornecedor.place(x=613, y=150)

        # Procurar registro DATA---------------------------------------------------------------
        data = datetime.today()
        ano_atual = data.year
        l_data = Label(frame_detalhes, text="Procurar [ Entrar com o intervalo ]", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=co1,
                       fg=co4)
        l_data.place(x=494, y=180)
        e_data_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2, year=ano_atual,
                                    locale="pt_br")
        e_data_procurar.place(x=494, y=205)

        e_data_final_procurar = DateEntry(frame_detalhes, width=18, background='darkblue', borderwidth=2,
                                          year=ano_atual,
                                          locale="pt_br")
        e_data_final_procurar.place(x=627, y=205)

        botao_procurar_data = Button(frame_detalhes, command=relatorio_data, anchor=CENTER,
                                     text='Procurar'.upper(), width=15,
                                     overrelief=RIDGE,
                                     font=('Ivy 7 bold'), bg=co1, fg=co0)
        botao_procurar_data.place(x=757, y=205)

    def manutencao():
        def fazer_backup():
            nome_banco = 'bdsystem.db'
            file = fd.askdirectory()
            pasta_destino = file
            # Cria o caminho completo para o backup com o nome do banco de dados
            caminho_backup = f"{pasta_destino}/{nome_banco}.backup"

            try:
                # Copia o arquivo do banco de dados para a pasta de destino
                shutil.copy(nome_banco, caminho_backup)
                messagebox.showinfo('Backup', 'Backup criado com sucesso!')
            except FileNotFoundError:
                messagebox.showerror('Erro', 'Arquivo do banco de dados não encontrado.')
            except Exception as ex:
                messagebox.showerror('Erro', 'Erro ao criar o backup:', ex)

        l_backup = Button(frame_detalhes, command=fazer_backup, anchor=CENTER,
                          text="Backup do Banco de Dados".upper(), width=25,
                          overrelief=RIDGE,
                          font=('Ivy 7 bold'), bg=co1, fg=co0)
        l_backup.place(x=4, y=10)

        # Criando a função Help onde estão as informações da versão e de quem criou o sistema
        def informacao():
            tela = tkinter.Toplevel(janela)
            tela.geometry("500x300")
            imagem = Image.open("img/JAC.png")
            imagem = imagem.resize((500,300))
            imagem = ImageTk.PhotoImage(imagem)
            label_imagem = ttk.Label(tela, image=imagem)
            label_imagem.pack()

            #messagebox.showinfo('Help', 'JAC - Devolopment\n\n Versão: 2.0.0')

            l_info = Label(tela, text="Esqueci minha senha!",image=imagem, height=1, anchor=NW,
                              font=('Ivy 10'), highlightthickness=0, borderwidth=0, foreground="#feffff")
            l_info.place(x=90, y=70)

            tela.mainloop()

        l_help = Button(frame_tabela, command=informacao, anchor=CENTER,
                        text="  help!  ".upper(), width=9,
                        overrelief=RIDGE,
                        font=('Ivy 7 bold'), bg=co1, fg=co0)
        l_help.place(x=4, y=200)

        botao_off(l_backup)

    # *****************************************************************************************************************************************************************************
    # Função de controle--------------------------------------------------------
    def control(i):
        # Criando o Dashboard
        if i == 'dashboard':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função Dashboard
            dashboard()
        # cadastro de caixa
        if i == 'caixa':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função caixa
            caixa()
        # criando a função para adicionar pessoas
        if i == 'clientes':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função clientes
            clientes()
        if i == 'fornecedores':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função fornecedores
            fornecedores()

        if i == 'contratos':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função contratos
            contratos()

        if i == 'produtos':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função produtos
            produtos()

        if i == 'imoveis':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função produtos
            imoveis()

        if i == 'notas':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função notas
            notas()

        if i == 'manutencao':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função manutenção
            manutencao()

        if i == 'relatorios':
            for widget in frame_detalhes.winfo_children():
                widget.destroy()
            for widget in frame_tabela.winfo_children():
                widget.destroy()
            # chamando a função relatorios
            relatorios()

    # Finalizando a função de controle
    # ************************************************************************************************************************************************************************************************
    # Criando botões do menu
    app_img_dashboard = Image.open('icone/dashboard.png')
    app_img_dashboard = app_img_dashboard.resize((40, 40))
    app_img_dashboard = ImageTk.PhotoImage(app_img_dashboard)
    app_dashboard = Button(frame_dados, command=lambda: control('dashboard'), image=app_img_dashboard, text='Dashboard',
                           width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_dashboard.place(x=10, y=10)

    app_img_cadastro = Image.open('icone/grande-parcela.png')
    app_img_cadastro = app_img_cadastro.resize((40, 40))
    app_img_cadastro = ImageTk.PhotoImage(app_img_cadastro)
    app_cadastro = Button(frame_dados, command=lambda: control('caixa'), image=app_img_cadastro, text='Movimentações',
                          width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_cadastro.place(x=173, y=10)

    app_img_add_clientes = Image.open('icone/clientes.png')
    app_img_add_clientes = app_img_add_clientes.resize((40, 40))
    app_img_add_clientes = ImageTk.PhotoImage(app_img_add_clientes)
    app_add_clientes = Button(frame_dados, command=lambda: control('clientes'), image=app_img_add_clientes,
                              text=' Clientes', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                              fg=co0)
    app_add_clientes.place(x=336, y=10)

    app_img_add_pessoas = Image.open('icone/corporativo.png')
    app_img_add_pessoas = app_img_add_pessoas.resize((40, 40))
    app_img_add_pessoas = ImageTk.PhotoImage(app_img_add_pessoas)
    app_add_pessoas = Button(frame_dados, command=lambda: control('fornecedores'), image=app_img_add_pessoas,
                             text=' Fornecedores', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
                             fg=co0)
    app_add_pessoas.place(x=499, y=10)

    # app_img_add_imoveis = Image.open('icone/casa.png')
    # app_img_add_imoveis = app_img_add_imoveis.resize((40, 40))
    # app_img_add_imoveis = ImageTk.PhotoImage(app_img_add_imoveis)
    # app_add_pessoas = Button(frame_dados, command=lambda: control('imoveis'), image=app_img_add_imoveis,
    # text=' Imóveis', width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1,
    # fg=co0)
    # app_add_pessoas.place(x=825, y=10)

    app_img_contrato = Image.open('icone/editar64.png')
    app_img_contrato = app_img_contrato.resize((40, 40))
    app_img_contrato = ImageTk.PhotoImage(app_img_contrato)
    app_contrato = Button(frame_dados, command=lambda: control('contratos'), image=app_img_contrato, text=' Contratos',
                          width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_contrato.place(x=662, y=10)

    app_img_adicionar = Image.open('icone/produtos.png')
    app_img_adicionar = app_img_adicionar.resize((40, 40))
    app_img_adicionar = ImageTk.PhotoImage(app_img_adicionar)
    app_adicionar = Button(frame_dados, command=lambda: control('produtos'), image=app_img_adicionar, text=' Produtos',
                           width=150, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_adicionar.place(x=825, y=10)

    app_img_salvar = Image.open('icone/salvar94.png')
    app_img_salvar = app_img_salvar.resize((40, 40))
    app_img_salvar = ImageTk.PhotoImage(app_img_salvar)
    app_salvar = Button(frame_dados, command=lambda: control('notas'), image=app_img_salvar, text=' Notas', width=150,
                        compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_salvar.place(x=988, y=10)

    app_img_help = Image.open('icone/manutencao.png')
    app_img_help = app_img_help.resize((40, 40))
    app_img_help = ImageTk.PhotoImage(app_img_help)
    app_help = Button(frame_dados, command=lambda: control('manutencao'), image=app_img_help, text=' Manutenção',
                      width=150,
                      compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co0)
    app_help.place(x=1151, y=10)

    # Criando o botão de busca geral *************************************************************************************
    buscador = ""
    busca_geral = Entry(frame_logo, width=30, justify='left', relief='solid', font=('Ivy 15'), bg=co1, fg=co6)
    busca_geral.place(x=560, y=14)

    def buscar_texto():
        buscador = busca_geral.get()
        busca_geral.delete(0, END)
        return buscador

    busca_lg = Image.open('icone/inventario.png')
    busca_lg = busca_lg.resize((20, 20))
    busca_lg = ImageTk.PhotoImage(busca_lg)

    busca_logo = Button(frame_logo, command=lambda: control(buscar_texto()), image=busca_lg,
                        text='', width=30, compound=LEFT, overrelief=RIDGE, font=('Ivy 11'), bg=co1, fg=co6)
    busca_logo.place(x=895, y=15)
    # Finalizando botão de busca geral ***********************************************************************************

    # Criando as imagens dos botões **************************************************************************************
    global img_pagar, img_clientes, img_receber, busca_nt, img_add, img_salvar, img_novo, img_localizar, img_editar, img_cancelar, img_duplicar, img_deletar, img_limpar, img_importar, img_exportar, img_pagar_ct, img_receber_ct, img_mostrar_ct, img_aberto, img_bloquear
    busca_nt = Image.open('icone/novo.png')
    img_add = Image.open('icone/adicionar.png')
    img_salvar = Image.open('icone/salvar94.png')
    img_novo = Image.open('icone/novo96.png')
    img_localizar = Image.open('icone/visualizar.png')
    img_editar = Image.open('icone/editar.png')
    img_cancelar = Image.open('icone/cancelar.png')
    img_duplicar = Image.open('icone/duplicar.png')
    img_deletar = Image.open('icone/deletar.png')
    img_limpar = Image.open('icone/limpar.png')
    img_importar = Image.open('icone/importar.png')
    img_exportar = Image.open('icone/exportar.png')
    img_receber = Image.open('icone/Receber.png')
    img_clientes = Image.open('icone/Aluguel.png')
    img_pagar = Image.open('icone/Banco.png')
    img_pagar_ct = Image.open('icone/carteira.png')
    img_receber_ct = Image.open('icone/pagar.png')
    img_mostrar_ct = Image.open('icone/mostrar.png')
    img_aberto = Image.open('icone/exportar.png')
    img_bloquear = Image.open('icone/trancado.png')
    # Finalizando as imagens dos botões **************************************************************************************

    # Executando a janela-----------------------------------------------------
    janela.mainloop()


#Função para autenticação no Sistema de Controle************************************************************************
def password():
    # cores
    co0 = "#2e2d2b"  # Preta
    co1 = "#feffff"  # Branca
    co2 = "#e5e5e5"  # grey
    co3 = "#248eff"  # Verde
    co4 = "#403d3d"  # letra
    co5 = "#3152b7"  # azul
    co7 = "#d42e2b"  # vermelha
    co6 = "#378258"  # Verde novo
    co8 = "#263238"  # + verde
    co9 = "#e9edf5"  # + verde
    c10 = "#031904"  # Verde escuro
    c11 = "#5D6A5E"  # verde claro
    # Criando janela
    root = Tk()
    root.title("HIGHER")
    root.iconbitmap('icone/sistema.ico')
    root.geometry('600x410')
    root.configure(background=c10)
    style = Style(root)
    style.theme_use("clam")
    root.resizable(width=FALSE, height=FALSE)


    # Criando Imagens********************************************************************************************************
    img_logo = Image.open("icone/mostrar96.png")
    img_logo = img_logo.resize((60, 60))
    img_logo = ImageTk.PhotoImage(img_logo)

    img_user = Image.open("icone/Clientes2.png")
    img_user = img_user.resize((28, 28))
    img_user = ImageTk.PhotoImage(img_user)

    img_senha = Image.open("icone/Aluguel.png")
    img_senha = img_senha.resize((28, 28))
    img_senha = ImageTk.PhotoImage(img_senha)


    # Criando Frames********************************************************************************************************
    frame_lateral = Frame(root, width=200, height=600, bg=c10)
    frame_lateral.grid(row=0, column=0, pady=0, padx=0, sticky=EW)

    separador = Frame(root, width=3, height=600, bg=c10)
    separador.grid(row=0, column=1, pady=0, padx=0, sticky=EW)

    l_linha = Label(separador, relief=GROOVE, text='|', width=5, height=170, anchor=NW, font=('Ivy 1'), bg=co0,
                        fg=co0)
    l_linha.place(x=0, y=25)

    frame_detalhes = Frame(root, width=400, height=600, bg=c10)
    frame_detalhes.grid(row=0, column=2, pady=0, padx=10, sticky=EW)


    #Criando as funções necessárias******************************************************************************************
    #Alterar a cor de fundo e a borda de uma Combobox
    def mudar_cor_fundo(combobox, cor, borda):
        style = ttk.Style()
        style.configure('TCombobox', fieldbackground=cor)
        style.configure('TCombobox', bordercolor=borda)

    def reset_login():
        root.destroy()
        password()

    def criar_password():
        global e_pergunta
        def update():
            nome = e_usuario.get()
            chave = e_pergunta.get()
            senha = e_senha.get()
            tipo = e_tipo.get()
            if nome == "":
                messagebox.showerror('Erro', 'Favor informar um usuário!')
                return
            elif senha == "":
                messagebox.showerror('Erro', 'Favor informar uma senha!')
                return
            elif chave == "":
                messagebox.showerror('Erro', 'Digite uma resposta!')
                return
            elif tipo == "":
                messagebox.showerror('Erro', 'Tipo da conta não informado!')
                return

            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM password WHERE nome = ?"
            # cursor.execute(consulta)
            cursor.execute(consulta, (nome,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()
            # Verificando se os valores estão dentro do solicitado
            for resultado in resultados:
                if nome in resultado[1]:
                    messagebox.showwarning('Erro', 'Nome de usuário já existe, digite outro nome!')
                    return
            lista = [nome, senha, chave, tipo]
            # Inserindo os dados
            messagebox.showinfo("Sucesso!", "Usuário criado com sucesso!")

            #Criando o usuário no banco
            criar_senha(lista)

            #Limpando as caixas
            e_usuario.delete(0, END)
            e_senha.delete(0, END)
            e_tipo.delete(0, END)
            e_pergunta.delete(0, END)

        c_check.configure(text="Qual a sua cor favorita?")
        c_checkbox.destroy()
        l_esqueci.destroy()

        e_pergunta = Entry(frame_detalhes, width=23, background='darkblue', borderwidth=2, font=('Ivy 18'), bg=c11,
                           fg=co1)
        e_pergunta.place(x=24, y=260)

        botao_reset = Button(frame_detalhes, command=reset_login, anchor=CENTER, height=1,
                             text='Login'.upper(), width=10,
                             overrelief=RIDGE,
                             font=('Ivy 14 bold'), bg=co1, fg=co0)
        botao_reset.place(x=204, y=310)

        botao_salvar = Button(frame_detalhes, command=update, anchor=CENTER, height=1,
                              text='Salvar'.upper(), width=10,
                              overrelief=RIDGE,
                              font=('Ivy 14 bold'), bg=co1, fg=co0)
        botao_salvar.place(x=24, y=310)

    def editar_senha():
        global e_pergunta, botao_recuperar
        try:
            c_check.configure(text="Qual a sua cor favorita?")
            c_checkbox.destroy()
            l_esqueci.destroy()

            e_pergunta = Entry(frame_detalhes, width=23, background='darkblue', borderwidth=2, font=('Ivy 18'), bg=c11,
                               fg=co1)
            e_pergunta.place(x=24, y=260)

            botao_reset = Button(frame_detalhes, command=reset_login, anchor=CENTER, height=1,
                                 text='Login'.upper(), width=10,
                                 overrelief=RIDGE,
                                 font=('Ivy 14 bold'), bg=co1, fg=co0)
            botao_reset.place(x=204, y=310)

            def update():
                nome = e_usuario.get()
                senha = e_senha.get()
                chave = e_pergunta.get()
                tipo = e_tipo.get()

                lista = [nome, senha, chave, tipo]

                # limpando os campos de entrada
                e_usuario.delete(0, END)
                e_senha.delete(0, END)
                e_tipo.delete(0, END)
                e_pergunta.delete(0, END)
                # Verificando caso algum campo esteja vazio ou não
                for i in lista:
                    if i == "":
                        messagebox.showerror('Erro', 'Preencha todos os campos')
                        return
                # Verificando se os valores estão dentro do solicitado
                for i in lista:
                    if nome == "" or senha == "":
                        messagebox.showerror('Erro', 'Preencha todos os campos')
                        return

                # Conectando ao banco de dados
                conn = sqlite3.connect('bdsystem.db')
                cursor = conn.cursor()

                # Realizando a busca
                consulta = "SELECT * FROM password WHERE nome = ?"
                cursor.execute(consulta, (nome,))

                # Recuperando os resultados
                resultados = cursor.fetchall()

                # Fechando a conexão com o banco de dados
                conn.close()

                for resultado in resultados:
                    if nome in resultado:
                        lista.append(resultados[0][0])
                        # Atualizando os dados no banco de dados
                        atualizar_senha(lista)
                        messagebox.showinfo('Sucesso', 'Os dados foram atualizados com sucesso')
                        return

            botao_salvar = Button(frame_detalhes, command=update, anchor=CENTER, height=1,
                                  text='Salvar'.upper(), width=10,
                                  overrelief=RIDGE,
                                  font=('Ivy 14 bold'), bg=co1, fg=co0)
            botao_salvar.place(x=24, y=310)

        except IndexError:
            messagebox.showerror('Erro', 'Usuário não encontrado')

    def excluir_usuario():
        try:
            nome = e_usuario.get()
            messagebox.askokcancel('Atenção!', 'Quer realmente apagar este usuário?')
            # Conectando ao banco de dados
            conn = sqlite3.connect('bdsystem.db')
            cursor = conn.cursor()

            # Realizando a busca
            consulta = "SELECT * FROM password WHERE nome = ?"
            cursor.execute(consulta, (nome,))

            # Recuperando os resultados
            resultados = cursor.fetchall()

            # Fechando a conexão com o banco de dados
            conn.close()
            deletar_senha([resultados[0][0]])
            if resultados == []:
                messagebox.showerror('Erro', 'Usuário não encontrado!')
            else:
                # limpando os campos de entrada
                e_usuario.delete(0, END)
                e_senha.delete(0, END)
                e_pergunta.delete(0, END)
                messagebox.showinfo('Sucesso', 'Registro apagado com sucesso!')


        except IndexError:
            messagebox.showerror('Erro', 'Usuário não encontrado!')

    #Função para recuperar senha perdida************************************************************************************
    def recuperar_senha():
        global e_pergunta, botao_recuperar
        nome = e_usuario.get()
        chave = e_pergunta.get()
        senha = e_senha.get()

        if nome == "":
            messagebox.showerror('Erro', 'Favor informar um usuário!')
            return
        elif chave == "":
            messagebox.showerror('Erro', 'Digite uma resposta!')
            return
        # Conectando ao banco de dados
        conn = sqlite3.connect('bdsystem.db')
        cursor = conn.cursor()

        # Realizando a busca
        consulta = "SELECT * FROM password WHERE nome = ?"
        #cursor.execute(consulta)
        cursor.execute(consulta, (nome,))

        # Recuperando os resultados
        resultados = cursor.fetchall()

        # Fechando a conexão com o banco de dados
        conn.close()

        # Verificando se os valores estão dentro do solicitado
        for resultado in resultados:
            if chave == resultado[3]:
                e_senha.delete(0, END)
                e_senha.insert(0, resultado[2])
                botao_recuperar.destroy()
                c_check.configure(text= "")
                e_pergunta.destroy()
            else:
                messagebox.showwarning('Erro', 'Resposta incorreta!')
        if resultados == []:
            messagebox.showwarning('Erro', 'Resposta incorreta!')

    def limpar_senha():
        nome = ""
        senha = ""
        lista = [nome, senha, 1]
        atualizar_lembrar(lista)

    def logon():
        root.destroy()
        mainSYSTEM()
    
    def logon_user():
        root.destroy()
        userSYSTEM()
    #Função para logar no sistema com usuário e senha corretos**************************************************************
    def autenticar():
        nome = e_usuario.get()
        senha = e_senha.get()


        # Conectando ao banco de dados
        conn = sqlite3.connect('bdsystem.db')
        cursor = conn.cursor()

        # Realizando a busca
        consulta = "SELECT * FROM password WHERE nome = ? AND senha = ?"
        cursor.execute(consulta, (nome,senha,))

        # Recuperando os resultados
        resultados = cursor.fetchall()


        # Fechando a conexão com o banco de dados
        conn.close()

        lista = [nome, senha]

        #Limpar as caixas de usuário e senha
        e_usuario.delete(0,END)
        e_senha.delete(0,END)


        # Verificando se os valores estão dentro do solicitado
        for i in lista:
            if nome == "" or senha == "":
                messagebox.showerror('Erro', 'Favor informar um usuário e senha!')
                return
        
        for resultado in resultados:
            if resultado[4] == 'Administrador':
                #Função para criar os botões de excluir e voltar a tela de login
                def excluir_user():
                    botao_acesso = Button(frame_detalhes, command=excluir_usuario, anchor=CENTER, height=1,
                                          text='Excluir'.upper(), width=10,
                                          overrelief=RIDGE,
                                          font=('Ivy 14 bold'), bg=co1, fg=co0)
                    botao_acesso.place(x=24, y=310)

                    botao_reset = Button(frame_detalhes, command=reset_login, anchor=CENTER, height=1,
                                         text='Login'.upper(), width=10,
                                         overrelief=RIDGE,
                                         font=('Ivy 14 bold'), bg=co1, fg=co0)
                    botao_reset.place(x=204, y=310)

                #Testando se o usuário foi encontrado no banco
                for resultado in resultados:
                    if lista[0] == resultado[1] and lista[1] == resultado[2]:
                        messagebox.showinfo('Sucesso', f'Seja bem Vindo {nome}!')
                        l_cadastro = Label(frame_detalhes, text="Cadastrar um novo usuário:", height=1, anchor=NW,
                                           font=('Ivy 8'),
                                           bg=c10,
                                           fg=co1)
                        l_cadastro.place(x=94, y=360)
                        l_cadastro.bind("<Button-1>", lambda event: criar_password())
                        l_excluir = Label(frame_detalhes, text="Excluir conta de usuário:", height=1, anchor=NW,
                                           font=('Ivy 8'),
                                           bg=c10,
                                           fg=co7)
                        l_excluir.place(x=104, y=380)
                        l_excluir.bind("<Button-1>", lambda event: excluir_user())
                        botao_acesso = Button(frame_detalhes, command=logon, anchor=CENTER, height=1,
                                              text='Sistema'.upper(), width=10,
                                              overrelief=RIDGE,
                                              font=('Ivy 14 bold'), bg=co1, fg=co0)
                        botao_acesso.place(x=24, y=310)

                #Criando opções para alterar nome de usuário e senha e palavra chave
                l_esqueci.configure(text="Alterar cadastro")
                l_esqueci.bind("<Button-1>", lambda event: editar_senha())
            elif resultado[4] == 'Usuário':
                for resultado in resultados:
                    if lista[0] == resultado[1] and lista[1] == resultado[2]:
                        messagebox.showinfo('Sucesso', f'Seja bem Vindo {nome}!')

                        botao_acesso = Button(frame_detalhes, command=logon_user, anchor=CENTER, height=1,
                                              text='Sistema'.upper(), width=10,
                                              overrelief=RIDGE,
                                              font=('Ivy 14 bold'), bg=co1, fg=co0)
                        botao_acesso.place(x=24, y=310)


        if resultados == []:
            messagebox.showwarning('Erro', 'Usuário ou senha incorretos!')

    #Função para sair da tela de senhas*************************************************************************************
    def funcao_sair():
        root.destroy()

    #Função para iniciar processo de recuperação de senha*******************************************************************
    def recuperar():
        global e_pergunta, botao_recuperar

        c_check.configure(text= "Qual a sua cor favorita?")
        c_checkbox.destroy()
        l_esqueci.destroy()
        e_pergunta = Entry(frame_detalhes, width=23, background='darkblue', borderwidth=2, font=('Ivy 18'), bg=c11, fg=co1)
        e_pergunta.place(x=24, y=260)

        botao_recuperar = Button(frame_detalhes, command=recuperar_senha, anchor=CENTER, height=1,
                                 text='Recuperar'.upper(), width=10,
                                 overrelief=RIDGE,
                                 font=('Ivy 14 bold'), bg=co1, fg=co0)
        botao_recuperar.place(x=24, y=310)

        botao_reset = Button(frame_detalhes, command=reset_login, anchor=CENTER, height=1,
                             text='Login'.upper(), width=10,
                             overrelief=RIDGE,
                             font=('Ivy 14 bold'), bg=co1, fg=co0)
        botao_reset.place(x=204, y=310)

    #Função para lembrar a senha********************************************************************************************
    def setar_lembrar():
        nome = e_usuario.get()
        senha = e_senha.get()
        lista = [nome, senha, 1]
        atualizar_lembrar(lista)

    def alternar_funcao():
        valor = check_box.get()
        if valor == 1:
            setar_lembrar()
        else:
            id_lembrar = 1
            nome_padrao = ""
            senha_padrao = ""
            lista_lembrar = [nome_padrao, senha_padrao, id_lembrar]
            atualizar_lembrar(lista_lembrar)

    #Função para ativar a tecla ENTER e acionar o botão Entrar***************************************************************
    def focus_to_botao(evento):
        if evento.keysym == "Return":
            autenticar()

    def ver_usuarios(i):
        # Conectando ao banco de dados
        conn = sqlite3.connect('bdsystem.db')
        cursor = conn.cursor()

        # Realizando a busca
        consulta = "SELECT * FROM password"
        cursor.execute(consulta)

        # Recuperando os resultados
        resultados = cursor.fetchall()

        # Fechando a conexão com o banco de dados
        conn.close()

        lista = []
        for resultado in resultados:
            lista.append(resultado[1])
        df = pd.DataFrame(lista)
        colunas = ["  Usuários:"]
        df.columns=colunas
        df_str = df.to_string(index=False)
        messagebox.showinfo("Usuários cadastrados", df_str)

    def gerar_senha(i):
        from random import choice, shuffle
        import string
        from tkinter.ttk import Style

        def senha():
            texto_senha.delete(0, END)
            lista1 = string.ascii_letters  # todas as letras maiusculas e minusculas
            lista2 = string.digits  # numeros de 0 a 9
            lista3 = string.punctuation  # caracteres especiais
            lista = lista1 + lista2 + lista3
            try:
                n = int(caixa1.get())
                c = 0
                password = ''
                texto_senha['state'] = NORMAL
                for c in range(0, n):
                    senha = choice(lista)
                    password = str(password + senha)
                texto_senha.insert(0, password)
                caixa1['state'] = DISABLED
                botao['state'] = DISABLED
            except:
                texto_senha.insert(0, "Valor Incorreto!")

        def senhaN():
            lista = string.digits
            try:
                n = int(caixa1.get())
                c = 0
                password = ''
                texto_senha1['state'] = NORMAL
                for c in range(0, n):
                    senha = choice(lista)
                    password = str(password + senha)
                texto_senha1.insert(0, password)
                caixa1['state'] = DISABLED
                botao1['state'] = DISABLED
            except:
                texto_senha1.insert(0, "Valor Incorreto!")

        def senhaP():
            texto_senha.delete(0, END)
            lista1 = string.ascii_letters  # todas as letras maiusculas e minusculas
            lista2 = string.digits  # numeros de 0 a 9
            lista3 = string.punctuation  # caracteres especiais
            lista = lista1 + lista2 + lista3
            try:
                n = int(caixa1.get())
                c = 0
                password = ''
                texto_senha['state'] = NORMAL
                for c in range(0, n):
                    senha = choice(lista)
                    password = str(password + senha)
                texto_senha.insert(0, personal())
                caixa1['state'] = DISABLED
                botaop['state'] = DISABLED
            except:
                texto_senha.insert(0, "Valor Incorreto!")

        def limpar():
            texto_senha.delete(0, END)
            texto_senha1.delete(0, END)
            caixa1.delete(0, END)
            texto_senha1['state'] = DISABLED
            texto_senha['state'] = DISABLED
            caixa1['state'] = NORMAL
            botao['state'] = NORMAL
            botao1['state'] = NORMAL
            botaop['state'] = NORMAL

        def sair():
            texto_senha.delete(0, END)
            texto_senha1.delete(0, END)
            caixa1.delete(0, END)
            texto_senha1['state'] = DISABLED
            texto_senha['state'] = DISABLED
            caixa1['state'] = NORMAL
            botao['state'] = NORMAL
            botao1['state'] = NORMAL
            tela_senhas.destroy()
            return

        def personal():
            valores = string.ascii_letters  # todas as letras maiusculas e minusculas
            num = string.digits  # numeros de 0 a 9
            especiais = string.punctuation  # caracteres especiais

            # Definindo a quantidade de cada tipo:
            tamanhoV = int(caixa1.get())
            tamanhoE = int(caixaN.get())
            tamanhoS = int(caixaE.get())

            # Inicializando as variaveis
            senha = ""
            password = ""
            lista = list()

            # Percorrendo as listas:
            for i in range(tamanhoV - tamanhoE - tamanhoS):
                senha = choice(valores)
                lista.append(senha)

            for i in range(tamanhoE):
                senha = choice(num)
                lista.append(senha)

            for i in range(tamanhoS):
                senha = choice(especiais)
                lista.append(senha)
            shuffle(lista)

            for i in range(0, len(lista)):
                password += lista[i]

            return password

        cor0 = "#222f1c"
        cor1 = "#feffff"
        cor2 = "#739F60"

        tela_senhas = Tk()
        tela_senhas.title('GERADOR DE SENHAS')
        tela_senhas.geometry("630x350")
        tela_senhas.configure(background=cor0)
        style = Style(tela_senhas)
        style.theme_use("clam")

        texto_orientacao = Label(tela_senhas, background=cor0, text='QUANTOS DIGITOS PARA A SUA SENHA -', fg=cor1,
                                 font="Ivy 15")
        texto_orientacao.place(x=10, y=10)

        texto_orientacao = Label(tela_senhas, background=cor0, text='QUANTOS NÚMEROS PARA A SENHA      -', fg=cor1,
                                 font="Ivy 15")
        texto_orientacao.place(x=10, y=40)

        texto_orientacao = Label(tela_senhas, background=cor0, text='QUANTOS CARACTERES ESPECIAIS       -', fg=cor1,
                                 font="Ivy 15")
        texto_orientacao.place(x=10, y=70)

        # pastaApp = os.path.dirname(__file__)
        # img = PhotoImage(file=pastaApp+"//image.gif")
        # label_imagem = Label(janela, image=img)
        # label_imagem.grid(column=0, row=0, padx=10, pady=10, sticky=W)

        caixa1 = Entry(tela_senhas, background="yellow", justify='center', width=15, font="Ivy 15", state=NORMAL)
        caixa1.place(x=444, y=10)

        caixaN = Entry(tela_senhas, background="yellow", justify='center', width=15, font="Ivy 15", state=NORMAL)
        caixaN.place(x=444, y=40)

        caixaE = Entry(tela_senhas, background="yellow", justify='center', width=15, font="Ivy 15", state=NORMAL)
        caixaE.place(x=444, y=70)

        botao = Button(tela_senhas, background=cor2, width=15, text='SENHA HEXAD.', fg="white", font="Ivy 15",
                       command=senha, state=NORMAL)
        botao.place(x=10, y=180)

        botaop = Button(tela_senhas, background=cor2, width=15, text='PERSONALIZADA', fg="white", font="Ivy 15",
                        command=senhaP, state=NORMAL)
        botaop.place(x=197, y=180)

        botao1 = Button(tela_senhas, background=cor2, width=15, text='SENHA Nº', fg="white", font="Ivy 15",
                        command=senhaN,
                        state=NORMAL)
        botao1.place(x=444, y=180)

        # Vai exibir o retorno da função senha() e mostrar na tela.
        texto_senha = Entry(tela_senhas, background=cor1, width=32, justify='center', fg="red", font="Ivy 15",
                            state=DISABLED)
        texto_senha.place(x=10, y=130)

        texto_senha1 = Entry(tela_senhas, background=cor1, width=15, justify='center', fg="red", font="Ivy 15",
                             state=DISABLED)
        texto_senha1.place(x=444, y=130)

        # texto_orientacao1 = Label(janela,background="#962235", text='', font="Ivy 15")
        # texto_orientacao1.place(x=4, y=210)

        botaoL = Button(tela_senhas, background=cor2, width=15, text='LIMPAR', fg="white", font="Ivy 15",
                        command=limpar)
        botaoL.place(x=104, y=260)

        botaoS = Button(tela_senhas, background=cor2, width=15, text='SAIR', fg="white", font="Ivy 15", command=sair)
        botaoS.place(x=304, y=260)

        marca = Label(tela_senhas, text='@JAC Development', background=cor0, foreground=cor1, anchor=N)
        marca.place(x=280, y=320)

        tela_senhas.mainloop()

    #Componentes do Programa*************************************************************************************************
    check_box = IntVar()
    l_logo = Label(frame_lateral, image=img_logo, bg=c10)
    l_logo.place(x=68, y=110)
    l_logo = Label(frame_lateral,text="SISTEMA DE CONTROLE \n HIGHER \n @Copyright | 2023\nJac Development", bg=c10, fg=co1)
    l_logo.place(x=34, y=180)

    l_topo = Label(frame_detalhes, text="Olá, seja bem-vindo!", height=1, anchor=NW,
                       font=('Arial 26'),
                       bg=c10,
                       fg=co1)
    l_topo.place(x=24, y=20)
    l_identidade = Label(frame_detalhes, text="Identifique-se para entrar:", height=1, anchor=NW,
                       font=('Ivy 12'),
                       bg=c10,
                       fg=co1)
    l_identidade.place(x=84, y=70)


    # Conectando ao banco de dados
    conn = sqlite3.connect('bdsystem.db')
    cursor = conn.cursor()
    # Realizando a busca
    query = "SELECT * FROM lembrar"
    cursor.execute(query)
    linha = cursor.fetchall()
    # Fechando a conexão com o banco de dados
    conn.close()
    nome = linha[0][1]
    senha = linha[0][2]

    e_tipo = ttk.Combobox(frame_detalhes, width=15, font=('Ivy 8 bold'))
    mudar_cor_fundo(e_tipo, c11, c11)
    e_tipo['values'] = ('Administrador', 'Usuário')
    e_tipo.place(x=211, y=120)

    e_usuario = Entry(frame_detalhes, width=20, background='darkblue', borderwidth=2, font=('Ivy 18'),bg=c11, fg=co1)
    e_usuario.place(x=24, y=150)
    l_user = Label(frame_detalhes, image=img_user)
    l_user.bind("<Button-1>", ver_usuarios)
    l_user.place(x=290, y=151)


    e_senha = Entry(frame_detalhes, width=20, background='darkblue', show='*', borderwidth=2,font=('Ivy 18'),bg=c11, fg=co1)
    e_senha.place(x=24, y=200)
    e_senha.bind('<Return>', focus_to_botao)
    l_password = Label(frame_detalhes, image=img_senha)
    l_password.bind("<Button-1>", gerar_senha)
    l_password.place(x=290, y=201)

    c_check = Label(frame_detalhes, text="Lembrar senha", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=c10,
                       fg=co1)
    c_check.place(x=50, y=240)

    c_checkbox = Checkbutton (frame_detalhes,variable=check_box, command=alternar_funcao,text="", onvalue=1, offvalue=0, bg=c10)
    c_checkbox.place(x=24, y=240)

    l_esqueci = Label(frame_detalhes, text="Esqueci minha senha!", height=1, anchor=NW,
                       font=('Ivy 10'),
                       bg=c10,
                       fg=co1)
    l_esqueci.place(x=190, y=240)
    l_esqueci.bind("<Button-1>", lambda event:recuperar())


    botao_entrar = Button(frame_detalhes, command=autenticar, anchor=CENTER, height=1,
                                 text='Entrar'.upper(), width=10,
                                 overrelief=RIDGE,
                                 font=('Ivy 14 bold'), bg=co1, fg=co0)
    botao_entrar.place(x=24, y=310)




    botao_sair = Button(frame_detalhes, command=funcao_sair, anchor=CENTER, height=1,
                                 text='Sair'.upper(), width=10,
                                 overrelief=RIDGE,
                                 font=('Ivy 14 bold'), bg=co1, fg=co0)
    botao_sair.place(x=204, y=310)

    e_usuario.delete(0, END)
    e_senha.delete(0, END)
    e_usuario.insert(0, nome)
    e_senha.insert(0, senha)

    # Executando a janela-----------------------------------------------------
    root.mainloop()


#Função que vai iniciar o sistema
#mainSYSTEM()
#userSYSTEM()
password()

